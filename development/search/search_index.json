{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to ONE Record Standard Specifications!</p>"},{"location":"#what-is-one-record","title":"What is ONE Record?","text":"<p>The vision for ONE Record is an end-to-end digital logistics and transport supply chain where data is easily and transparently exchanged in a digital ecosystem of air cargo stakeholders, communities and data platforms.</p> <p>ONE Record is a standard for data sharing and creates a single record view of the shipment. This standard defines a common data model for the data that is shared via standardized and secured web API.</p> <p>You can find further information about ONE Record standard on the IATA dedicated webpage and on the ONE Record Developer Portal.</p>"},{"location":"#structure-of-the-documentation","title":"Structure of the documentation","text":"<ul> <li>API Specifications: xxx</li> <li>Data Model specifications: xxx</li> <li>Data Orchestration: xxx</li> </ul>"},{"location":"API-Security/","title":"Introduction","text":""},{"location":"API-Security/#purpose","title":"Purpose","text":"<p>This ONE Record API specification is part of the ONE Record standard. It defines a standard, programming language-agnostic interface for the interaction with the ONE Record Web API. This ONE Record API specification supports the effective implementation of ONE Record compliant APIs. It aims to provide detailed realistic use cases and examples for the various API features while maintaining the necessary technical depth for implementers.</p>"},{"location":"API-Security/#prerequisites","title":"Prerequisites","text":"<p>It is assumed that the reader is familiar with the ONE Record data model, REST APIs (also known as RESTful APIs), and JSON-LD.</p>"},{"location":"API-Security/#supporting-documents","title":"Supporting Documents","text":"<ul> <li>Changelog contains a list of all notable changes for each version of the ONE Record API specification.</li> <li>ONE Record API ontology provides the vocabulary and data classes for the data model used in the ONE Record API.</li> <li>Tabular overview of ONE Record API ontology is a tabular representation of the ONE Record API ontology and describes the ONE Record API data classes, their properties as attributes, descriptions and valid values.</li> <li>ONE Record API class diagram is a visual representation of the ONE Record API ontology and describes the ONE Record API data classes, their properties as attributes, and the relationship that can exist between the classes.</li> <li>OpenAPI specification describes the prescribed API endpoint structure of a ONE Record server implementation. </li> <li>Postman collection contains demo HTTP requests that demonstrate how to interact with the various ONE Record API endpoints and can be used to playback the examples provided in this document.</li> </ul>"},{"location":"API-Security/#document-version","title":"Document Version","text":"<p>Version: 2.0.0</p> <p>Status: Endorsed by COTB on December 2023</p> <p>Note</p> <p>Discussion on this specification is highly encouraged and please contact onerecord@iata.org with any comments or suggested improvements. The version of the ONE Record API specification is incremented when the API specifications are endorsed by the IATA Cargo Operations Technology Board (COTB).</p>"},{"location":"API-Security/#dependencies","title":"Dependencies","text":"<p>The ontology of the ONE Record API uses data classes defined in the ONE Record cargo ontology.  Therefore, this ONE Record API version 2.0.0 requires the ONE Record cargo ontology 3.0.0 or later.</p>"},{"location":"API-Security/#conventions","title":"Conventions","text":"<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.</p>"},{"location":"API-Security/#license","title":"License","text":"<p>This document is licensed under MIT license (see License for details).</p>"},{"location":"API-Security/access-delegations/","title":"Access Delegations","text":"<p>In ONE Record, parties can grant other parties access to their data (or parts of it).  The ONE Record standard allows parties to change or revoke these access rights to their data whenever they wish.</p> <p>Before an organization can access a LogisticsObject of another organization, it needs to be authorized to do so and the server that hosts the logistics objects will determine whether to grant access. Typically, when an participant creates a LogisticsObject and makes it available via its ONE Record API, the IoL participant will share the URI of that LogisticsObject with another IoL participant and grant them access by default.</p> <p>For example, a freight forwarder creates a Shipment, grants read access to an airline, and then sends the URI of the Logistics Object via a ONE Record Notification or other channel to the airline.</p> <p>It might happen that the Airline needs access to additional Logistics objects linked to the Shipment (i.e.: Piece). In this case, the Airline MAY request the access delegation directly from the freight forwarder (Example A1)</p> <p>At this point, only the forwarder and the airline can access this specific LogisticsObjects, but no one else.</p> <p>However, if a ground handling agent (GHA) also needs access to this logistics object, the airline MAY request an access delegation for the GHA (Example A2).</p> <p>If, as in this presented scenario, the airline already has a delegation of access to the logistics object, the concept of Trust Chains takes effect.</p> <p>Note</p> <p>The party granting access is referred to as the <code>Delegator</code> and the party receiving access is the <code>Delegate</code>.  The party requesting access is referred to as the <code>Requestor</code>.</p> <p>Guidelines for Access Delegations in ONE Record:</p> <ul> <li>Only the Holder of a Logistics Object MAY delegate access to logistics objects.</li> <li>Any authenticated User of a Logistics Object CAN request a AccessDelegation on a Logistics Object, which result in a AccessDelegationRequest with the status REQUEST_PENDING.</li> <li>The implementer of the ONE record server MUST ensure that the requestor gets sufficient access to the resulting AccessDelegationRequest to query the status of the AccessDelegationRequest and revoke the AccessDelegationRequest (see also section on revoking Action Requests</li> <li>The Holder of a Logistics Object decides about the AccessDelegationRequest and changes the requestor's permissions to a Logistics Object unless there is a business or technical reason to reject it.</li> </ul>"},{"location":"API-Security/access-delegations/#request-access-delegation","title":"Request Access Delegation","text":""},{"location":"API-Security/access-delegations/#endpoint","title":"Endpoint","text":"<pre><code> POST {{baseURL}}/access-delegations\n</code></pre>"},{"location":"API-Security/access-delegations/#request","title":"Request","text":"<p>The following HTTP header parameters MUST be present in the request:</p> Header Description Examples Accept The content type that the ONE Record client wants the HTTP response to be formatted in. application/ld+json Content-Type The content type that is contained with the HTTP body. Valid content types. application/ld+json <p>The HTTP request body must contain a valid AccessDelegation object in the format as specified by the Content-Type in the header.</p> <p>The AccessDelegation is a data class of the ONE Record API ontology. The properties and relationships to other data classes are visualized in the diagram.</p> <pre><code>classDiagram\n    direction LR\n\n    class LogisticsObject{                \n    }\n\n    class Organization{        \n    }  \n    class AccessDelegation{\n        + hasDescription: xsd:string [0..1]\n        + hasPermission[]: Permission [1..*]                \n        + isRequestedFor[]: Organization [1..*]\n        + notifyRequestStatusChange: xsd:boolean = FALSE\n        + hasLogisticsObject[]: LogisticsObject [1..*]        \n    }\n\n    AccessDelegation \"1\" --&gt; \"1..*\" Permission   \n    AccessDelegation \"1\" --&gt; \"1..*\" Organization: requestedFor\n    AccessDelegation \"1\" --&gt; \"1..*\" LogisticsObject\n\n    class Permission{\n        &lt;&lt;Enumeration&gt;&gt;\n        GET_LOGISTICS_EVENT\n        GET_LOGISTICS_OBJECT\n        PATCH_LOGISTICS_OBJECT\n        POST_LOGISTICS_EVENT\n    }    </code></pre>"},{"location":"API-Security/access-delegations/#response","title":"Response","text":"<p>A successful request MUST return a <code>HTTP/1.1 201 Created</code> status code and the following HTTP headers parameters MUST be present in the response:</p> Header Description Examples Location The URI of the newly created AccessDelegationRequest https://1r.example.com/action-requests/b6c24b63-405c-5cc3-ac88-9b109bb939ba Type The type of the newly created AccessDelegationRequest as a URI https://onerecord.iata.org/ns/api#AccessDelegationRequest <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 201 Request for delegation was successful No response body 400 Invalid Access Delegation object Error 401 Not authenticated Error 403 Not authorized to submit Delegation Request Error 415 Unsupported Content Type Error 500 Internal Server Error Error"},{"location":"API-Security/access-delegations/#security","title":"Security","text":"<p>To engage with the \"Request Access Delegation\" endpoint, a client needs proper authentication. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status.</p>"},{"location":"API-Security/access-delegations/#example-a1","title":"Example A1","text":"<p>An organization requests an access delegation for itself for the Piece with the URI https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c</p> <p>Request: </p> <p><pre><code>POST /access-delegations HTTP/1.1\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:AccessDelegation\",\n    \"api:hasDescription\": \"Require access to Piece for handling\",\n    \"api:hasPermission\": [{\n            \"@id\": \"api:GET_LOGISTICS_OBJECT\"\n        }\n    ],\n    \"api:isRequestedFor\": [{\n        \"@id\": \"https://1r.example.com/logistics-objects/Airline_XYZ\"\n    }],\n    \"api:notifyRequestStatusChange\": false,\n    \"api:hasLogisticsObject\": [{\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    }]\n}\n</code></pre> (AccessDelegation_example1.json)</p> <p>Response: <pre><code>HTTP/1.1 201 Created\nLocation: https://1r.example.com/action-requests/b6c24b63-405c-5cc3-ac88-9b109bb939ba\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/api#AccessDelegationRequest\n</code></pre></p> <p>Note</p> <p>The <code>Requestor</code> linked the isRequestedBy property in the created AccessDelegationRequest and the <code>Delegate</code> linked in the isRequestedFor property in the AccessDelegation are the same.</p>"},{"location":"API-Security/access-delegations/#example-a2","title":"Example A2","text":"<p>An organization requests an access delegation for a business partner for the Piece with the URI https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c</p> <p>Request: </p> <p><pre><code>POST /access-delegations HTTP/1.1\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:AccessDelegation\",\n    \"api:hasDescription\": \"Our GHA requires read access to Piece for handling\",\n    \"api:hasPermission\": [{\n            \"@id\": \"api:GET_LOGISTICS_OBJECT\"\n        }\n    ],\n    \"api:isRequestedFor\": [{\n        \"@id\": \"https://1r.example.com/logistics-objects/GHA_ABC\"\n    }],\n    \"api:notifyRequestStatusChange\": false,\n    \"api:hasLogisticsObject\": [{\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    }]\n}\n</code></pre> (AccessDelegation_example2.json)</p> <p>Response: <pre><code>HTTP/1.1 201 Created\nLocation: https://1r.example.com/action-requests/1d2d3807-5dd9-5b5b-acb6-26163a6d7411\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/api#AccessDelegationRequest\n</code></pre></p> <p>Note</p> <p>The <code>Requestor</code> associated with the isRequestedBy property in the created AccessDelegationRequest is different from the <code>Delegate</code> linked in the isRequestedFor property in the AccessDelegation. The <code>Requestor</code> must be derived from the API authentication mechanism identifying who is making the request.</p>"},{"location":"API-Security/access-delegations/#trust-chains","title":"Trust Chains","text":"<p>Trust chains are based on business partnerships and trust in the transport chain.  It ensures that the company who has shared a logistics object, always knows who MAY access the data and at any time, it can revoke all or part of the chain of trust.</p> <p>Therefore, the concept described in the previous sections can be used by organizations to delegate access to their partners, which become 3rd parties. In the example above, the airline can request that the forwarder gives access to their ground handler.  The forwarder will grant the access on the basis that they trust the airline who trusts their ground handler.</p> <p>However, if the holder of the logistics object withdraws access delegation to a second party, it MUST be ensured that the third party's access delegation is also withdrawn.</p> <p>See also the section about revoking Action Requests.</p>"},{"location":"API-Security/action-requests/","title":"Action Requests","text":"<p>ONE Record uses a generic action request pattern to support the process of one organization requesting an action that must be approved by another organization.  Examples include SubscriptionRequest, where the subscriber asks the publisher to subscribe him/her on a LogisticsObject; or the ChangeRequest,  where a <code>User of a LogisticsObject</code> submits a Change of a LogisticsObject that must be approved and applied by the <code>Holder of the LogisticsObject</code>.</p> <p>While the creation of Action Requests by submitting Change, Subscription or Access Delegation objects is described in the previous sections, this section describes the managing of Action Requests. This enables users and holders to view and revoke action requests, and enables holders to change the status of an ActionRequest, i.e. to accept or reject.</p> <p>Guidelines for Action Requests in ONE Record:</p> <ul> <li>An ActionRequest MUST be accessible via the URI of the ActionRequest (requires sufficient permissions)</li> <li>An ActionRequest MUST only be accepted or reject by the <code>Holder of the LogisticsObject</code></li> <li>A VerificationRequest MUST only be acknowledged by the <code>Holder of the LogisticsObject</code></li> <li>An ActionRequest where isRequestedBy is the <code>Holder of the LogisticsObject</code> SHOULD be accepted and processed directly.</li> <li>An ActionRequest MUST only be revoked as long as it is in <code>REQUEST_PENDING</code> status.</li> <li>An AccessDelegationRequest MUST only be revoked by the <code>Delegator</code> or the <code>Delegate</code></li> <li>A SubscriptionRequest MUST only be revoked by the <code>Requestor</code>/<code>Subscriber</code> or the <code>Publisher</code></li> <li>A VerificationRequest MUST only be revoked by the <code>Requestor</code> or the <code>Holder of the LogisticsObject</code></li> <li>If errors occur while processing an accepted ActionRequest, the hasRequestStatus of this ActionRequest MUST be changed to REQUEST_FAILED</li> </ul> <p>ActionRequest state diagram for AccessDelegationRequest, ChangeRequest, and SubscriptionRequest</p> <pre><code>    stateDiagram-v2\n\n    direction LR   \n\n    [*] --&gt; REQUEST_PENDING\n\n    REQUEST_PENDING --&gt; REQUEST_ACCEPTED: accepted by holder\n    REQUEST_PENDING --&gt; REQUEST_REJECTED: rejected by holder\n    REQUEST_PENDING --&gt; REQUEST_REVOKED: revocation requested\n\n    REQUEST_REVOKED --&gt; [*]\n\n    REQUEST_ACCEPTED --&gt; [*]        \n    REQUEST_ACCEPTED --&gt; REQUEST_FAILED:  an error has occurred        \n\n    REQUEST_FAILED --&gt; [*]\n\n    REQUEST_REJECTED --&gt; [*]    </code></pre> <p>ActionRequest state diagram for VerificationRequest</p> <pre><code>    stateDiagram-v2\n\n    direction LR   \n\n    [*] --&gt; REQUEST_PENDING\n\n    REQUEST_PENDING --&gt; REQUEST_ACKNOWLEDGED: acknowledged by holder\n    REQUEST_PENDING --&gt; REQUEST_REJECTED: rejected by holder\n    REQUEST_PENDING --&gt; REQUEST_REVOKED: revocation requested\n    REQUEST_PENDING --&gt; REQUEST_FAILED: revocation requested\n\n    REQUEST_REVOKED --&gt; [*]      \n\n    REQUEST_FAILED --&gt; [*]\n\n    REQUEST_REJECTED --&gt; [*]    \n\n    REQUEST_ACKNOWLEDGED --&gt; [*]</code></pre> <p>ActionRequest data model</p> <p>The ActionRequest is a data class of the ONE Record API ontology. The properties and relationships to other data classes are visualized in the following class diagram.</p> <pre><code>    classDiagram\n\n    direction LR   \n\n    class LogisticsObject{                \n    }\n\n    class Organization{        \n    }  \n\n    class AccessDelegation{\n        + hasDescription: xsd:string [0..1]\n        + hasPermission[]: Permission [1..*]                \n        + isRequestedFor[]: Organization [1..*]\n        + notifyRequestStatusChange: xsd:boolean = FALSE\n        + hasLogisticsObject[]: LogisticsObject [1..*]        \n    }\n\n    AccessDelegation \"1\" --&gt; \"1..*\" Permission   \n    AccessDelegation \"1\" --&gt; \"1..*\" Organization: requestedFor\n    AccessDelegation \"1\" --&gt; \"1..*\" LogisticsObject\n\n    class ActionRequest {\n        &lt;&lt;Abstract&gt;&gt;         \n        + hasError[]: Error [*]\n        + isRequestedAt: xsd:dateTime         \n        + isRequestedBy: Organization            \n        + isRevokedBy: Organization [0..1]\n        + hasRequestStatus: RequestStatus = REQUEST_PENDING\n        + isRevokedAt: xsd:dateTime [0..1]                 \n    }\n    ActionRequest &lt;|-- AccessDelegationRequest\n    ActionRequest &lt;|-- ChangeRequest\n    ActionRequest &lt;|-- SubscriptionRequest\n\n    ActionRequest \"1\" --&gt; \"0..*\" Error     \n    ActionRequest \"1\" --&gt; \"1..*\" Organization : requestedBy    \n    ActionRequest --&gt; RequestStatus                \n    ActionRequest \"1\" --&gt; \"1..*\" Organization : revokedBy\n\n    class AccessDelegationRequest{\n        + hasAccessDelegation: AccessDelegation        \n    }\n    AccessDelegationRequest \"1\" --&gt; \"1\" AccessDelegation    \n\n    class ChangeRequest{        \n        + hasChange: Change        \n    }    \n    ChangeRequest \"1\" --&gt; \"1\" Change\n\n    class SubscriptionRequest{\n        + hasSubscription: Subscription\n    }   \n    SubscriptionRequest \"1\" --&gt; \"1\" Subscription\n\n    class VerificationRequest{\n        + hasVerification: Verification\n    }   \n    VerificationRequest\"1\" --&gt; \"1\" Verification\n\n    class Change{    \n        + hasDescription: xsd:string [0..1]    \n        + hasOperation[]: Operation [1..*]        \n        + hasLogisticsObject: LogisticsObject\n        + hasRevision: xsd:positiveInteger        \n        + notifyRequestStatusChange: xsd:boolean = FALSE\n    }\n    Change \"1\" --&gt; \"1\" LogisticsObject\n    Change \"1\" --&gt; \"1..*\" Operation\n\n    class Subscription{        \n        + hasContentType[]: xsd:string [*]\n        + hasDescription: xsd:string [0..1]\n        + expiresAt: xsd:dateTime [0..1]                                \n        + hasSubscriber: Organization        \n        + hasTopicType: TopicType\n        + notifyRequestStatusChange: xsd:boolean = FALSE          \n        + sendLogisticsObjectBody: xsd:boolean = FALSE        \n        + includeSubscriptionEventType[]: SubscriptionEventType [1..*]\n        + hasTopic: xsd:anyURI        \n    }    \n    Subscription \"1\" --&gt; \"1\" Organization: hasSubscriber\n    Subscription --&gt; TopicType\n    Subscription \"1\" --&gt; \"1..*\" SubscriptionEventType\n\n    class Verification{      \n        + hasLogisticsObject: LogisticsObject\n        + hasError[]: Error[1..*]        \n        + hasRevision: xsd:positiveInteger        \n        + notifyRequestStatusChange: xsd:boolean = FALSE\n    }\n    Verification \"1\" --&gt; \"1\" LogisticsObject\n    Verification \"1\" --&gt; \"1..*\" Error\n\n    class RequestStatus{\n        &lt;&lt;Enumeration&gt;&gt;\n        REQUEST_PENDING\n        REQUEST_ACCEPTED\n        REQUEST_ACKNOWLEDGED\n        REQUEST_REJECTED\n        REQUEST_FAILED\n        REQUEST_REVOKED        \n    }\n\n    class SubscriptionEventType{\n        &lt;&lt;Enumeration&gt;&gt;\n        LOGISTICS_OBJECT_CREATED\n        LOGISTICS_OBJECT_UPDATED\n\n        LOGISTICS_EVENT_RECEIVED\n    }</code></pre>"},{"location":"API-Security/action-requests/#get-action-request-details","title":"Get Action Request Details","text":""},{"location":"API-Security/action-requests/#endpoint","title":"Endpoint","text":"<pre><code> GET {{baseURL}}/action-requests/{{actionRequestId}}\n</code></pre>"},{"location":"API-Security/action-requests/#request","title":"Request","text":"<p>The following HTTP header parameters MUST be present in the request:</p> Header Description Examples Accept The content type that a ONE Record client wants the HTTP response to be formatted in. This SHOULD include the version of the ONE Record API, otherwise the latest supported ONE Record API MAY be applied. <ul><li>application/ld+json</li><li>application/ld+json; version=2.0.0-dev</li><li>application/ld+json; version=1.2</li></ul>"},{"location":"API-Security/action-requests/#response","title":"Response","text":"<p>A successful request MUST return a <code>HTTP/1.1 200 OK</code> status code.  The body of the response includes the Action Request in the RDF serialization format that has been requested in the <code>Accept</code> header of the request.</p> <p>The following HTTP headers parameters MUST be present in the response:</p> Header Description Example Content-Type The content type that is contained with the HTTP body. application/ld+json Content-Language Describes the language(s) for which the requested resource is intended. en-US Type The type of the Action Request as a URI https://onerecord.iata.org/ns/api#SubscriptionRequest Last-Modified he date and time of the most recent change to the Action Request. Syntax: <code>Last-Modified: &lt;day-name&gt;, &lt;day&gt; &lt;month&gt; &lt;year&gt; &lt;hour&gt;:&lt;minute&gt;:&lt;second&gt; GMT</code>. See https://developer.mozilla.org/en-US/docs/Web/ Tue, 21 Feb 2023 07:28:00 GMT <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 200 The request to retrieve the Action Request has been successful Action Request 301 The URI of the Action Request has permanently changed. No response body 302 The URI of the Action Request has temporarily moved. No response body 401 Not authenticated Error 403 Not authorized to retrieve the Action Request Error 404 Action Request not found Error 415 Unsupported Content Type Error 500 Internal Server Error Error"},{"location":"API-Security/action-requests/#security","title":"Security","text":"<p>To engage with the \"Get Action Request Details\" endpoint, a client needs proper authentication and authorization to access the designated resource. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status. Conversely, for requests without proper authorization, a <code>403 \"Not Authorized\"</code> response should be provided.</p>"},{"location":"API-Security/action-requests/#example-a1","title":"Example A1","text":"<p>Each SubscriptionRequest MUST have a URI that can be accessed by the requestor (subscriber)  and the publisher to obtain the current status of the request and subscription details.</p> <p>Request:</p> <pre><code>GET /action-requests/599fea49-7287-42af-b441-1fa618d2aaed HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <p><pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json; version=2.0.0-dev\nContent-Language: en-US\nLocation: https://1r.example.com/action-requests/599fea49-7287-42af-b441-1fa618d2aaed\nType: https://onerecord.iata.org/ns/api#SubscriptionRequest\nLast-Modified: Tue, 21 Feb 2023 07:28:00 GMT\n\n{\n    \"@context\": {\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:SubscriptionRequest\",\n    \"@id\": \"https://1r.example.com/action-requests/599fea49-7287-42af-b441-1fa618d2aaed\",\n    \"api:hasSubscription\": {\n        \"@type\": \"api:Subscription\",\n        \"@id\": \"internal:84891422-0215-519b-b551-bfb41d0519cd\",\n        \"api:hasContentType\": \"application/ld+json\",\n        \"api:hasSubscriber\": {\n            \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n        },\n        \"api:hasTopicType\": {\n            \"@id\": \"api:LOGISTICS_OBJECT_IDENTIFIER\"\n        },\n        \"api:includeSubscriptionEventType\": [\n            {\n                \"@id\": \"api:LOGISTICS_OBJECT_UPDATED\"\n            },\n            {\n                \"@id\": \"api:LOGISTICS_OBJECT_CREATED\"\n            },\n            {\n                \"@id\": \"api:LOGISTICS_EVENT_RECEIVED\"\n            }\n        ],\n        \"api:hasTopic\": {\n            \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n            \"@value\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n        }\n    },\n    \"api:isRequestedBy\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n    },\n    \"api:hasRequestStatus\": {\n        \"@id\": \"api:REQUEST_PENDING\"\n    },\n    \"api:isRequestedAt\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-20T10:38:01.000Z\"\n    }\n}\n</code></pre> (SubscriptionRequest_example2.json)</p>"},{"location":"API-Security/action-requests/#example-a2","title":"Example A2","text":"<p>After requesting a Verification of a LogisticsObject (see Example A1 in Verifications), the requestor can retrieve the VerificationRequest to check the status.</p> <p>Request: <pre><code>GET /action-requests/e4cf1ea5-96fc-4025-be21-159b779e3200 HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre></p> <p>Response:</p> <p><pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json; version=2.0.0-dev\nContent-Language: en-US\nLocation: https://1r.example.com/action-requests/e4cf1ea5-96fc-4025-be21-159b779e3200\nType: https://onerecord.iata.org/ns/api#VerificationRequest\nLast-Modified: Tue, 02 Jul 2024 10:45:00 GMT\n\n{\n    \"@context\":{\n       \"api\":\"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\":\"api:VerificationRequest\",\n    \"@id\":\"https://1r.example.com/action-requests/e4cf1ea5-96fc-4025-be21-159b779e3200\",\n    \"api:hasVerification\":{\n       \"@type\":\"api:Verification\",\n       \"api:hasLogisticsObject\":{\n          \"@id\":\"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n       },\n       \"api:hasError\":[\n          {\n             \"@type\":\"api:Error\",\n             \"api:hasTitle\":\"Empty goodsDescription. Please use goodsDescription to specify the description of the cargo\",\n             \"api:hasErrorDetail\":{\n                \"@type\":\"api:ErrorDetail\",\n                \"api:hasProperty\":{\n                   \"@value\":\"https: //onerecord.iata.org/ns/cargo#goodsDescription\",\n                   \"@type\":\"xsd:anyURI\"\n                }\n             }\n          }\n       ],\n       \"api:hasRevision\":{\n          \"@type\":\"http: //www.w3.org/2001/XMLSchema#positiveInteger\",\n          \"@value\":\"1\"\n       },\n       \"api:notifyRequestStatusChange\":true\n    },\n    \"api:isRequestedBy\":{\n       \"@id\":\"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n    },\n    \"api:hasRequestStatus\":{\n       \"@id\":\"api:REQUEST_PENDING\"\n    },\n    \"api:isRequestedAt\":{\n       \"@type\":\"http://www.w3.org/2001/XMLSchema#dateTime\",\n       \"@value\":\"2024-01-20T10:38:01.000Z\"\n    }\n }\n</code></pre> (VerificationRequest.json)</p>"},{"location":"API-Security/action-requests/#update-an-action-request","title":"Update an Action Request","text":"<p>This API action can be used the holder/publisher of a Logistics Object to approve or reject a pending ActionRequest.</p> <p>For example, as a publisher, this API action is used to change the status of a received Subscription Request on a ONE Record server using the PATCH HTTP method. </p> <p>Note</p> <p>Although the updating the state of of a Subscription Request is specified in the ONE Record API specification, it is not required to expose an API endpoint for this API action to be compliant with the ONE Record standard.  The reason for this is that only the holder of the logistics object MAY accept or reject a subscription request with any business logic or technology.         </p> <p>Nevertheless, this API action specification is included for reference, because in many cases, the use of HTTP PATCH is the preferred solution to update resources with REST APIs.</p>"},{"location":"API-Security/action-requests/#endpoint_1","title":"Endpoint","text":"<pre><code> PATCH {{baseURL}}/action-requests/{{actionRequestId}}\n</code></pre>"},{"location":"API-Security/action-requests/#request_1","title":"Request","text":"<p>The following query parameters MUST be supported:</p> Query parameter Description Valid values status A parameter used to configure the status of an Action request. This operation modifies the status of the Action Request based on the value specified in the status parameter. <ul><li>https://onerecord.iata.org/ns/api#REQUEST_ACCEPTED or REQUEST_ACCEPTED</li><li>https://onerecord.iata.org/ns/api#REQUEST_REJECTED or REQUEST_REJECTED</li><li>https://onerecord.iata.org/ns/api#REQUEST_REVOKED or REQUEST_REVOKED</li></ul> <p>The following HTTP header parameters MUST be present in the request:</p> Header Description Examples Accept The content type that a ONE Record client wants the HTTP response to be formatted in. This SHOULD include the version of the ONE Record API, otherwise the latest supported ONE Record API MAY be applied. <ul><li>application/ld+json</li><li>application/ld+json; version=2.0.0-dev</li><li>application/ld+json; version=1.2</li></ul> Content-Type The content type that is contained with the HTTP body. <ul><li>application/ld+json</li><li>application/ld+json; version=2.0.0-dev</li><li>application/ld+json; version=1.2</li></ul>"},{"location":"API-Security/action-requests/#response_1","title":"Response","text":"<p>A successful request MUST return a <code>HTTP/1.1 204 No Content</code> status code and the following HTTP headers parameters MUST be present in the response:</p> Header Description Example Location The URI of the Action Request https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99b Type The type of the Action Request as a URI https://onerecord.iata.org/ns/api#ChangeRequest <p>Otherwise, an <code>Error</code> object with <code>ErrorDetail</code> as response body MUST be returned with the following HTTP headers:</p> Header Description Example Content-Type The content type that is contained with the HTTP body. application/ld+json Content-Language Describes the language(s) for which the requested resource is intended. en-US <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 204 The Action Request was successfully updated No body required 400 The update request body is invalid Error 401 Not authenticated Error 403 Not authorized to update the Action Request Error 404 Action Request not found Error 415 Unsupported Content Type, response when the client sends a PATCH document format that the server does not support for the resource identified by the Request-URI. Error 422 Unprocessable request, when the server understands the PATCH document and the syntax of the PATCH document appears to be valid, but the server is incapable of processing the request. Error 500 Internal Server Error Error"},{"location":"API-Security/action-requests/#security_1","title":"Security","text":"<p>Access to the Action Request update endpoint should be restricted to internal usage only, and it must not be made available to external entities.</p>"},{"location":"API-Security/action-requests/#example-b1","title":"Example B1","text":"<p>Request:</p> <pre><code>PATCH /action-requests/733ed391-ad11-4c02-a2bf-c77ee7997c28?status=https://onerecord.iata.org/ns/api#REQUEST_ACCEPTED HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 204 No Content\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/api#SubscriptionRequest\nLocation: https://1r.example.com/action-requests/733ed391-ad11-4c02-a2bf-c77ee7997c28\n</code></pre>"},{"location":"API-Security/action-requests/#revoke-action-request","title":"Revoke Action Request","text":"<p>This API action MUST be used to revoke an Action Request MUST be revoked only by the original requestor of the ActionRequest or the holder/publisher of the Logistics Object.</p>"},{"location":"API-Security/action-requests/#endpoint_2","title":"Endpoint","text":"<pre><code> DELETE {{baseURL}}/action-requests/{{actionRequestId}}\n</code></pre>"},{"location":"API-Security/action-requests/#request_2","title":"Request","text":"<p>Revoking an Action Rquest does not require any mandatory HTTP headers.</p>"},{"location":"API-Security/action-requests/#response_2","title":"Response","text":"<p>A successful request MUST return a <code>HTTP/1.1 204 No Content</code> status code. </p> <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 204 The Action Request was successfully deleted No body required 401 Not authenticated Error 403 Not authorized to update the Action Request Error 404 Action Request not found Error 500 Internal Server Error Error"},{"location":"API-Security/action-requests/#security_2","title":"Security","text":"<p>To engage with the \"Revoke Action Request\" endpoint, a client needs proper authentication and authorization to access the designated resource. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status. Conversely, for requests without proper authorization, a <code>403 \"Not Authorized\"</code> response should be provided.</p>"},{"location":"API-Security/action-requests/#example-c1","title":"Example C1","text":"<p>Request: <pre><code>DELETE /action-requests/449661ee-fecf-465d-8eae-15bdaccb7080 HTTP/1.1\nHost: 1r.example.com\n</code></pre></p> <p>Response: <pre><code>HTTP/1.1 204 No Content\n</code></pre></p>"},{"location":"API-Security/api-features/","title":"Overview","text":""},{"location":"API-Security/api-features/#api-features","title":"API Features","text":"<p>The following features summarize all of the ONE Record API features</p> <p>Get ONE Record Server Information Anyone who has access to a ONE Record server can retrieve the technical server meta information that contains information about supported features, supported ONE Record API version, supported ONE Record data model version, etc.</p> <p>Create and publish a Logistics Object - Anyone who controls a ONE Record server can create a new Logistics Object based on the ONE Record data model specification. Once created the Logistics Object is associated with a unique URI that makes the Logistics Object available on the network.</p> <p>Read a Logistics Object - Logistics Objects can be retrieved by calling the URI of that Logistics Object - its Logistics Object URI. Access rights to that Logistics Object URI is managed by the Holder of the Logistics Object.</p> <p>Update a Logistics Object - As a fundamental principle, only the Holder of a Logistics Object can make changes to it. Therefore, changes required by other parties are expressed as <code>Change Requests</code> that needs to be approved and executed by the actual holder.</p> <p>Subscribe to a Logistics Object for updates - Once a Logistics Object has been created, the holder can propose subscriptions to other parties who will then be notified of any changes. Other parties may also request such a subscription at the discretion of the holder.</p> <p>Create Logistics Event linked with Logistics Objects - Logistics Events like \"arrival\", \"acceptance\" etc. are central in the management of logistics and transport. Every participant in the network with sufficient access rights can submit any type of Logistics Event to any published Logistics Object.</p> <p>Read Logistics Event linked to a Logistics Object - Every participant of the network with sufficient permissions, can also query the Logistics Events associated with a Logistics Object.</p> <p>Manage access to a Logistics Object - Another fundamental principle of ONE Record is that only holders of Logistics Objects have fully control access rights to that Logistics Object. Therefore, only the holder of a Logistics Object can delegate permissions to users of the Logistics Object.</p> <p>Delegate access to a Logistics Object to a third party - By default, most Logistics Objects are not public accessible. Most of the time, access is granted to specific parties. Should these parties need to delegate access to further stakeholders - because they require data access to fulfil their logistics activities- then there is a mechanism for requesting such access to the holder of the Logistics Object.</p> <p>Manage and access versions of Logistics Objects - Each time a logistics object is updated by a change in data, this change is recorded in an audit trail. This automatically creates a new version of the Logistics Object. Each version of the logistics object SHOULD be found and retrieved.</p> <p>API security - Although not strictly an API feature, ONE Record specifies security measures for implementation on web servers such that access to the server may be identified, authenticated and authorized.</p>"},{"location":"API-Security/api-features/#api-endpoints","title":"API Endpoints","text":"HTTP Methods API Endpoint API Function GET / Retrieve ServerInformation POST /logistics-objects/ Create Logistics Object. This endpoint could be either internal or not implemented. GET, PATCH /logistics-objects/{logisticsObjectId} Retrieve Logistics Object and links to related resources GET /logistics-objects/{logisticsObjectId}/audit-trail Retrieve Audit Trail of a Logistics Object GET, POST /logistics-objects/{logisticsObjectId}/logistics-events Create or retrieve LogisticsEvents to a Logistics Object GET /logistics-objects/{logisticsObjectId}/logistics-events/{LogisticsEvent URI} Retrieve a LogisticsEvent GET, POST /subscriptions Create or retrieve Subscription information for a Logistics Object type or a specific LogisticsObjectIdentifier GET, PATCH, DELETE /action-requests Create, retrieve, or update Action Request (i.e. SubscriptionRequests, ChangeRequests or AccessDelegationRequests) POST /notifications Receive Notifications POST /access-delegations Create, retrieve, or update Access Delegation Request"},{"location":"API-Security/bibliography/","title":"Bibliography","text":"<ul> <li>Access Control Ontology: https://www.w3.org/ns/auth/acl</li> <li>Web Access Control Specification from W3: https://www.w3.org/wiki/WebAccessControl</li> <li>Web Access Control specifications by Solid project: https://github.com/solid/web-access-control-spec</li> <li>WebSub specification by W3C: https://www.w3.org/TR/websub/</li> <li>Fedora project: https://wiki.lyrasis.org/display/FEDORA51/WebAC+Authorizations</li> <li>Access Control in Linked Data Using WebID: https://arxiv.org/pdf/1611.03019.pdf</li> <li>VCard ontology: https://www.w3.org/2006/vcard/ns#%3E</li> <li>Luca Costabello (2013) Context-aware access control and presentation of linked data. https://tel.archives-ouvertes.fr/tel-00934617/document</li> <li>JSON-LD 1.1 A JSON-based Serialization for Linked Data. https://www.w3.org/TR/json-ld11/</li> <li>JSON Web Token (JWT). https://jwt.io</li> <li>What is x-hub-signature? https://repl.ca/what-is-x-hub-signature/</li> </ul>"},{"location":"API-Security/changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"API-Security/changelog/#210-dev","title":"2.1.0-dev","text":""},{"location":"API-Security/changelog/#ideas","title":"Ideas","text":"<ul> <li>Sorting/Pagination Logistics Events list</li> <li>Add filters/triggers to Subscription information for server-side Notifications filtering</li> </ul>"},{"location":"API-Security/changelog/#one-record-api-specification","title":"ONE Record API Specification","text":""},{"location":"API-Security/changelog/#changed","title":"Changed","text":"<ul> <li>Align documentation and ontology using always hasErrorDetail/ErrorDetail.</li> </ul>"},{"location":"API-Security/changelog/#200","title":"2.0.0","text":""},{"location":"API-Security/changelog/#one-record-api-specification_1","title":"ONE Record API Specification","text":""},{"location":"API-Security/changelog/#changed_1","title":"Changed","text":"<ul> <li>restructured Introduction section</li> <li>use Logistics Object instead of its abbreviation LO </li> <li>use Logistics Object URI / Organization URI for the complete URI of a Logistics Object, i.e. https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c</li> <li>use logisticsObjectID for the unique identifier part of the URI, i.e. 1a8ded38-1804-467c-a369-81a411416b7c</li> <li>use Data Holder instead of Data Onwer</li> <li>redesign the Update Action Requests section</li> <li>use the Collection object to return a list of Logistics Events</li> </ul>"},{"location":"API-Security/changelog/#removed","title":"Removed","text":"<ul> <li>removed Memento (incl. TimeGate, Timemap)</li> <li>removed implicit endpoints; define URI structure of Logistics Objects</li> <li>removed Link HTTP header, because URI and endpoint structure is defined</li> <li>removed required ttl/turtle as supported content-type</li> <li>removed acl endpoint</li> </ul>"},{"location":"API-Security/changelog/#added","title":"Added","text":"<ul> <li>added UTF-8 as default content encoding</li> <li>added 1 as default revision number for AuditTrail and LogisticsObjects</li> <li>added class diagram as supporting document</li> <li>added overview of data classes and properties as CSV file to supporting documents,</li> <li>added two reference OpenAPI specifications as supporting documents (minimum = to be ONE Record server compliant; recommended = for comfort features)</li> <li>added <code>Implementation Guidelines</code> section to reduce ambiguity</li> <li>added JSON files with examples mentioned in the API specification</li> <li>added overview of permissions for Access Delegation</li> <li>added ActionEnum to class diagram</li> <li>added Authentication and Authorization with OpenID Connect</li> <li>added security and endpoint information for all APIs</li> <li>added allow subscription for third parties</li> <li>added list of JSON-LD libraries in the <code>Implementation Guidelines</code></li> </ul>"},{"location":"API-Security/changelog/#one-record-api-ontology","title":"ONE Record API Ontology","text":""},{"location":"API-Security/changelog/#changed_2","title":"Changed","text":"<ul> <li>changed IRI structure to follow best practice</li> <li>renamed CompanyInformation to ServerInformation, because it mainly contains meta information about the ONE Record API and its configuration</li> <li>replaced ServerInformation#company and ServerInformation#companyId (formerly CompanyInformation) with ServerInformation#dataOwner</li> <li>merged PatchRequest into ChangeRequest</li> <li>renamed Operation#op enums to UPPERCASE, e.g. changed del to DELETE</li> <li>renamed Details to ErrorDetail</li> <li>renamed ChangeRequest#requestingParty to ChangeRequest#requestedBy</li> <li>renamed ChangeRequest#timestamp to ChangeRequest#requestedAt</li> <li>changed ChangeRequest#requestingParty to ChangeRequest#requestedBy (https://onerecord.iata.org/ns/cargo#Organization) <li>renamed ErrorDetail#attribute to ErrorDetail#property</li> <li>renamed ServerInformation#supportedLogisticsObjects to ServerInformation#supportedLogisticsObjectTypes</li> <li>changed property type of Notification#topic, Notification#changedProperties, OperationObject#datatype, ServerInformation#serverEndpoint, ServerInformation#supportedLogisticsObjects, ErrorDetail#property, ErrorDetail#resource, Subscription#callbackUrl, Subscription#topic, Subscription#subscribedTo</li> <li>renamed Subscription#myCompanyIdentifier to Subscription#subscriber</li> <li>changed Subscription#cacheFor (xsd:int) to Subscription#expiresAt (xsd:dateTime)</li> <li>renamed DelegationRequest#operations to DelegationRequest#permissions</li> <li>renamed api#status (used in SubscriptionRequest, ChangeRequest DelegationRequest) to api#requestStatus</li> <li>renamed ServerInformation#hasDataOnwer into ServerInformation#hasDataHolder</li> <li>changed Subscription#notifyRequestStatusChange from mandatory to optional </li> <li>changed Change#notifyRequestStatusChange from mandatory to optional</li> <li>changed AccessDelegation#notifyRequestStatusChange from mandatory to optional</li>"},{"location":"API-Security/changelog/#removed_1","title":"Removed","text":"<ul> <li>removed not used classes, data properties, object properties</li> <li>removed Memento (classes, data properties, object properties)</li> <li>removed ServerInformation#companyId</li> <li>removed AuditTrail#errors</li> <li>removed AuditTrail#loInitialSnapshot</li> <li>removed ChangeRequest#requestorCompanyIdentifier</li> <li>removed ServerInformation#errors</li> <li>removed Subscription#subscribedTo</li> <li>replaced LogisticsObjectRef data class and use https://onerecord.iata.org/ns/cargo#LogisticsObject instead</li> <li>removed Subscription#secret</li> <li>removed DelegationRequest#action</li> <li>removed Subscription#callbackUrl</li> <li>removed cargo ontology data classes</li> <li>removed ServerInformation#hasSupportedLogisticsObjectType</li> <li>removed Subscription#subscribeToLogisticsEvents</li> </ul>"},{"location":"API-Security/changelog/#added_1","title":"Added","text":"<ul> <li>added Notification#changedProperties</li> <li>added further enums to notification#eventType, i.e. LOGISTICS_EVENT_RECEIVED, CHANGE_REQUEST_ACCEPTED, CHANGE_REQUEST_FAILED, CHANGE_REQUEST_PENDING, CHANGE_REQUEST_REJECTED, DELEGATION_REQUEST_PENDING, DELEGATION_REQUEST_ACCEPTED, DELEGATION_REQUEST_REJECTED, DELEGATION_REQUEST_FAILED, SUBSCRIPTION_REQUEST_PENDING, SUBSCRIPTION_REQUEST_ACCEPTED, SUBSCRIPTION_REQUEST_REJECTED, SUBSCRIPTION_REQUEST_FAILED</li> <li>added PENDING enum to ChangeRequest#requestStatus</li> <li>added Operation#s to enable updating not only properties of primitive types, e.g. int, string, but also embedded objects, e.g. Shipment#totalGrossWeight in LogisticsObjects <li>added Notification#triggeringChangeRequest</li> <li>added SubscriptionRequest. Subscription is the response for the scenario where publisher initiates the Subscription and asks the subscribers for their Subscription information. SubscriptionRequest is used for scenario where the subscriber initiates a SubscriptionRequest towards the Publisher.</li> <li>added Subscription#topicType to indicate if topic is a LogisticsObject type or a specific LogisticsObjectIdentifier</li> <li>added ServerInformation#supportedApiVersion</li> <li>added ActionRequest as superclass for SubscriptionRequest, ChangeRequest, and DelegationRequest</li> <li>added providesNotificationsEndpoint (xsd:boolean) to ServerInformation</li> <li>added AccessDelegation and Change for ActionRequests</li> <li>import cargo ontology with <code>owl:imports cargo</code></li> <li>changed min/max cardinalities to exact cardinalities (<code>qualifiedCardinality</code>)</li> <li>introduced Named Individuals to represent ENUMs</li> <li>added Notification#hasLogisticsObjectType</li> <li>added Subscription#includeSubscriptionEventType </li> <li>added enumeration SubscriptionEventType</li> <li>added Collection class </li>"},{"location":"API-Security/community/","title":"Community","text":""},{"location":"API-Security/community/#contribute","title":"Contribute","text":"<p>See Contributing for more details on how to contribute to ONE Record API specification.</p>"},{"location":"API-Security/community/#issues","title":"Issues","text":"<p>Issues on the ONE Record API specification are tracked in GitHub:</p> <ul> <li>View open issues</li> <li>Create a new issue</li> </ul>"},{"location":"API-Security/community/#maintainers","title":"Maintainers","text":"<p>A maintainer is a person who is responsible for the ongoing development of the ONE Record API specification and has commit access to the ONE Record main repository.</p> <ul> <li>Henk Mulder, IATA</li> <li>Daniel A. D\u00f6ppner, Lufthansa Cargo</li> <li>Davide Alocci, IATA</li> </ul>"},{"location":"API-Security/community/#contributors","title":"Contributors","text":"<p>A contributor can be anyone who actively contributes changes in order to improve the ONE Record API specification.</p> <ul> <li>Andra Blaj</li> <li>Dominik Kunz, ISO-Gruppe</li> <li>Martin Skopp, Riege Software</li> <li>Philipp Billion, Lufthansa Cargo</li> <li>Thomas Moreau, GEODIS</li> </ul> <p>(sorted alphabetically)</p>"},{"location":"API-Security/concepts/","title":"Concepts","text":""},{"location":"API-Security/concepts/#one-record-api","title":"ONE Record API","text":"<p>The ONE Record API specifies the interface and interactions via standardized Web Application Programming Interface (API), which allows all participants in the network to connect their IT systems to the IT systems of their partners, using state of the art web technologies. To achieve this, the ONE Record API specifies how data exchange between logistics and transport stakeholders can be achieved over HTTP. The ONE Record API specification is associated with the ONE Record Data Model that specifies the models and relationships within the transport and logistics data domain as common \"language\" between all stakeholders.</p>"},{"location":"API-Security/concepts/#one-record-data-model","title":"ONE Record Data Model","text":"<p>The ONE Record data model is specified as an ontology which is also referred to as a semantic model. The ONE Record standard consists of two ontologies: the <code>ONE Record cargo ontology</code> and the <code>ONE Record API ontology</code></p> <p>The <code>ONE Record cargo ontology</code> contains industry concepts, their properties, and their relationships between them. This ontology can be used by analysts, developers, and users to understand the data classes in ONE Record and their relationship to each other.</p> <p>The <code>ONE Record API ontology</code> contains the data classes and their relationship used for the ONE Record Web API.</p> <p>Both ontologies are maintained on GitHub.  Furthermore, an online documentation based on the ontology can be found in the Tools section on the ONE Record Developer Portal.</p>"},{"location":"API-Security/concepts/#one-record-node","title":"ONE Record Node","text":"<p>Each participant is technically represented as an ONE Record node.  Such node can have capabilities of a ONE Record server and/or a ONE Record client.</p> <p>Typically, a ONE Record node represents a single organization.  However, there might exist scenarios where an ONE Record node is shared between (sub-)organizations.</p> <p>A single organization can also operate multiple ONE Record nodes, such as IoT devices that implement ONE Record clients to transmit data to ONE Record servers using the ONE Record standard.</p>"},{"location":"API-Security/concepts/#one-record-server","title":"ONE Record Server","text":"<p>A ONE Record server - also called a <code>ONE Record REST API implementation</code> - is a web server that provides some or all of the specified ONE Record REST API endpoints and some or all of the data model specifications. Technically, it could be just a simple HTTP web server or existing Web API. Therefore, the ONE Record API and data model specifications may be added to existing (server) software implementations that also provide other web services.</p> <p>In this document, the term ONE Record server is used when referring to an actual software implementation of the ONE Record REST API specification that responds to HTTP requests from a ONE Record client.</p>"},{"location":"API-Security/concepts/#one-record-client","title":"ONE Record Client","text":"<p>A ONE Record client is a technical representation of a stakeholder using ONE Record to exchange data in the network.  Unlike a ONE Record server that responses to API requests, a ONE Record Client initiates interaction with a ONE Record server. </p> <p>Each ONE Record server can also include a ONE Record client implementation in order to interact with other ONE Record server, i.e. by sending HTTP requests.</p> <p>However, not every ONE Record client MUST contain a ONE Record server implementation.  Nevertheless, it is useful for pub-sub interactions, for example.</p> <p>In this document, the term ONE Record client is used when referring to an software program that sends HTTP requests to a ONE Record server.</p>"},{"location":"API-Security/concepts/#base-url","title":"Base URL","text":"<p>The term <code>Base URL</code> stands for \"Base Uniform Resource Locator\" in the context of web development and URLs (Uniform Resource Locators). A URL is a web address that specifies the location of a resource, such as a webpage or a file, on the internet. The base URL serves as a foundation or starting point for constructing complete URLs within a particular context.</p> <p>In simpler terms, the base URL provides the common part of a URL that remains consistent for a set of related web pages or resources. This can be especially useful when you're working on a website with multiple pages or dealing with resources organized in a specific directory structure.</p> <p>For instance, consider the ONE Record scenario where you have multiple endpoints, such as \"logistics-objects\" \"action-requests\" and \"notifications.\" The base URL in this case might be:</p> <pre><code>https://1r.example.com\n</code></pre> <p>Then, you can append specific paths to the base URL to access different ONE Record endpoints:</p> <ul> <li>Logistics Objects: <code>https://1r.example.com/logistics-objects</code></li> <li>Action Requests: <code>https://1r.example.com/action-requests</code></li> <li>Contact page: <code>https://1r.example.com/notifications</code></li> </ul> <p>Here, the base URL <code>https://1r.example.com/</code> remains constant for all the pages, and you simply extend it with the unique paths for each API. In every endpoint, the idea of a <code>Base URL</code> will be denoted as <code>{{baseURL}}</code>.</p>"},{"location":"API-Security/concepts/#logistics-objects","title":"Logistics Objects","text":"<p>The ONE Record cargo ontology is organized as a set of data classes that represent real world concepts in transport and logistics, also referred to as digital twins. These generic data classes are referred to as <code>Logistics Objects</code> in the world of ONE Record. Each digital twin is an instance of a data classes that inherits from the Logistics Object data class. The data exchange that is facilitated by the ONE Record API is mainly the exchange of Logistics Objects. This is transition from the traditional logistics and transport EDI systems that only exchanged messages and documents. The concept of Logistics Objects is far more extensive since Logistics Objects can be more granular and have very specific usage in different use cases within the logistics and transport domain. Examples of a Logistics Object are a Piece, an IotDevice, a Sensor or a BookingOptionRequest and many more.</p>"},{"location":"API-Security/concepts/#holder-of-a-logistics-object","title":"Holder of a Logistics Object","text":"<p>The holder of a Logistics Object is the one who created it and thus has control over it. The holder may also control the ONE Record server on which the Logistics Object is accessible via HTTP requests, but this is not a requirement. Instead, the holder may use a 3rd party IT solution provider that implements, operates, and provisions the ONE Record API and will provide suitable access to the holder to manage and control the Logistics Objects, including its creation, any changes, authorization and access rights, etc.</p> <p>In a publisher-subscriber scenario, the holder of a Logistics Object is also referred to as <code>Publisher</code>. In an access delegation scenario, the holder of a Logistics Object is also referred to as the <code>Delegator</code>.</p> <p>Note</p> <p>In this ONE Record API specification document, the term <code>holder</code> describes a technical holder of a logistics object data object. The <code>holder</code> of a Logistics Object might be even the owner of the data. The term <code>holder</code> does not include legal topics such as data governance, ownership, data stewardship or data custodian.</p>"},{"location":"API-Security/concepts/#user-of-a-logistics-object","title":"User of a Logistics Object","text":"<p>A user of a Logistics Object is anyone other than the holder and who has an interest in the Logistics Object. Most likely the user will have a role in the logistics and transport of a shipment. The user of a Logistics Objet MAY be from another organization than the holder or from the same organization but with a different function within that organization.</p> <p>In a publisher-subscriber scenario, the user of a Logistics Object is also referred to as <code>Requestor</code> or <code>Subscriber</code>. In an access delegation scenario, the user of a Logistics Object is also referred to as the <code>Requestor</code> or <code>Delegate</code>. In a PATCH scenario, the user of a Logistics Object is also referred to as the <code>Requestor</code>.</p>"},{"location":"API-Security/concepts/#logistics-object-uri","title":"Logistics Object URI","text":"<p>Every Logistics Object MUST have a globally unique identifier, a so-called Uniform Resource Identifier (URI). This Logistics Object URI MUST NOT be changed as it is the permanent identifier of a specific Logistics Object.</p> <p>The actual generation of Logistics Object URIs and thus the design of a unique URI structure is left to each ONE Record API implementer as long as it complies with the valid Logistics Object URI. A valid Logistics Object URI MUST follow RFC 3986 and MUST look like:</p> <pre><code>{scheme}://{host}[:port]/[basePath]/logistics-objects/{logisticsObjectId}\n</code></pre> <p>The URI components are described below:</p> URI Component Description Examples scheme Transfer protocol used by the API <ul><li>http</li><li>https</li></ul> host Host name, domain name or IP address (and port) of the host that serves the ONE Record API <ul><li>127.0.0.1:8080</li><li>1r.example.com</li><li>api.airline.com</li></ul> basePath Optional URL prefix for all API paths, relative to the host root. The basePath is NOT mandatory. <ul><li>/tenants/</li><li>/api/</li><li>/onerecord/</li><li>/rest/public/</li></ul> logisticsObjectId An identifier for the Logistics Object that is unique for this ONE Record server (and thus globally). This logisticsObjectId to identify the Logistics Object may be meaningful or obscure. A meaningful logisticsObjectId might include a reference to the type of the Logistics Object itself. An obscure logisticsObjectId could be a UUID. <ul><li>e17502db-9b2d-46cc-a06c-efb24aeca49b</li><li>waybill-123-12345678</li></ul> <p>Examples of valid Logistics Object URIs:</p> <pre><code>https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\nhttps://api.airline.com/handling/onerecord/logistics-objects/waybill-123-12345678-1\nhttps://onerecordcloud.com/organizations/airline/logistics-objects/6596bb81-f5a0-46d0-81be-c4d39531fc6a\nhttps://api.airline.com/rest/public/onerecord/logistics-objects/6596bb81-f5a0-46d0-81be-c4d39531fc6a\n</code></pre>"},{"location":"API-Security/concepts/#organization-uri","title":"Organization URI","text":"<p>In ONE Record, each party in the ONE Record network, e.g., a shipper, airline, or public authorities like customs that acts as an holder or user of Logistics Objects, requires a globally unique identifier, a so-called <code>Organization URI</code>. This MUST have a URI that points to a data object that inherits from Organization which inherits from LogisticsObject. Therefore, the same URI structure as for Logistics Objects MUST be applied.</p> <p>This data object can be a Company, a Carrier, or a PublicAuthority. It MUST uniquely identifies an organization in its data exchanges with other organizations that use ONE Record. As shown below, this Organization URI MAY share the same structure as a Logistics Object URI:</p> <p>Examples of valid Organization URIs:</p> <pre><code>https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\nhttps://1r.example.com/onerecord/logistics-objects/24a8a9f0-92c1-4405-8dfb-71875e8cde0a\nhttps://1r.example.com/rest/public/onerecord/logistics-objects/24a8a9f0-92c1-4405-8dfb-71875e8cde0a\nhttps://1r.platform.com/organizations/airline/logistics-objects/airline\n</code></pre>"},{"location":"API-Security/concepts/#plug-play-connectivity","title":"Plug &amp; Play Connectivity","text":"<p>The implementation of ONE Record implies the implementation of Web APIs that comply with the ONE Record API and data model. Consequently, any compliant ONE Record client/server can connect and exchange data with any other ONE Record client/server by simply accessing each other's endpoints via URIs.</p>"},{"location":"API-Security/concepts/#linked-data","title":"Linked Data","text":"<p>A central approach of ONE Record is to enable the creation of a comprehensive network of data, i.e. data related to specific consignments and shipments are accessible as a unique and single shipment record, i.e. \"one record\" in that network of linked data. To achieve this, the ONE Record data model is based on a ONE Record cargo industry ontology using the Resource Description Framework (RDF) format.</p> <p>Used Namespace Prefixes in ONE Record Context</p> Prefix Namespace Description cargo https://onerecord.iata.org/ns/cargo This refers to the ONE Record cargo ontology. api https://onerecord.iata.org/ns/api This refers to the ONE Record API ontology. xsd http://www.w3.org/2001/XMLSchema W3C vocabulary, primarily used for primitive data types (e.g. string, dateTime) acl http://www.w3.org/ns/auth/acl Ontology for WebAccessControl with Access Control Lists (ACL) <p>JSON for Linking Data (JSON-LD)</p> <p>The ONE Record API specification defines <code>JSON for Linking Data (JSON-LD)</code> as the default RDF serialization. Other RDF serializations MAY also be used, because they are interchangeable, e.g. Terse RDF Triple Language (TTL).</p> <p>To fully understand the syntax of RDF and JSON-LD, a deep dive into RDF is required. For the purpose of this document, it is sufficient to understand the example below that represents a Logistics Object of type <code>Sensor</code></p> <p>RDF and JSON-LD have different forms to format data that are all equivalent. For example, JSON-LD defines different types of transformations that can be applied to structure the data output. Therefore, the same <code>Sensor</code> object can be formatted as extended (see example 1) - where the URIs of the properties are explicit - or formatted as compressed (see example 2).</p> <p>Example 1:</p> Sensor.expanded.json<pre><code>{\n  \"@type\": \"https://onerecord.iata.org/ns/cargo#Sensor\",\n  \"@id\": \"http://1r.example.com/logistics-objects/11ccfb7c-3643-41db-8098-740fccd97c93\",\n  \"https://onerecord.iata.org/ns/cargo#description\": \"A data logger with a temperature sensor.\",\n  \"https://onerecord.iata.org/ns/cargo#name\": \"TPx14-a\",\n  \"https://onerecord.iata.org/ns/cargo#serialNumber\": \"142NL\",\n  \"https://onerecord.iata.org/ns/cargo#sensorType\": {\n    \"@id\": \"https://onerecord.iata.org/ns/cargo#THERMOMETER\"\n  }\n}\n</code></pre> <p>(see Sensor.expanded.json)</p> <p>Example 2:</p> Sensor.compacted.json<pre><code>{\n  \"@context\": {\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n  },\n  \"@id\": \"http://1r.example.com/logistics-objects/11ccfb7c-3643-41db-8098-740fccd97c93\",\n  \"@type\": \"cargo:Sensor\",\n  \"cargo:description\": \"A data logger with a temperature sensor.\",\n  \"cargo:name\": \"TPx14-a\",\n  \"cargo:serialNumber\": \"142NL\",\n  \"cargo:sensorType\": {\n    \"@id\": \"https://onerecord.iata.org/ns/cargo#THERMOMETER\"\n  }\n}\n</code></pre> <p>(see Sensor.compacted.json)</p> <p>There are more forms that are equal to the example above. Copy and paste the first example on the JSON-LD Playground to see this different forms.</p> <p>A full specification of the JSON-LD 1.1 standard can be found here</p>"},{"location":"API-Security/glossary/","title":"Glossary","text":"Term Description ACL Access Control List (ACL) is a security mechanism used in computer systems to define permissions and restrictions on who can access specific resources or perform certain actions. It is a list of rules that specifies which users or groups are allowed or denied access to a resource, like a LogisticsObject. Authentication A process that validates the identity of a IoL participant Authorization A process that determines whether a IoL participant is allowed to access a specific Logistics Object Cargo Operations &amp; Technology Board (COTB) Cargo Operations &amp; Technology Board (COTB) reports to the Cargo Services Conference (CSC) at the International Air Transport Association. The COTB has authority over the ONE Record specifications. COTB decisions are formally endorsed by the CSC. Hashed Message Authentication Code (HMAC) An authentication method to verify data integrity and authenticity of a message. Identity &amp; Authentication Provider (IAP) A service that allows ONE Record netwokr participants register and obtain an Public Key encrypted token identify themselves with ONE Record Servers and get access to Logistics Objects JavaScript Object Notation for Linked Data (JSON-LD) JSON-LD is a lightweight Linked Data format. It is easy for humans to read and write. It is based on the already successful JSON format and provides a way to help JSON data interoperate at Web-scale. JSON-LD is an ideal data format for programming environments, REST Web services, and unstructured databases such as CouchDB and MongoDB. JSON Web Key (JWK) A JSON object that represents a set of public cryptographic keys. The properties of the object represent properties of the key, including its value. A JWK is used to verify JSON Web Tokens (JWT) issued by the Authorization Server. JSON Web Key Set (JWKS) A JSON object that contains a set of JWKs. The JSON object MUST have a keys property, which is an array of JWKs. JSON Web Token (JWT) JSON specification for a token format that includes a user defined payload and the option for encryption. Linked Data Linked Data empowers people that publish and use information on the Web. It is a way to create a network of standards-based, machine-readable data across Web sites. It allows an application to start at one piece of Linked Data and follow embedded links to other pieces of Linked Data that are hosted on different sites across the Web. Logistics Object A data object that represents a meaningful entity in the logistics business. These may represent documents like air waybills but may also be more granular such as company details or a transport segment description. Logistics Objects are specified in a common data model by IATA and transport and logistics partners. Open Authorization (OAuth) OAuth (Open Authorization) is an authorization framework that enables a user to grant a third-party application access to their resources on another API or service without giving them their credentials (delegation of access in a network of secure systems). It uses tokens to ensure secure and limited access to user data while protecting their privacy. see https://oauth.net/2/ OpenID Connect (OIDC) OpenID Connect (OIDC) is a widely used authentication protocol that adds an identity layer on top of OAuth 2.0, allowing applications to verify the identities of users and obtain their basic profile information with user consent, enhancing security and user experience in modern web applications. ONE Record Client A software program that sends ONE Record API requests to a ONE Record server. ONE Record Server A software program that responses to ONE Record API requests from a ONE Record client on behalf of one or more participants in the network ONE Record Notifications API A dedicated ONE Record API endpoint for receiving notifications about updates related to logistics objects. Participant Server that access or shares data and that has registered with an Accredited Identity Provider and has possession of a valid certificate to prove this Publisher The Party that makes their Logistics Objects available through a ONE Record Server Subscriber The Party that subscribes to Logistics Objects in order to receive updates automatically Uniform Resource Identifier (URI) A Uniform Resource Identifier (URI) is a URL that uniquely identifies a Logistics Object WAC Web Access Control"},{"location":"API-Security/implementation-guidelines/","title":"Implementation Guidelines","text":"<p>This section lists general principles and best practices for the implementation of a ONE Record API. The lists are inspired by other API principles (e.g. SBB, Zalando, adidas)</p> <p>This section provides guidelines that MUST be followed by an implementer of the ONE Record API to ensure maximum compatibility with other ONE Record servers and clients on the ONE Record network. These principles MUST be followed in order to be compliant to the ONE Record standard, when implementing and publishing a ONE Record server.</p> <p>This section provides also common knowledge and best practices for the implementation of REST APIs in general and the ONE Record API in particular. When implementing a ONE Record server and publishing a ONE Record API, it is RECOMMENDED to follow these best practices.</p>"},{"location":"API-Security/implementation-guidelines/#uri-structure","title":"URI Structure","text":"<p>REST APIs use Uniform Resource Identifiers (URIs) to reference resources. REST API should use URIs that convey the resource model of a REST API to API consumers. When resources are well named, an API is intuitive and easy to use. If they are poorly named, the same API can be difficult to use and understand.</p> <p>The following are some rules and guidelines that SHOULD be followed:</p> <ul> <li>URIs SHOULD include nouns, not verbs.</li> <li>Use plural nouns for consistency (no singular nouns)</li> <li>Use HTTP methods (HTTP/1.1) to operate on resources</li> <li>Use HTTP response codes to communicate the outcome of operations on resources</li> </ul> <p>For the context of ONE Record, this means:</p> <ul> <li>A Logistics Object URI SHOULD be URL friendly, i.e. avoid unsafe characters that include blank/empty spaces and/or \" &lt; &gt; # % { } | \\ ^ ~ [ ] `.</li> <li>It is RECOMMENDED to avoid characters that require URL encoding.</li> <li>For better compatibility, a kebab-case URL naming convention SHOULD be used for the URI components , i.e. only use lower case letters, numbers, forward slashes, and dashes. For example, use https://1r.example.com/logistics-object/waybill-020-12345678 instead of https://1r.example.com/logistics-object/Waybill_020-12345678</li> </ul>"},{"location":"API-Security/implementation-guidelines/#serialization-and-data-formats","title":"Serialization and Data Formats","text":"<p>JSON-LD Document Forms</p> <p>Every ONE Record server (and every compliant ONE Record client) MUST support at least the expanded document form, the compacted document form, and the flattened document form (see https://w3c.github.io/json-ld-api/)</p> <p>Furthermore, the following requirements MUST be fulfilled:</p> <ul> <li>Every JSON-LD document that is returned from a ONE Record API MUST include <code>@id</code> property</li> <li>A JSON-LD document MAY include an <code>@context</code> that contains namespaces, vocabularies and more that facilitate the remainder of the data elements. In this context, there is a specification of two ontologies: the ONE Record cargo ontology (<code>cargo</code>) and the ONE Record API ontology (<code>api</code>).</li> <li>A JSON-LD document MUST include an <code>@type</code> property that specifies the type of the data object, i.e. the ONE Record Logistics Object class (https://onerecord.iata.org/ns/cargo#Sensor in the previous example 1 and example 2).</li> <li>A JSON-LD document MUST include an <code>@language</code> property in the <code>@context</code> property that specifies the language of the returned data object, if the language differs from the default language <code>en-US</code>.</li> </ul> <p>During the implementation phase, it is highly recommended to utilize a JSON-LD library. Below is a compilation of libraries for the most commonly used programming languages:</p> <ul> <li>JavaScript: <ul> <li>https://rdf.js.org</li> <li>jsonld.js</li> </ul> </li> <li>Java <ul> <li>https://rdf4j.org</li> <li>https://jena.apache.org</li> </ul> </li> <li>Python <ul> <li>https://wiki.python.org/moin/RdfLibraries</li> </ul> </li> </ul> <p>Note</p> <p>The OpenAPI specification includes only schemas that can be used to generate the expanded JSON-LD document form. Nevertheless, every ONE Record server and ONE Record client MUST support at least all three JSON-LD document forms.</p> <p>Blank Nodes and Embedded Objects</p> <p>Blank node (bNode) is a concept used in the Resource Description Framework (RDF) data model.  They are used to represent resources that do not have a URI (Uniform Resource Identifier) associated with them. The resource represented by a bNode is also called an anonymous resource. </p> <p>In RDF, a triple consists of a subject, a predicate, and an object.  According to the RDF standard, a bNode can only be used as the subject or object of an RDF triple. When the object of a triple is a bNode, it means that the resource represented by the object has no URI, but still exists as a node in the RDF graph.</p> <p>bNodes are useful in creating RDF data that represents complex relationships between resources. bNodes are typically represented in RDF syntax with an identifier starting with an <code>_:</code> (underscore colon) followed by a unique identifier. For example: _:ded2e183. This allows to reference this bNode in several triples of the same RDF graph.</p> <p>In addition to logistics object types, the ONE Record data model ontology also specifies data classes that can be linked to logistics objects but do not have a publicly accessible URI (cf. Logistics Object URI).</p> <p>For the purpose of serialization, it MUST be ensured that those embedded objects also have a unique id that can be referenced in other requests. In this document, the ids of this embedded objects are called <code>embedded object ids</code> and can differ from Logistics Object URI. The structure of this embedded object id is up to the implementor of the ONE Record server. Nevertheless, it is RECOMMENDED to use the following structure for embedded object ids:</p> <p><code>internal:&lt;uuid5 using the data class name&gt;</code>, e.g. <code>internal:7fc81d1d-6c75-568b-9e47-48c947ed2a07</code> as a result of uuid5(\"8efaab7c-cfd5-11ed-9abe-325096b39f47\", \"value\")</p> <p>Note</p> <p>It MUST be ensured that these embedded object IDs, similar to logistics object URIs, MUST be unique within the domain of the ONE Record server and MUST NOT change during the lifecycle of an embedded object or its parent objects. Not even if the database is exported as an RDF graph and imported into another RDF store. Otherwise, references to these ids could be corrupted, e.g. in ChangeRequests in the AuditTrail of a logistics object.</p> <p>In the context of ONE Record, only logistics objects have public accessible URIs, while other objects, e.g., Value, do not have public accessible URIs but must be linked. Nevertheless, in ONE Record each node MUST have a unique <code>@id</code> within the document that does not change.  If stored in an RDF database/store, this <code>@id</code> MUST also have a global unique identifier within a graph. Therefore, in ONE Record, a ONE Record server MUST convert bNodes to named resources with proper URIs (i.e. embedded object ids) if those blank nodes represent entities that have a stable identity and are likely to be references in other datasets, applications, or documents.</p> <pre><code>{\n  \"@context\": {\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n  },\n  \"@type\": \"cargo:Piece\",\n  \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n  \"cargo:grossWeight\": {\n    \"@type\": \"cargo:Value\",\n    \"@id\": \"internal:7fc81d1d-6c75-568b-9e47-48c947ed2a07\",\n    \"cargo:value\": \"20.0\",\n    \"cargo:unit\": \"KGM\"\n  }\n}\n</code></pre> <p>Explanations:</p> <ul> <li>https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c is the @id of the parent Logistics Object of type Piece</li> <li><code>internal::7fc81d1d-6c75-568b-9e47-48c947ed2a07</code> is the <code>@id</code> of the embedded object of type Value which can only exist along the parent Logistics Object</li> </ul> <p>This is particularly relevant for the updating of Logistics Objects when changes to the logistics object affect embedded objects and MUST be identifier during processing using their embedded object id. Thus, unlike bNodes in RDF syntaxes,embedded objet ids MUST NOT be recreated each time the document is serialized.</p> <p>Content Encoding</p> <p>For maximum compatibility, every request body that is returned from a ONE Record server as well as the HTTP request and response bodies MUST use <code>UTF-8 encoding</code> and MUST consist of valid Unicode strings, i.e. MUST NOT contain non-characters or surrogates.</p> <p>It is RECOMMENDED to implement content compression for the ONE Record API, because it improves the data transfer speed and bandwidth utilization. A list of supported content compressions MUST be provided to ONE Record clients via the Server Information endpoint.</p> <p>Date and Time</p> <p>Date and time formats MUST follow RFC 3339.</p> Type Description Example date Dates used in JSON-LD MUST follow YYYY-MM-DD. Dates used in HTTP query parameters MUST follow: YYYYMMDD 2023-03-01 datetime Always UTC 2023-03-031T10:38:01.000Z <p>Time durations and intervals MUST be conform to ISO 8601. However, whenever possible, explicit expiry dates SHOULD be used in favor of durations and intervals.</p> <p>Airline, Airport, Country, Currency, Language Codes</p> <p>The following standards MUST be used:</p> Type Description Example Airline IATA Two Letter Codes LH Airport IATA Three Letter Codes FRA Country Two letter country codes. Follow ISO 3166 alpha-2 CH Currency Follow ISO 4217 EUR Language Follow IETF BCP 47 language tag en-US <p>Collections</p> <p>Since there MAY be a semantic difference between an empty collection and the absence of a collection property, this difference MUST also be explicitly apparent in the response body. For example, handlingInstructions = [] (explicit empty list) differs from an unset handlingInstructions property.</p> <p>Null values</p> <p>To safe bandwidth, null valued properties SHOULD not be part of the JSON-LD bodies.</p>"},{"location":"API-Security/implementation-guidelines/#versioning","title":"Versioning","text":""},{"location":"API-Security/implementation-guidelines/#api-versioning","title":"API Versioning","text":"<p>API versioning is an important part of any API design, as it addresses the key challenge of maintaining APIs while dealing with changes over time.  Furthermore, it supports the communication between a client and a server by knowing which API version is supported and has to be used for interaction.  It is reasonable to assume that in practice an API will never be feature complete and it is accordingly important to manage these changes.  This is also true for the ONE Record API. </p> <p>Proper API versioning ensures that the ONE Record API specification can evolve without affecting existing applications that implement older ONE Record API versions.</p> <p>Some possible changes to the ONE Record API specification COULD be:</p> <ul> <li>Request/Response bodies changes due to the constant review of the ONE Record API specifications</li> <li>ONE Record ontology changes, which reflect on the request/response bodies</li> <li>Addition of new API endpoint</li> <li>Removal of an existing API endpoint</li> </ul> <p>Because the URI of a Logistics Object MUST NOT be changed (cf. Logistics Object URI),  an API versioning via URI Path is not possible, e.g.  http://1r.example.com/v1/logistics-objects/e17502db-9b2d-46cc-a06c-efb24aeca49b</p> <p>Instead, API versioning through content negotiation SHOULD be used.  More precisely, the <code>Accept</code> HTTP request header SHOULD be used by a ONE Record client to communicate the expected API version,  so that a ONE Record server can select one of the proposals:</p> <pre><code>Accept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>The ONE Record server MUST inform the ONE Record client about the selected version using the <code>Content-Type</code> response header: <pre><code>Content-Type: application/ld+json; version=2.0.0-dev\n</code></pre></p> <p>If no version is specified in the <code>Accept</code> request header by the ONE Record client, the ONE Record server SHOULD use the highest supported API version (see supportedApiVersion in ServerInformation).</p> <p>Every ONE Record server MUST provide information about the supported API versions. (see Get Server Information)</p>"},{"location":"API-Security/implementation-guidelines/#data-model-versioning","title":"Data Model Versioning","text":"<p>With the introduction of ONE Record to the industry and subsequent adoption and dissemination,  it is likely that the ONE Record data model will be modified, refined, and expanded over time. To support this evolution of the ONE Record data model, appropriate data model versioning is required.</p> <p>Some examples for possible changes to the ONE Record data models (ontology):</p> <ul> <li>Addition/Removal of classes and/or properties</li> <li>Updates of cardinality or data types</li> <li>Updates of comments or labels</li> </ul> <p>The ONE Record Server MUST be independent of the version of the data model and MUST NOT require versioning.  This means that serialization, e.g. using the JSON-LD format, MUST NOT use versioned IRIs, e.g. https://onerecord.iata.org/ns/cargo#Piece for the property \"@type\" and https://onerecord.iata.org./ns/cargo#hasGrossWeight for the property name. The ONE Record Server MUST use the latest cargo Ontology provided by IATA for data validation. Any data class and property defined in the latest Cargo Ontology is valid. If a ONE Record client submits a request with a request body containing invalid data according to the ontology, the ONE Record server MUST return a <code>400 Bad Request</code> HTTP error. For example, if a ONE Record client requests a LogisticsObject created with an ontology that contains IRIs that are not part of the current ontology, the ONE Record server MUST ignore the data classes and properties for serialization.</p> <p>Every ONE Record server MUST provide information about the supported data model / ontologies using hasSupportedOntology (see Get Server Information). This hasSupportedOntology property MUST be a list of non-versioned IRIs, e.g. https://onerecord.iata.org/ns/cargo</p> <p>Because it might be possible that a ONE Record server caches a copy of the ontologies and is not up-to-date, every ONE Record server MUST provide information about the latest supported data model / ontologies using hasSupportedOntologyVersion (see Get Server Information). This hasSupportedOntologyVersion property MUST be a list of versioned ontology IRIs which MUST includes the version of the data model, e.g. https://onerecord.iata.org/ns/cargo/3.0.0</p> <p>This supports debugging because the ONE Record client knows if there is a difference in the data model version.</p>"},{"location":"API-Security/implementation-guidelines/#data-versioning","title":"Data Versioning","text":"<p>Whenever a change request is accepted, the data within a Logistic Object undergoes alterations. Nevertheless, clients might require access to the content of a Logistic Object at a precise moment in time. To address this need, ONE Record servers must incorporate a data versioning system.</p> <p>More information about data versioning can be found in the section Historical Logistics Object</p>"},{"location":"API-Security/implementation-guidelines/#validation","title":"Validation","text":"<p>ONE Record server must implement two type of validations:</p> <ul> <li>API validation : the payload and the headers must respect the API specification issues by IATA.</li> <li>Model validation : during the creation of a new object, the data provided within the request body should be complaint with the ONE Record cargo ontology.</li> </ul> <p>If an API request is malformed, the ONE Record server is expected to respond with an error. IATA strongly recommends validating each object against the ONE Record cargo ontology before creating it. This validation helps prevent the creation of malformed objects that could potentially hinder interoperability across the ONE Record server network. However, ONE Record servers have the option to accept additional properties for each object.</p>"},{"location":"API-Security/implementation-guidelines/#error-handling","title":"Error Handling","text":"<p>When a ONE Record client interacts with a ONE Record server, the ONE record server MUST inform the ONE Record client if the interaction was successful or not. With this information, the ONE Record client can proceed accordingly.</p> <p>The ONE Record API specifies two classes of errors, namely: (1) as a direct response to a synchronous request, or (2) as an asynchronous response submitted after a submitted request has been processed.</p> <p>This section describes the general Error data type definition used for error handling within the ONE Record API, and examples for both types of errors.</p> <p>Error data model</p> <p>Class diagram:</p> <pre><code>classDiagram   \n    direction LR   \n\n   class Error{        \n        + hasErrorDetail[]: ErrorDetail [1..*]\n        + hasTitle: xsd:string\n    }\n    Error \"1\" --&gt; \"*\" ErrorDetail\n\n    class ErrorDetail{\n        + hasCode: xsd:string  [0..1] [0..1]\n        + hasMessage: xsd:string [0..1]\n        + hasProperty: xsd:anyURI [0..1]\n        + hasResource: xsd:anyURI [0..1]\n    }</code></pre> <p>The Error object has the following properties:</p> Property Description Required Class hasTitle a short summary of the problem. A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization. yes w3c:String hasErrorDetail details of the error no api:ErrorDetail - hasCode a ONE Record application-specific error code expressed as a string value. no w3c:String - hasMessage Explanation specific to this problem no w3c:String - hasProperty data element to which the error applies no w3c:String - hasResource URI of the object concerned no w3c:String <p>ErrorDetail SHOULD contain a human-readable error message that is expected to be read and understood by users. (see below examples) For example, set the property hasMessage to <code>\"Authenticated client could not be found in ACL for the Logistics Object\"</code> instead of just <code>\"Error\"</code>.</p>"},{"location":"API-Security/implementation-guidelines/#synchronous-error-handling","title":"Synchronous Error Handling","text":"<p>For interaction with ONE Record endpoints, the ONE Record API specification defines a an error handling as a direct response to a failed synchronous request. In this scenario, the property hasCode MUST be same as the HTTP status code (see below).</p> <p>Error HTTP Status Codes</p> <p>The following table contains a non-exhaustive list of HTTP error statuses that require an Error response:</p> Code Description Response body 400 \u00a0Bad request Error 401 \u00a0Not authenticated or expired token Error 403 \u00a0Not authorized to perform action Error 404 \u00a0Not Found Error 405 \u00a0Method not allowed Error 415 \u00a0Unsupported content type Error 500 \u00a0Internal Server Error Error <p>There is a list of non-exhaustive JSON-LD syntax error types (relative to 400 Bad Request error family) on the official JSON-LD API specifications website.</p> <p>Example</p> <p>A ONE Record client requests a Logistics Object without having sufficient access and a ONE Record server responses with a HTTP error code: <code>403 Forbidden</code>. The http response body contains the Error including the error code.</p> <p>Response to a failed synchronous API GET Request:</p> <p><pre><code>HTTP/1.1 403 Forbidden\nContent-Language: en-US\nContent-Type: application/ld+json\n\n{\n   \"@context\": {\n      \"api\": \"https://onerecord.iata.org/ns/api#\",\n      \"@language\": \"en-US\"\n   },\n   \"@type\": \"api:Error\",\n   \"@id\": \"_:b0\",\n   \"api:hasTitle\": \"Not authorized to retrieve the Logistics Object\",\n   \"api:hasErrorDetail\": [{\n      \"@type\": \"api:ErrorDetail\",\n      \"@id\": \"_:b1\",\n      \"api:hasCode\": \"403\",\n      \"api:hasMessage\": \"Authenticated client could not be found in ACL for the Logistics Object\",\n      \"api:hasResource\": \"http://1r.example.com/logistics-objects/11ccfb7c-3643-41db-8098-740fccd97c93\"\n   }]\n}\n</code></pre> (Error_403.json)</p>"},{"location":"API-Security/implementation-guidelines/#asynchronous-error-handling","title":"Asynchronous Error Handling","text":"<p>ONE Record utilizes a standardized action request pattern to facilitate one organization requesting an action that requires approval from another organization. This process often involves asynchronous error handling to manage potential issues that arise during the approval and execution of the action requests.</p> <p>When approving action requests, the responsible entity must evaluate security and business logic, which may lead to errors. If such errors occur, the entity should mark the action request as failed and provide a detailed description of the error in the relevant section of the action request. In the error definition, the entity can utilize Cargo-XML error codes.</p> <p>Example</p> <p>A ONE Record client submits a ChangeRequest referencing an outdated version of a Logistics Object. Upon processing the ChangeRequest, the ONE Record server identifies the error, logs it in the ChangeRequest, and marks it as failed. The server then sends a notification of the error to the ONE Record client.</p> <p>Because asynchronous errors are always part of another data object, below is an example of a ChangeRequest that contains errors. Note that the errors property is a list and there can be multiple errors.</p> <p><pre><code>{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\",\n        \"@language\": \"en-US\"\n    },\n    \"@type\": \"api:ChangeRequest\",\n    \"@id\": \"https://1r.example.com/action-requests/f74ae62b-0af3-52ca-8a83-fa756fc3fab9\",\n    \"api#hasError\": [{\n        \"@type\": \"api:Error\",\n        \"@id\": \"https://1r.example.com/action-requests/f74ae62b-0af3-52ca-8a83-fa756fc3fab9/errors/0da27144-fa78-5201-be5f-0f9ab3d3b3d8\",\n        \"api:hasTitle\": \"Conflict with Logistics Object revision number\",\n        \"api:hasErrorDetail\": [{\n            \"@type\": \"api:ErrorDetail\",\n            \"@id\": \"_:b1\",            \n            \"api:hasCode\": \"409\",\n            \"api:hasMessage\": \"The provided revision number is invalid or lower than the current Logistics Object revision\",\n            \"api:hasResource\": \"http://1r.example.com/logistics-objects/11ccfb7c-3643-41db-8098-740fccd97c93\"\n        }]\n    }]\n}\n</code></pre> (The properties of the actual ChangeRequest are omitted for clarity. See here for complete examples.)</p>"},{"location":"API-Security/implementation-guidelines/#business-data-error-handling","title":"Business Data Error handling","text":"<p>The previous two sections explain how to handle errors in synchronous and asynchronous processes. However, when obtaining a logistics object, a third party might discover an issue with the provided information.</p> <p>For such situations, ONE Record specifies two specific action requests to signal the error: Change Request and Verification Request.</p> <p>If a third party identifies a discrepancy between a value in the logistics object and the actual measure (e.g., the weight of a shipment), they can create a Change Request to provide the correct value. The holder of the object can then accept or reject the change.</p> <p>On the other hand, if the third party detects an issue in a logistics object, such as a typo in a code or missing information, they can use the Verification Request to notify the holder of the logistics object. With a Verification Request, the third party is not required to propose a new value but simply to signal the issue.</p>"},{"location":"API-Security/implementation-guidelines/#internationalization-i18n","title":"Internationalization (i18n)","text":"<p>Internationalization (abbreviated i18n) enables ONE Record clients and ONE Record servers to request and return data in a given language.</p> <p>This i18n support is helpful exchanging of data using different languages. For example, if a shipper provides information only in Chinese characters, an English-speaking organization may not be able to use this information without preprocessing. Therefore, it is necessary to specify the language in which the data will be transmitted and SHOULD be returned.</p> <p>Every ONE Record server MUST provided the supported languages in the ServerInformation using the hasSupportedLanguages property.</p> <p>To ensure global interoperability, each ONE Record server MUST implement American English as a supported language (i.e. en-US). The request HTTP header <code>Accept-Language</code> SHOULD be used by the ONE Record client to specify the language of the response.</p> <p>In order to retrieve data in a desired language, the following HTTP header parameter MUST be present in the request:</p> Request Header Description Examples Accept-Language Standard language tag. If no language is set, the ONE Record server MUST assume that the default language is requested, i.e. American English (en-US). See https://datatracker.ietf.org/doc/html/rfc5646 <ul><li>en-US</li><li>de-DE</li><li>zh-HK</li></ul> <p>The following HTTP headers parameters MUST be present for every response:</p> Response Header Description Example Content-Language Describes the language(s) for which the requested resource is intended. en-US <p>Furthermore, in JSON-LD, the language can be set in the context using the <code>@language</code> key whose value must be a string representing a BCP47 region language tag.</p> <p>Example of a translated error</p> <p>Request:</p> <pre><code>GET /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nAccept-Language: de-DE\nAccept: application/ld+json\n</code></pre> <p>Response:</p> <p><pre><code>HTTP/1.1 404 Not Found\nContent-Language: de-DE\nContent-Type: application/ld+json\n\n{   \n   \"@context\": {\n     \"api\": \"https://onerecord.iata.org/ns/api#\",\n     \"@language\":\"de-DE\"\n   },\n   \"@type\":\"api:Error\",\n   \"@id\": \"_:b0\",\n   \"api:hasTitle\":\"Logistics Object nicht gefunden\",\n   \"api:hasErrorDetail\":[\n      {\n         \"@type\":\"api:ErrorDetail\",        \n         \"@id\": \"_:b1\", \n         \"api:hasCode\":\"404\",\n         \"api:hasMessage\":\"Es konnte kein Logistics Object mit der angegebenen URI in der Datenbank gefunden werden.\",\n         \"api:hasResource\":\"https://1r.example.com/1a8ded38-1804-467c-a369-81a411416b7c\"\n      }\n   ]\n}\n</code></pre> (Error_404.de-DE.json)</p>"},{"location":"API-Security/implementation-guidelines/#caching","title":"Caching","text":"<p>Caching MAY be useful to inform a ONE Record client that a response can be cached locally and does not need to be requested again before a Time to Live (TTL) expires. <code>Subscription</code> information are an example.</p> <p>It is RECOMMENDED to provide caching information via response HTTP header Cache-Control. For example, setting the <code>\"Cache-Control: max-age=86400\"</code> header in a HTTP response to indicate that the requested resource has a time to live of 86400 seconds (= 24 hours).</p> <p>Decisions about architecture, technology as well as its implementation are up to the implementor of the ONE Record server.</p>"},{"location":"API-Security/implementation-guidelines/#monitoring","title":"Monitoring","text":"<p>In general, API monitoring helps to detect failures and performance issues with API calls and gain insights into API usage. In particular, it MAY also help identify ONE Record clients that interact with functions and data model components that are marked as deprecated.</p> <p>Decisions about architecture, technology as well as its implementation are up to the implementor of the ONE Record server.</p>"},{"location":"API-Security/implementation-guidelines/#api-documentation","title":"API Documentation","text":"<p>It is RECOMMENDED to provide a technical documentation of the implemented and released API endpoints. One way is to publish an OpenAPI specification and grant partners access to it. See ONE-Record-API-OpenAPI.yaml as an example.</p>"},{"location":"API-Security/implementation-guidelines/#security","title":"Security","text":"<p>The ONE Record API specification prescribes only the minimum security requirements that enable secure communication in the IONE Record network.  This involves securing the communication channel, authentication (verifying the identity of a requestor) and authorization (checking the access right of the requestor).  More information on authentication and authorization in the ONE Record context is described in the Security section.</p> <p>Although ONE Record is intended for use in a secured environment only, this cannot be guaranteed. Therefore, it is RECOMMENDED to follow best practices for Web API security. For example, topics include rate limiting/throttling, web application firewalls (WAF), security scanning, data exposure in HTTP headers, logging, etc.</p>"},{"location":"API-Security/implementation-guidelines/#asynchronous-job-processing","title":"Asynchronous Job Processing","text":"<p>To enable scalability of the ONE Record server, it is RECOMMENDED to use job queue systems to process asynchronous workloads that result from incoming ChangeRequests, DelegationRequests, or SubscriptionRequests. For example, it can be useful to decouple Notification queuing and actual sending of Notifications.</p> <p>Decisions about architecture, technology as well as its implementation are up to the implementor of the ONE Record server.</p>"},{"location":"API-Security/license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 IATA-Cargo</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"API-Security/logistics-events/","title":"Logistics Events","text":"<p>Logistics events are events related to the management and execution of transport and logistics services and document the occurrence of actions, discrepancies, or status changes. These events can be either internal or external to an organization and can include transportation, warehousing, inventory management, supply chain optimization, and other related activities. Examples of logistics events include the departure of an aircraft or the acceptance of shipments in a warehouse.</p> <p>Guidelines for Logistics Events in ONE Record:</p> <ul> <li>Logistics Events are immutable. They MUST NOT be changed after creation.</li> <li>List of logistics Events attached to Logistics Objects are event stores. This event store is an append-only log. Events CAN be added by using the HTTP POST method (see Create a Logistics Event) but MUST NOT be changed or deleted.</li> <li>Logistics Events are neither logistics objects nor embedded object</li> <li>Every Logistics Events MUST an URI, that follows the following structure: <ul> <li>{{baseURL}}/logistics-object/{{logisticsObjectId}}/logistics-events/{{logisticsEventId}} where {{logisticsEventId}} is an identifier which can be globally unique and must be unique in the context of its parent Logistics Object</li> </ul> </li> <li>A Logistics Event MUST be linked to exactly one Logistics Object</li> <li>Every Logistics Event MUST have a property <code>eventDate (xsd:dateTime)</code></li> </ul>"},{"location":"API-Security/logistics-events/#logistics-events-uri","title":"Logistics Events URI","text":"<p>Each Logistics Event MUST have globally unique IRI and MUST have a unique identifier in the context of its parent Logistics Object. The implementor can use the same algorithm as the Logistics Object ids. For more information check the section Logistics Objects URI</p>"},{"location":"API-Security/logistics-events/#create-a-logistics-event","title":"Create a Logistics Event","text":"<p>Logistics Events (also known as status updates) in ONE Record can be added to any Logistics Objects  by sending a HTTP POST request containing a LogisticsEvent object to the <code>/logistics-events</code> endpoint of a LogisticsObject.</p> <p>As for all API interactions, the ONE Record client must be authenticated and have the access rights to perform this action.</p> <p>As Logistics Events MUST be associated with a specific Logistics Object, creating Logistics Events requires the existence of a Logistics Object. </p>"},{"location":"API-Security/logistics-events/#endpoint","title":"Endpoint","text":"<pre><code> POST {{baseURL}}/logistics-objects/{{logisticsObjectId}}/logistics-events\n</code></pre>"},{"location":"API-Security/logistics-events/#request","title":"Request","text":"<p>The following HTTP header parameters MUST be present in the request:</p> Request Header Description Examples Accept The content type that the ONE Record client wants the HTTP response to be formatted in. application/ld+json Content-Type The content type that is contained with the HTTP body. Valid content types. application/ld+json <p>The HTTP request body must contain a valid LogisticsEvent in the format as specified by the Content-Type in the header.</p> <p>The LogisticsEvent is a data class of the ONE Record cargo ontology. The properties and relationships to other data classes are visualized in the following class diagram.</p> <pre><code>classDiagram   \n    direction LR   \n\n    class LogisticsObject{                \n    }\n\n    class Actor{        \n    }  \n\n    class Organization{            \n    }  \n\n    class Location{        \n    }  \n\n    class ExternalReference{        \n    }  \n\n    class EventTimeType{   \n        &lt;&lt;Enumeration&gt;&gt;\n        ACTUAL\n        ESTIMATED\n        EXPECTED\n        PLANNED\n        REQUESTED   \n    }  \n\n    class LogisticsEvent{\n        + partialEventIndicator: xsd:boolean [0..1]\n        + creationDate: xsd:dateTime [0..1]\n        + eventCode: xsd:string [0..1]\n        + eventDate: xsd:dateTime [0..1]\n        + eventName: xsd:string [0..1]\n        + eventTimeType: EventTimeType [0..1]\n        + externalReferences: ExternalReference \n        + eventFor: LogisticsObject [0..1]\n        + eventLocation: Location [0..1]\n        + recordingOrganization: Organization [0..1]\n        + recordingActor: Actor [0..1]\n\n    }\n    LogisticsEvent \"1\" --&gt; \"0..*\" ExternalReference\n    LogisticsEvent \"1\" --&gt; \"0..1\" LogisticsObject\n    LogisticsEvent \"1\" --&gt; \"0..1\" Location\n    LogisticsEvent \"1\" --&gt; \"0..1\" Organization\n    LogisticsEvent \"1\" --&gt; \"0..1\" Actor\n    LogisticsEvent \"1\" --&gt; \"0..1\" EventTimeType</code></pre>"},{"location":"API-Security/logistics-events/#response","title":"Response","text":"<p>One of the following HTTP response codes MUST be present in the response:</p> Code Description Response body 201 Logistics Event has been created No content 400 Invalid Logistics Event Error 401 Not authenticated, invalid or expired token Error 403 Not authorized to perform action Error 404 Logistics Object not found Error 415 Unsupported Content Type Error 500 \u00a0Internal Server Error Error <p>A successful request MUST return a <code>HTTP/1.1 201 Created</code> status code and the following HTTP headers parameters MUST be present in the response:</p> <p>The following HTTP headers parameters MUST be present in the response:</p> Response Header Description Examples Location The URI of the newly created Logistics Event https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c/logistics-events/afb4b8cf-288a-459c-97fd-ccd538ec527f Type The type of the newly created Logistics Object as a URI https://onerecord.iata.org/ns/cargo#LogisticsEvent"},{"location":"API-Security/logistics-events/#security","title":"Security","text":"<p>To engage with the \"Create a Logistics Event\" endpoint, a client needs proper authentication and authorization to access the designated resource. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status. Conversely, for requests without proper authorization, a <code>403 \"Not Authorized\"</code> response should be provided.</p> <p>The implementor has the option to allow all authenticated users the capability to create a Logistics Event. This implies that there would be no access control enforced for this particular endpoint.</p>"},{"location":"API-Security/logistics-events/#example-a1","title":"Example A1","text":"<p>Request:</p> <pre><code>POST /logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c/logistics-events HTTP/1.1\nHost: 1r.example.com\n\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@type\": \"cargo:LogisticsEvent\",\n    \"cargo:creationDate\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-01T10:38:01.000Z\"\n    },\n    \"cargo:eventDate\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-01T10:38:01.000Z\"\n    },\n    \"cargo:eventCode\": {\n        \"@type\": \"cargo:CodeListElement\",\n        \"cargo:code\": \"DEP\",\n        \"cargo:codeListName\": \"Departure\"\n    },\n    \"cargo:eventName\": \"Consignment departed on a specific flight\",\n    \"cargo:eventTimeType\": {\n        \"@id\": \"cargo:ACTUAL\",\n        \"@type\": \"cargo:EventTimeType\"\n    },\n    \"cargo:partialEventIndicator\": false,\n    \"cargo:eventFor\": {\n        \"@type\": \"cargo:Shipment\",\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c\"\n    },\n    \"cargo:recordingOrganization\": {\n        \"@type\": \"cargo:Company\",\n        \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n    }\n}\n</code></pre> <p>(LogisticsEvent.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 201 Created\nLocation: https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c/logistics-events/afb4b8cf-288a-459c-97fd-ccd538ec527f\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/cargo#LogisticsEvent\n</code></pre>"},{"location":"API-Security/logistics-events/#example-a2","title":"Example A2","text":"<p>In the following example, a ONE Record client tries to submit a Logistics Event to a non existing Logistics Object.</p> <p>Request:</p> <pre><code>POST /logistics-objects/1a8ded38-1804-467c-c369-81a411416b7c/logistics-events HTTP/1.1\nHost: 1r.example.com\n\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@type\": \"cargo:LogisticsEvent\",\n    \"cargo:creationDate\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-01T10:38:01.000Z\"\n    },\n    \"cargo:eventDate\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-01T10:38:01.000Z\"\n    },\n    \"cargo:eventCode\": {\n        \"@type\": \"cargo:CodeListElement\",\n        \"cargo:code\": \"DEP\",\n        \"cargo:codeListName\": \"Departure\"\n    },\n    \"cargo:eventName\": \"Consignment departed on a specific flight\",\n    \"cargo:eventTimeType\": {\n        \"@id\": \"cargo:ACTUAL\",\n        \"@type\": \"cargo:EventTimeType\"\n    },\n    \"cargo:partialEventIndicator\": false,\n    \"cargo:eventFor\": {\n        \"@type\": \"cargo:Shipment\",\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c\"\n    },\n    \"cargo:recordingOrganization\": {\n        \"@type\": \"cargo:Company\",\n        \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n    }\n}\n</code></pre> <p>(LogisticsEvent.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 404 Not Found\nContent-Language: en-US\nContent-Type: application/ld+json; version=2.0.0-dev\n\n{\n   \"@context\": {\n      \"api\": \"https://onerecord.iata.org/ns/api#\",\n      \"@language\": \"en-US\"\n   },\n   \"@type\": \"api:Error\",\n   \"@id\": \"_:b0\",\n   \"api:hasTitle\": \"Logistics Object not found\",\n   \"api:hasErrorDetail\": [{\n      \"@type\": \"api:ErrorDetail\",\n      \"@id\": \"_:b1\",\n      \"api:hasCode\": \"404\",\n      \"api:hasMessage\": \"Logistics Object with the specified URI could not be found in the database.\",\n      \"api:hasResource\": \"http://1r.example.com/logistics-objects/1a8ded38-1804-467c-c369-81a411416b7c\"\n   }]\n}\n</code></pre> <p>(Error_404.json)</p>"},{"location":"API-Security/logistics-events/#get-a-logistics-event","title":"Get a Logistics Event","text":"<p>Each Logistics Event MUST be accessible via its Logistics Event URI using the HTTP GET method. This enables the Holder of the Logistics Object to manage access on the level of individual Logistics Event (see Access Control page for more information). If the requester is authorized to access this Logistics Event then the response body MUST include the requested Logistics Event.</p>"},{"location":"API-Security/logistics-events/#endpoint_1","title":"Endpoint","text":"<pre><code> GET {{baseURL}}/logistics-objects/{{logisticsObjectId}}/logistics-events/{{logisticsEventId}}\n</code></pre>"},{"location":"API-Security/logistics-events/#request_1","title":"Request","text":"<p>The following HTTP header MUST be present in the request:</p> Header Description Examples Accept The content type that a ONE Record client wants the HTTP response to be formatted in. This SHOULD include the version of the ONE Record API, otherwise the latest supported ONE Record API MAY be applied. <ul><li>application/ld+json</li><li>application/ld+json; version=2.0.0-dev</li><li>application/ld+json; version=1.2</li></ul>"},{"location":"API-Security/logistics-events/#response_1","title":"Response","text":"<p>A successful request MUST return a <code>HTTP/1.1 200 OK</code> status code.  The body of the response includes the Logistics Object in the RDF serialization format that has been requested in the <code>Accept</code> header of the request.</p> <p>The following HTTP headers parameters MUST be present in the response:</p> Header Description Example Content-Type The content type that is contained with the HTTP body. application/ld+json Content-Language Describes the language(s) for which the requested resource is intended. en-US Last-Modified Date and time when the Logistics Object was last time changed. See https://developer.mozilla.org/en-US/docs/Web/ Tue, 21 Feb 2023 07:28:00 GMT <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 200 The request to retrieve the Logistics Event has been successful Logistics Event 301 The URI of the Logistics Object has permanently changed. No response body 302 The URI of the Logistics Object has temporarily moved. No response body 401 Not authenticated Error 403 Not authorized to retrieve the Logistics Object Error 404 Logistics Object or Logistics Event not found Error 500 Internal Server Error Error"},{"location":"API-Security/logistics-events/#security_1","title":"Security","text":"<p>To engage with the \"Get a Logistics Event\" endpoint, a client needs proper authentication and authorization to access the designated resource. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status. Conversely, for requests without proper authorization, a <code>403 \"Not Authorized\"</code> response should be provided.</p> <p>It's crucial to emphasize that the authorization for logistics events can differ from that of the logistics objects they are associated with. A client might possess access to a logistics event while not having authorization for the corresponding logistics object.</p>"},{"location":"API-Security/logistics-events/#example-b1","title":"Example B1","text":"<p>Request:</p> <pre><code>GET /logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c/logistics-events/afb4b8cf-288a-459c-97fd-ccd538ec527f HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json\nContent-Language: en-US\nLocation: https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c/logistics-events/afb4b8cf-288a-459c-97fd-ccd538ec527f\nType: https://onerecord.iata.org/ns/cargo#LogisticsEvent\nLast-Modified: Tue, 19 Apr 2023 07:28:00 GMT\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c/logistics-events/afb4b8cf-288a-459c-97fd-ccd538ec527f\",\n    \"@type\": \"cargo:LogisticsEvent\",\n    \"cargo:creationDate\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-01T10:38:01.000Z\"\n    },\n    \"cargo:eventDate\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-01T10:38:01.000Z\"\n    },\n    \"cargo:eventCode\": {\n        \"@id\": \"interna:f7d53a28-4ca3-4367-8a81-3ac1672a7c8e\",\n        \"@type\": \"cargo:CodeListElement\",\n        \"cargo:code\": \"DEP\",\n        \"cargo:codeListName\": \"Departure\"\n    },\n    \"cargo:eventName\": \"Consignment departed on a specific flight\",\n    \"cargo:eventTimeType\": {\n        \"@id\": \"cargo:ACTUAL\",\n        \"@type\": \"cargo:EventTimeType\"\n    },\n    \"cargo:partialEventIndicator\": false,\n    \"cargo:eventFor\": {\n        \"@type\": \"cargo:Shipment\",\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c\"\n    },\n    \"cargo:recordingOrganization\": {\n        \"@type\": \"cargo:Company\",\n        \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n    }\n}\n</code></pre> <p>(LogisticsEvent_with_id.json)</p>"},{"location":"API-Security/logistics-events/#example-b2","title":"Example B2","text":"<p>In the following example, a ONE Record client tries to get a non-existing Logistics Event</p> <p>Request:</p> <pre><code>GET /logistics-objects/1a8ded38-1804-467c-c369-81a411416b7c/logistics-events/afb4b8cf-288a-459c-97fd-ccd538ec527f HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 404 Not Found\nContent-Language: en-US\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/api/2.0.0dev#Error\n\n{\n   \"@context\": {\n      \"api\": \"https://onerecord.iata.org/ns/api#\",\n      \"@language\": \"en-US\"\n   },\n   \"@type\": \"api:Error\",\n   \"@id\": \"_:b0\",\n   \"api:hasTitle\": \"Logistics Object not found\",\n   \"api:hasErrorDetail\": [{\n      \"@type\": \"api:ErrorDetail\",\n      \"@id\": \"_:b1\",\n      \"api:hasCode\": \"404\",\n      \"api:hasMessage\": \"Logistics Object with the specified URI could not be found in the database.\",\n      \"api:hasResource\": \"http://1r.example.com/logistics-objects/1a8ded38-1804-467c-c369-81a411416b7c\"\n   }]\n}\n</code></pre> <p>(Error_404.json)</p>"},{"location":"API-Security/logistics-events/#get-logistic-events-of-a-logistics-object","title":"Get Logistic Events of a Logistics Object","text":"<p>Logistics events that are linked to a logistics object CAN be retrieved by doing a HTTP GET request to the the <code>/logistics-events</code> endpoint of a logistics object. In addition, only a subset of all linked logistics events can optionally be retrieved by setting filter parameters.</p>"},{"location":"API-Security/logistics-events/#endpoint_2","title":"Endpoint","text":"<pre><code> GET {{baseURL}}/logistics-objects/{{logisticsObjectId}}/logistics-events/\n</code></pre>"},{"location":"API-Security/logistics-events/#request_2","title":"Request","text":"<p>The following HTTP header parameters MUST be present in the request:</p> Request Header Description Examples Accept The content type that the ONE Record client wants the HTTP response to be formatted in. application/ld+json Content-Type The content type that is contained with the HTTP body. Valid content types. application/ld+json <p>The following HTTP query parameters MUST be supported:</p> Query parameter Description Valid values eventType (optional) Optional parameter that can be used to filter the logistics events by event type, the values MUST be comma separated <ul><li>FOH</li><li>DEP</li></ul> created_after (optional) Optional parameter that can be used to filter the logistics events <ul><li>20190926T075830Z</li></ul> created_before (optional) Optional parameter that can be used to filter the the logistics events <ul><li>20190926T075830Z</li></ul> occurred_after (optional) Optional parameter that can be used to filter the the logistics events <ul><li>20190926T075830Z</li></ul> occurred_before (optional) Optional parameter that can be used to filter the the logistics events <ul><li>20190926T075830Z</li></ul>"},{"location":"API-Security/logistics-events/#response_2","title":"Response","text":"<p>A successful request MUST return a <code>HTTP/1.1 200 OK</code> status code.  The response body is formatted accordingly to the format that has been requested in the <code>Accept</code> request header. The body of the response is composed by a Collection object containing all LogisticsEvent matching the specified query parameters.</p> <pre><code>classDiagram   \n    direction LR   \n\n    class Collection{    \n        + hasItem: LogisticsEvents [0..*]\n        + hasTotalItems: xsd:nonNegativeInteger [0..1]    \n    }\n\n    class LogisticsEvent{\n\n    }\n    Collection \"1\" --&gt; \"0..*\" LogisticsEvent\n</code></pre> <p>The ONE Record API employs the Collection class to return an array of objects. This class encompasses two properties:</p> <ul> <li>api:hasItem returns the array of objects.</li> <li>api:hasTotalItem returns the count of elements within the returned array.</li> </ul> <p>In this particular case, @id property in the response body MUST be equal to the Endpoint defined in the Endpoint section (i.e.: https://1r.example.com/logistics-objects/2a7d1338-9033-13xc-b665-81a411418978/logistics-events). </p> <p>Note</p> <p>The ONE Record standard fully adopts the JSON-LD specification, and as a result, the presence of the api:hasItem property of Collection is contingent on the number of Logistics Events returned byt the specified query. Specifically:</p> <ul> <li>If the specified query returns zero Logistics Events, api:hasItem may not appear in the JSON, and api:hasTotalItem must be 0.</li> <li>When the specified query returns exactly one Logistics Event, api:hasItem will directly represent that Logistics Event, and api:hasTotalItem must be 1.</li> <li>In cases where the specified query returns multiple Logistics Events, api:hasItem will be an array containing those Logistics Events, and api:hasTotalItem must be equal to the number of Logistics Events retrieved by the specified query.</li> </ul> <p>During the implementation phase, it is highly recommended to utilize a JSON-LD library for parsing responses. To discover JSON-LD libraries for various programming languages, consult the implementation guidelines.</p> <p>The following HTTP headers parameters MUST be present in the response:</p> Header Description Example Content-Type The content type that is contained with the HTTP body. application/ld+json Content-Language Describes the language(s) for which the requested resource is intended. en-US <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 200 The request to retrieve all Logistics Events has been successful List of Logistics Event 301 The URI of the Logistics Object has permanently changed. No response body 302 The URI of the Logistics Object has temporarily moved. No response body 401 Not authenticated Error 403 Not authorized to retrieve the Logistics Object Error 404 Logistics Object not found Error 500 Internal Server Error Error"},{"location":"API-Security/logistics-events/#security_2","title":"Security","text":"<p>To engage with the \"Get Logistics Events of a Logistics Object\" endpoint, a client needs proper authentication and authorization to access the designated resource. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status. Conversely, for requests without proper authorization, a <code>403 \"Not Authorized\"</code> response should be provided.</p> <p>The authorization to access the logistics events should be derived from the logistics objects. However, the implementor of a ONE Record server can decide to separate the control access between a logistics object and its logistics events.</p>"},{"location":"API-Security/logistics-events/#example-c1","title":"Example C1","text":"<p>Request:</p> <pre><code>GET /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c/logistics-events HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <p><pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json; version=2.0.0-dev\nContent-Language: en-US\n\n{\n  \"@context\": {\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n    \"api\": \"https://onerecord.iata.org/ns/api#\"\n  },\n  \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c/logistics-events\",\n  \"@type\": \"api:Collection\",\n  \"api:hasTotalItems\": 2,\n  \"api:hasItem\": [\n    {\n      \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c/logistics-events/afb4b8cf-288a-459c-97fd-ccd538ec527f\",\n      \"@type\": \"cargo:LogisticsEvent\",\n      \"cargo:creationDate\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-01T10:38:01.000Z\"\n      },\n      \"cargo:eventDate\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-01T10:38:01.000Z\"\n      },\n      \"cargo:eventCode\": {\n        \"@type\": \"cargo:CodeListElement\",\n        \"cargo:code\": \"DEP\",\n        \"cargo:codeListName\": \"Departure\"\n    },\n      \"cargo:eventName\": \"Consignment departed on a specific flight\",\n      \"cargo:eventTimeType\": \"cargo:ACTUAL\",\n      \"cargo:partialEventIndicator\": false,\n      \"cargo:linkedObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c\",\n        \"@type\": \"cargo:Shipment\"\n      },\n      \"cargo:recordingOrganization\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\",\n        \"@type\": \"cargo:Company\"\n      }\n    },\n    {\n      \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c/logistics-events/afb4b8cf-288a-459c-97fd-ccd538ec528f\",\n      \"@type\": \"cargo:LogisticsEvent\",\n      \"cargo:creationDate\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-01T10:38:01.000Z\"\n      },\n      \"cargo:eventDate\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-01T10:38:01.000Z\"\n      },\n      \"cargo:eventCode\": {\n        \"@type\": \"cargo:CodeListElement\",\n        \"cargo:code\": \"MAN\",\n        \"cargo:codeListName\": \"Manifested\"\n      },\n      \"cargo:eventName\": \"Consignment manifested on a specific flight\",\n      \"cargo:eventTimeType\": \"cargo:ACTUAL\",\n      \"cargo:partialEventIndicator\": false,\n      \"cargo:eventFor\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c\",\n        \"@type\": \"cargo:Shipment\"\n      },\n      \"cargo:recordingOrganization\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\",\n        \"@type\": \"cargo:Company\"\n      }\n    }\n  ]\n}\n</code></pre> (LogisticsEvents_list.json)</p>"},{"location":"API-Security/logistics-events/#example-c2","title":"Example C2","text":"<p>Get a filtered list of events. Filtered by eventType that needs to be DEP.</p> <p>Request:</p> <pre><code>GET /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c/logistics-events?eventType=DEP HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <p><pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json; version=2.0.0-dev\nContent-Language: en-US\n\n{\n  \"@context\": {\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n    \"api\": \"https://onerecord.iata.org/ns/api#\"\n  },\n  \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c/logistics-events\",\n  \"@type\": \"api:Collection\",\n  \"api:hasTotalItems\": 1,\n  \"api:hasItems\": {\n    \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c/logistics-events/afb4b8cf-288a-459c-97fd-ccd538ec527f\",\n    \"@type\": \"cargo:LogisticsEvent\",\n    \"cargo:creationDate\": {\n      \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n      \"@value\": \"2023-04-01T10:38:01.000Z\"\n    },\n    \"cargo:eventDate\": {\n      \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n      \"@value\": \"2023-04-01T10:38:01.000Z\"\n    },\n    \"cargo:eventCode\": {\n      \"@type\": \"cargo:CodeListElement\",\n      \"cargo:code\": \"DEP\",\n      \"cargo:codeListName\": \"Departure\"\n    },\n    \"cargo:eventName\": \"Consignment departed on a specific flight\",\n    \"cargo:eventTimeType\": {\n      \"@id\": \"cargo:ACTUAL\",\n      \"@type\": \"cargo:EventTimeType\"\n    },\n    \"cargo:partialEventIndicator\": false,\n    \"cargo:eventFor\": {\n      \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c\",\n      \"@type\": \"cargo:Shipment\"\n    },\n    \"cargo:recordingOrganization\": {\n      \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\",\n      \"@type\": \"cargo:Company\"\n    }\n  }\n}\n</code></pre> (LogisticsEvents_filtered_list.json)</p>"},{"location":"API-Security/logistics-events/#example-c3","title":"Example C3","text":"<p>Get an empty list of events.</p> <p>Request:</p> <pre><code>GET /logistics-objects/2a7d1338-9033-13xc-b665-81a411418978/logistics-events HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <p><pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json; version=2.0.0-dev\nContent-Language: en-US\n\n{\n    \"@context\": {\n      \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n      \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@id\": \"https://1r.example.com/logistics-objects/2a7d1338-9033-13xc-b665-81a411418978/logistics-events\",\n    \"@type\": \"api:Collection\",\n    \"api:hasTotalItems\": 0\n  }\n</code></pre> (LogisticsEvents_empty_list.json)</p>"},{"location":"API-Security/logistics-objects/","title":"Logistics Objects","text":""},{"location":"API-Security/logistics-objects/#create-a-logistics-object","title":"Create a Logistics Object","text":"<p>This API action is used to create a Logistics Object on a ONE Record server using the POST HTTP method. This particular Logistics Object MUST be a type of Logistics Object, i.e. data classes that inherit from the class Logistics Object, that is specified in the ONE Record data model. A list of all possible data classes that inherit from Logistics Object can be found here.</p> <p>Note</p> <p>Although the creation of a Logistics Object is specified in the ONE Record API specification, it is not required to expose an API endpoint for this API action to be compliant with the ONE Record standard.  The reason for this is that only the holder of the logistics object MAY create a logistics object with any business logic or technology.  However, it is important that the Logistics Object is created with a Logistics Object URI that is accessible on the ONE Record network.</p> <p>Nevertheless, this API action specification is included for reference, because in many cases, the use of HTTP POST is the preferred solution to create resources with REST APIs.</p>"},{"location":"API-Security/logistics-objects/#endpoint","title":"Endpoint","text":"<pre><code> POST {{baseURL}}/logistics-objects/\n</code></pre>"},{"location":"API-Security/logistics-objects/#request","title":"Request","text":"<p>The following HTTP header parameters MUST be present in the request</p> Header Description Examples Accept The content type that the ONE Record client wants the HTTP response to be formatted in. application/ld+json Content-Type The content type that is contained with the HTTP body. Valid content types. application/ld+json <p>The HTTP request ody must contain a valid Logistics Object in the format as specified by the Content-Type in the header.</p>"},{"location":"API-Security/logistics-objects/#response","title":"Response","text":"<p>A successful request MUST return a <code>HTTP/1.1 201 Created</code> status code and the following HTTP headers parameters MUST be present in the response:</p> Header Description Examples Location The URI of the newly created Logistics Object https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c Type The type of the newly created Logistics Object as a URI https://onerecord.iata.org/ns/cargo#Piece <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 201 Logistics Object has been created No response body 400 Invalid Logistics Object Error 401 Not authenticated Error 403 Not authorized to publish the Logistics Object to the server Error 409 Logistics object with specified ID already exists Error 415 Unsupported Content Type Error 500 Internal Server Error Error"},{"location":"API-Security/logistics-objects/#security","title":"Security","text":"<p>Access to the Logistics Objects creation endpoint should be restricted to internal usage only, and it must not be made available to external entities.</p>"},{"location":"API-Security/logistics-objects/#example-a1","title":"Example A1","text":"<p>Creating a LogisticsObject of type Piece</p> <p>Request:</p> <pre><code>POST /logistics-objects HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@type\": \"cargo:Piece\",\n    \"cargo:coload\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#boolean\",\n        \"@value\": \"false\"\n    },\n    \"cargo:specialHandlingCodes\": [\n        {\n            \"@id\": \"https://onerecord.iata.org/ns/coreCodeLists#SpecialHandlingCode_VAL\"\n        }\n    ]\n}\n</code></pre> <p>(Piece.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 201 Created\nLocation: https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/cargo#Piece\n</code></pre>"},{"location":"API-Security/logistics-objects/#example-a2","title":"Example A2","text":"<p>Creating a LogisticsObject of type Company with an embedded Logistics Object of type Person</p> <p>Request:</p> <pre><code>POST /logistics-objects HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@type\": [\n        \"cargo:Company\",\n        \"cargo:Organization\",\n        \"cargo:LogisticsAgent\",\n        \"cargo:LogisticsObject\"\n    ],\n    \"cargo:name\": \"Acme Corporation\",\n    \"cargo:shortName\": \"ACME\",\n    \"cargo:contactPersons\": [\n        {\n            \"@type\": [\n                \"cargo:Person\",\n                \"cargo:Actor\",\n                \"cargo:LogisticsAgent\",\n                \"cargo:LogisticsObject\"\n            ],\n            \"cargo:firstName\": \"Jane\",\n            \"cargo:lastName\": \"Doe\",\n            \"cargo:salutation\": \"Ms\"\n        }\n    ]\n}\n</code></pre> <p>(Company.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 201 Created\nLocation: https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/cargo#Company\n</code></pre>"},{"location":"API-Security/logistics-objects/#example-a3","title":"Example A3","text":"<p>Creating a LogisticsObject of type Shipment that links the previously created Piece (see Example 1)</p> <p>Request:</p> <pre><code>POST /logistics-objects HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@type\": \"cargo:Shipment\",\n    \"cargo:goodsDescription\": \"Lots of awesome ONE Record information materials\",\n    \"cargo:pieces\": [\n        {\n            \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n        }\n    ]\n}\n</code></pre> <p>(Shipment.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 201 Created\nLocation: https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/cargo#Shipment\n</code></pre> <p>Three different logistics objects have been published, i.e. they have been created and are accessible via their URIs:</p> <ul> <li>Piece with the Logistics Object URI <code>https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c</code></li> <li>Shipment with the Logistics Object URI <code>https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c</code>, </li> <li>Company with the Organization URI <code>https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda</code></li> </ul> <p>This Logistics Objects will be used for the following examples.</p>"},{"location":"API-Security/logistics-objects/#get-a-logistics-object","title":"Get a Logistics Object","text":"<p>Each Logistics Object MUST be accessible via its Logistics Objects URI using the HTTP GET method. This enables the Holder of the Logistics Object to manage access on the level of individual Logistics Objects (see access-control for more information). If the requester is authorized to access this Logistics Object then the response body MUST include the requested Logistics Object.</p> <p>If not a historical version is explicitly requested (see Retrieve a historical Logistics Object), the ONE Record server MUST return the latest version of the requested Logistics Object.</p> <p>Because of Linked Data as a core concept of ONE Record, it could be possible that the requested Logistics Object contains links to other Logistics Object (see Shipment in Example A3), If the User of the Logistics Object is interested in this linked data objects (which not necessary have to be on the same ONE Record server) and has the necessary access permissions, the User of the Logistics Object can request those Logistics Objects via their linked Logistics Object URIs.</p> <p>Although linking logistics objects instead of embedding logistics objects is the preferred and RECOMMENDED approach, to reduce the number of GET requests, it can be helpful to request an embedded version of a Logistics Object by setting the optional query parameter <code>embedded=true</code>.  The ONE Record server SHOULD then replace the linked Logistics Objects with the actual Logistics Objects by resolving the Logistics Object URIs (see Example B3).</p> <p>Note</p> <p>The ONE Record server MAY only resolve and replace linked Logistics Objects that are published on the same ONE Record server.      Furthermore, there ONE Record server MAY not resolve and replace linked Logistics Events. Logistics Events MUST be accessed using the <code>/logistics-events</code> endpoint. (see Logistics Events)</p>"},{"location":"API-Security/logistics-objects/#endpoint_1","title":"Endpoint","text":"<pre><code> GET {{baseURL}}/logistics-objects/{{logisticsObjectId}}\n</code></pre>"},{"location":"API-Security/logistics-objects/#request_1","title":"Request","text":"<p>The following query parameters MUST be supported:</p> Query parameter Description Valid values embedded (optional) Optional parameter that can be used to request an embedded version of a Logistics Object, if the parameter is not set, a linked version of the Logistics Object is returned <ul><li>true</li><li>false</li></ul> at (optional) Optional parameter that can be used to request a historical version of Logistics Object, if the parameter is not set, the latest version is returned ISO 8601 UTC using format: <code>YYYYMMDDThhmmssZ</code> <p>The following HTTP header parameters MUST be present in the request:</p> Header Description Examples Accept The content type that a ONE Record client wants the HTTP response to be formatted in. This SHOULD include the version of the ONE Record API, otherwise the latest supported ONE Record API MAY be applied. <ul><li>application/ld+json</li><li>application/ld+json; version=2.0.0-dev</li><li>application/ld+json; version=1.2</li></ul>"},{"location":"API-Security/logistics-objects/#response_1","title":"Response","text":"<p>A successful request MUST return a <code>HTTP/1.1 200 OK</code> status code.  The body of the response includes the Logistics Object in the RDF serialization format that has been requested in the <code>Accept</code> header of the request.</p> <p>The following HTTP headers parameters MUST be present in the response:</p> Header Description Example Content-Type The content type that is contained with the HTTP body. application/ld+json Content-Language Describes the language(s) for which the requested resource is intended. en-US Type The type of the requested Logistics Object as a URI https://onerecord.iata.org/ns/cargo#Piece Revision The revision of the requested Logistics Object as a positive numerical value. This is particularly relevant if the query parameter <code>at=</code> is set to request a historical version of the Logistics Object. 3 Latest-Revision The latest revision number of the Logistics Object as non-negative numerical value. 3 Last-Modified Date and time when the Logistics Object was last time changed. Syntax: <code>Last-Modified: &lt;day-name&gt;, &lt;day&gt; &lt;month&gt; &lt;year&gt; &lt;hour&gt;:&lt;minute&gt;:&lt;second&gt; GMT</code>. See https://developer.mozilla.org/en-US/docs/Web/ Tue, 21 Feb 2023 07:28:00 GMT <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 200 The request to retrieve the Logistics Object has been successful Logistics Object 301 The URI of the Logistics Object has permanently changed. No response body 302 The URI of the Logistics Object has temporarily moved. No response body 401 Not authenticated Error 403 Not authorized to retrieve the Logistics Object Error 404 Logistics Object not found Error 415 Unsupported Content Type Error 500 Internal Server Error Error"},{"location":"API-Security/logistics-objects/#security_1","title":"Security","text":"<p>To engage with the \"Get Logistics Object\" endpoint, a client needs proper authentication and authorization to access the designated resource. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status. Conversely, for requests without proper authorization, a <code>403 \"Not Authorized\"</code> response should be provided.</p>"},{"location":"API-Security/logistics-objects/#example-b1","title":"Example B1","text":"<p>Request:</p> <pre><code>GET /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json\nContent-Language: en-US\nLocation: https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\nType: https://onerecord.iata.org/ns/cargo#Piece\nRevision: 1\nLatest-Revision: 1\nLast-Modified: Tue, 21 Feb 2023 07:28:00 GMT\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"@language\": \"en-US\"\n    },\n    \"@type\": \"cargo:Piece\",\n    \"@id\": \" https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n    \"cargo:coload\": false,\n    \"cargo:specialHandlingCodes\": [\n        {\n            \"@id\": \"https://onerecord.iata.org/ns/coreCodeLists#SpecialHandlingCode_VAL\"\n        }\n    ]\n}\n</code></pre> <p>(Piece_with_id.json)</p>"},{"location":"API-Security/logistics-objects/#example-b2","title":"Example B2","text":"<p>This is an example for an unsuccessful HTTP GET request that results in an error.</p> <p>Request:</p> <pre><code>GET /logistics-objects/11ccfb7c-3643-41db-8098-740fccd97c93 HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json\nAccept: application/ld+json\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 403 Forbidden\nContent-Language: en-US\nContent-Type: application/ld+json\n\n{\n   \"@context\": {\n      \"api\": \"https://onerecord.iata.org/ns/api#\",\n      \"@language\": \"en-US\"\n   },\n   \"@type\": \"api:Error\",\n   \"@id\": \"_:b0\",\n   \"api:hasTitle\": \"Not authorized to retrieve the Logistics Object\",\n   \"api:hasErrorDetail\": [{\n      \"@type\": \"api:ErrorDetail\",\n      \"@id\": \"_:b1\",\n      \"api:hasCode\": \"403\",\n      \"api:hasMessage\": \"Authenticated client could not be found in ACL for the Logistics Object\",\n      \"api:hasResource\": \"http://1r.example.com/logistics-objects/11ccfb7c-3643-41db-8098-740fccd97c93\"\n   }]\n}\n</code></pre> <p>(Error_403.json)</p>"},{"location":"API-Security/logistics-objects/#example-b3","title":"Example B3","text":"<p>This is an example for a HTTP GET request that asks the ONE Record server to embed the linked Logistics Objects.</p> <p>Request:</p> <pre><code>GET /logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c?embedded=true HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json\nAccept: application/ld+json\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json\nContent-Language: en-US\nLocation: https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c\nType: https://onerecord.iata.org/ns/cargo#Shipment\nRevision: 1\nLatest-Revision: 1\nLast-Modified: Tue, 21 Feb 2023 07:28:00 GMT\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@type\": \"cargo:Shipment\",\n    \"cargo:goodsDescription\": \"Lots of awesome ONE Record information materials\",\n    \"cargo:pieces\": [\n        {\n            \"@type\": \"cargo:Piece\",\n            \"@id\": \" https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n            \"cargo:coload\": {\n                \"@type\": \"http://www.w3.org/2001/XMLSchema#boolean\",\n                \"@value\": \"false\"\n            },\n            \"cargo:specialHandlingCodes\": [\n                {\n                    \"@id\": \"https://onerecord.iata.org/ns/coreCodeLists#SpecialHandlingCode_VAL\"\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>(Shipment_with_Piece.embedded.json)</p>"},{"location":"API-Security/logistics-objects/#example-b4","title":"Example B4","text":"<p>This example illustrates an instance of an HTTP GET request that triggers a redirection. Various types of redirection can be employed based on requirements. The provided illustration demonstrates a 301 redirect used for indicating a permanent relocation of the resource.</p> <p>In this case the <code>Location</code> header carries the new URL of the requested resource.</p> <p>Request:</p> <p><pre><code>GET /logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json\nAccept: application/ld+json\n</code></pre> Response:</p> <pre><code>HTTP/1.1 301 Moved Permanently\nLocation: http://new1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c \n</code></pre>"},{"location":"API-Security/logistics-objects/#update-a-logistics-object","title":"Update a Logistics Object","text":"<p>In ONE Record, logistics objects MAY be updated.  However, only the <code>Holder of a LogisticsObject</code> can update the data,  while <code>Users of the LogisticsObject</code> can only request changes following a structure described in this section.</p> <p>Technically, the HTTP PATCH method is used to request an update to a LogisticsObject. According to the W3C HTTP standard, PATCH is used for partial changes to a resource. This differs from the HTTP PUT method, which is used for the complete replacement of a resource.</p> <p>Linked Data PATCH Format</p> <p>Although ONE Record API specification does not put much emphasis on the use of RDF, it is important that the specification of RDF is fully respected to ensure that ONE Record remains compatible with RDF technologies, such as the use of graph queries.</p> <p>W3C has developed the Linked Data PATCH Format for describing changes to Linked Data. It defines a list of operations to be performed against a Linked Data resource, namely the addition or removal of RDF triples in a graph representation of the resource.</p> <p>This Linked Data PATCH Format provides many options for updating RDF but since ONE Record uses JSON-LD as the RDF Serialization, the ONE Record API specification follows the JSON-LD PATCH specification and limits the options for changing Logistics Objects to two actions only: delete and add.</p> <p>The combination of delete and add is equivalent to replace. Thus, any property in a Logistics Object can be deleted, added, or replaced.</p> <p>Guidelines for updating Logistics Objects in ONE Record:</p> <ul> <li>Only the Holder of a Logistics Object MAY make the changes to logistics objects.</li> <li>Any authenticated User of a Logistics Object CAN request a Change on a Logistics Object, which result in a ChangeRequest with the status REQUEST_PENDING.</li> <li>The implementer of the ONE record server MUST ensure that the requester gets sufficient access to the resulting ChangeRequest to query the status of the ChangeRequest and to revoke pending ChangeRequests (see also section on revoking Action Requests)</li> <li>The Holder of a Logistics Object decides about the ChangeRequest and applies changes to a Logistics Object unless there is a business or technical reason to reject it.</li> <li>Evaluation and Application of a Change MUST occur as a single (atomic) event. Operations are sorted and processed as two groups of (1) delete operations and (2) add operations until all operations are applied, or else the entire update fails. If an error occurs, it is necessary to revert the logistics object back to its previous state before implementing the modification.</li> <li>If a field update fails, the entire Change is unsuccessful. Partial updates MUST NOT be accepted. The ONE Record server MUST use the property hasError of the ChangeRequest to document the errors.</li> <li>If the update is successful, the revision number in a Logistics Object's AuditTrail is incremented and the changes are recorded in the Audit Trail. Please refer to the sections on Historical Logistics Objects and Audit Trail of Logistics Objects for more details.</li> <li>It is RECOMMENDED to get the latest version of Logistics Object before requesting a Change to ensure that the update is made to the latest version of the Logistics Object.</li> <li>If a ChangeRequest is rejected by the Holder of the Logistics Object, the revision number of the Logistics Object is not incremented but the request is added to the AuditTrail of this Logistics Object, marked with the status REQUEST_REJECTED. A rejected ChangeRequest is kept in the AuditTrail of the Logistics Object.</li> <li>After a ChangeRequest is accepted, other pending ChangeRequests that affect the same revision MUST be rejected.</li> <li>The PATCH operation MUST NOT be used to create logistics objects; only linking to an existing object is allowed in a ChangeRequest.</li> <li>The PATCH operation MUST NOT be used to link a LogisticsEvent to a Logistics Object. The ONE Record server MUST reject requested changes that contain operations to the hasLogisticsEvent property.</li> <li>The ONE Record server MUST check that the property referencesLogisticsObject matches the URI/endpoint used for the PATCH request. </li> <li>If datatype in OperationObject is an IRI of the ONE Record cargo ontology and is not a data class that inherits from LogisticsObject, then the ONE Record Server MUST generate an embeddedObjectId for the object in the <code>value</code> property of <code>OperationObject</code> (see section about Blank Nodes and Embedded Objects)</li> </ul> <p>Logistics Objects MUST have a revision number, which is a non negative integer to be incremented after every applied change. The audit trail contains a field latestRevision which defines the latest revision of the Logistics Object.</p>"},{"location":"API-Security/logistics-objects/#endpoint_2","title":"Endpoint","text":"<pre><code> PATCH {{baseURL}}/logistics-objects/{{logisticsObjectId}}\n</code></pre>"},{"location":"API-Security/logistics-objects/#request_2","title":"Request","text":"<p>The following HTTP header parameters MUST be present in the PATCH request:</p> Request Header Description Examples Accept The content type that you want the HTTP response to be formatted in. application/ld+json Content-Type The content type that is contained with the HTTP body. application/ld+json <p>The HTTP request body must contain a valid Change object in the format as specified by the Content-Type in the header.</p> <p>The Change is a data class of the ONE Record API ontology. The properties and relationships to other data classes are visualized in the following class diagram.</p> <pre><code>classDiagram\n    direction LR\n\n    class LogisticsObject{\n    }\n\n    class Organization{\n    }\n\n    class ActionRequest {\n        &lt;&lt;Abstract&gt;&gt;         \n        + hasError[]: Error [*]\n        + isRequestedAt: xsd:dateTime         \n        + isRequestedBy: Organization            \n        + isRevokedBy: Organization \n        + hasRequestStatus: RequestStatus = REQUEST_PENDING\n        + revokedAt: xsd:dateTime                 \n    }\n    ActionRequest &lt;|-- ChangeRequest\n\n    ActionRequest \"1\" --&gt; \"0..*\" Error     \n    ActionRequest \"1\" --&gt; \"1..*\" Organization : requestedBy    \n    ActionRequest --&gt; RequestStatus                \n    ActionRequest \"1\" --&gt; \"1..*\" Organization : revokedBy\n\n    class ChangeRequest{\n        + hasLogisticsObject: LogisticsObject                                \n        + hasChange: Change        \n    }\n    ChangeRequest \"1\" --&gt; \"1\" LogisticsObject\n    ChangeRequest \"1\" --&gt; \"1\" Change\n\n    class Change{        \n        + hasOperation[]: Operation [1..*]        \n        + hasDescription: xsd:string [0..1]\n        + hasLogisticsObject: LogisticsObject\n        + hasRevision: xsd:positiveInteger        \n        + notifyRequestStatusChange: xsd:boolean = FALSE\n    }\n    Change \"1\" --&gt; \"1\" LogisticsObject\n    Change \"1\" --&gt; \"1..*\" Operation\n\n    class Error{        \n        + hasErrorDetail[]: ErrorDetail [1..*]\n        + hasTitle: xsd:string\n    }\n    Error \"1\" --&gt; \"*\" ErrorDetail\n\n    class ErrorDetail{\n        + hasCode: xsd:string  [0..1]\n        + hasMessage: xsd:string [0..1]\n        + hasProperty: xsd:anyURI [0..1]\n        + hasResource: xsd:anyURI [0..1]\n    }\n\n    class Operation{\n        + o: OperationObject|string\n        + op: PatchOperation\n        + p: xsd:anyURI\n        + s: xsd:string\n    }\n    Operation \"1\" --&gt; \"1\" OperationObject\n    Operation --&gt; PatchOperation\n\n    class OperationObject{\n        + hasDatatype: xsd:anyURI\n        + hasValue: xsd:string   \n    }\n\n    class PatchOperation{\n        &lt;&lt;Enumeration&gt;&gt;\n        ADD\n        DELETE\n    }\n    class RequestStatus{\n        &lt;&lt;Enumeration&gt;&gt;\n        REQUEST_PENDING\n        REQUEST_ACCEPTED\n        REQUEST_REJECTED\n        REQUEST_FAILED\n        REQUEST_REVOKED        \n    }</code></pre>"},{"location":"API-Security/logistics-objects/#response_2","title":"Response","text":"<p>A successful request MUST return a <code>`HTTP/1.1 201 Created</code> status code and the following HTTP headers parameters MUST be present in the response:</p> Header Description Example Location The URI of the newly created ChangeRequest https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99b Type The type of the newly created resource as a URI https://onerecord.iata.org/ns/api#ChangeRequest <p>Otherwise, an <code>Error</code> object with <code>ErrorDetail</code> as response body MUST be returned with the following HTTP headers:</p> Header Description Example Content-Type The content type that is contained with the HTTP body. application/ld+json Content-Language Describes the language(s) for which the requested resource is intended. en-US <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 201 The change request was correctly created No body required 400 The update request body is invalid Error 401 Not authenticated Error 403 Not authorized to update the Logistics Object Error 404 Logistics Object not found Error 415 Unsupported Content Type, response when the client sends a PATCH document format that the server does not support for the resource identified by the Request-URI. Error 422 Unprocessable request, when the server understands the PATCH document and the syntax of the PATCH document appears to be valid, but the server is incapable of processing the request. Error 500 Internal Server Error Error"},{"location":"API-Security/logistics-objects/#security_2","title":"Security","text":"<p>To engage with the \"Update Logistics Object\" endpoint, a client needs only to be authenticated. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status.</p>"},{"location":"API-Security/logistics-objects/#example-c1","title":"Example C1","text":"<p>In the example below, a Piece is modified by setting the property goodsDescription to <code>\"BOOKS\"</code> and change the property coload from <code>false</code> to <code>true</code>. This results in the following operations that MUST be part of the Change:</p> <ol> <li>add the value <code>\"BOOKS\"</code> (xsd:string) to the property goodsDescription of Piece</li> <li>delete the value <code>false</code> (xsd:boolean) from property coload of Piece</li> <li>add the value <code>true</code> (xsd:boolean) to property coload of Piece</li> </ol> <p>Request:</p> <pre><code>PATCH /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json\nAccept: application/ld+json\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Change\",\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    },\n    \"api:hasDescription\": \"Update goods description and coload\",\n    \"api:hasOperation\": [{\n            \"@type\": \"api:Operation\",\n            \"api:op\": { \"@id\": \"api:ADD\" },\n            \"api:s\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#goodsDescription\",\n            \"api:o\": [{\n                \"@type\": \"api:OperationObject\",\n                \"api:hasDatatype\": \"http://www.w3.org/2001/XMLSchema#string\",\n                \"api:hasValue\": \"ONE Record Advertisement Materials\"\n            }]\n        },\n        {\n            \"@type\": \"api:Operation\",\n            \"api:op\": { \"@id\": \"api:DELETE\" },\n            \"api:s\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#coload\",\n            \"api:o\": [{\n                \"@type\": \"api:OperationObject\",\n                \"api:hasDatatype\": \"http://www.w3.org/2001/XMLSchema#boolean\",\n                \"api:hasValue\": \"false\"\n            }]\n        },\n        {\n            \"@type\": \"api:Operation\",\n            \"api:op\": { \"@id\": \"api:ADD\" },\n            \"api:s\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#coload\",\n            \"api:o\": [{\n                \"@type\": \"api:OperationObject\",\n                \"api:hasDatatype\": \"http://www.w3.org/2001/XMLSchema#boolean\",\n                \"api:hasValue\": \"true\"\n            }]\n        }\n    ],\n    \"api:hasRevision\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\n        \"@value\": \"1\"\n    }\n}\n</code></pre> <p>(Change_example1.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 204 No Content\nContent-Type: application/ld+json\nType: https://onerecord.iata.org/ns/api#ChangeRequest\nLocation: https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99b\n</code></pre>"},{"location":"API-Security/logistics-objects/#example-c2","title":"Example C2","text":"<p>In the example below, Piece#grossWeight is added. This results in the following operations that MUST be part of the Change:</p> <ol> <li>add the embedded object Value(unit=\"KGM\", value=20.0) to the property Piece#grossWeight</li> </ol> <p>Request:</p> <pre><code>PATCH /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json\nAccept: application/ld+json\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Change\",\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    },\n    \"api:hasDescription\": \"Add grossWeight\",\n    \"api:hasOperation\": [\n        {\n            \"@type\": \"api:Operation\",\n            \"api:op\": {\n                \"@id\": \"api:ADD\"\n            },\n            \"api:s\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#grossWeight\",\n            \"api:o\": [\n                {\n                    \"@type\": \"api:OperationObject\",\n                    \"api:hasDatatype\": \"https://onerecord.iata.org/ns/cargo#Value\",\n                    \"api:hasValue\": \"_:b0\"\n                }\n            ]\n        },\n        {\n            \"@type\": \"api:Operation\",\n            \"api:op\": {\n                \"@id\": \"api:ADD\"\n            },\n            \"api:s\": \"_:b0\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#unit\",\n            \"api:o\": [\n                {\n                    \"@type\": \"api:OperationObject\",\n                    \"api:hasDatatype\": \"http://www.w3.org/2001/XMLSchema#string\",\n                    \"api:hasValue\": \"KGM\"\n                }\n            ]\n        },\n        {\n            \"@type\": \"api:Operation\",\n            \"api:op\": {\n                \"@id\": \"api:ADD\"\n            },\n            \"api:s\": \"_:b0\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#value\",\n            \"api:o\": [\n                {\n                    \"@type\": \"api:OperationObject\",\n                    \"api:hasDatatype\": \"http://www.w3.org/2001/XMLSchema#double\",\n                    \"api:hasValue\": \"20.0\"\n                }\n            ]\n        }\n    ],\n    \"api:hasRevision\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\n        \"@value\": \"2\"\n    }\n}\n</code></pre> <p>(Change_example2.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 204 No Content\nContent-Type: application/ld+json\nType: https://onerecord.iata.org/ns/api#ChangeRequest\nLocation: https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99c\n</code></pre>"},{"location":"API-Security/logistics-objects/#example-c3","title":"Example C3","text":"<p>In the example below, Piece#grossWeight is changed from 20.0 KGM to 25.0 KGM . This results in the following operations that MUST be part of the Change:</p> <ol> <li>delete the property value of embedded object Value(unit=\"KGM\", value=20.0) within the property Piece#grossWeight</li> <li>add the property value <code>25.0</code> to the embedded object Value(unit=\"KGM\") within the property Piece#grossWeight</li> </ol> <p>Note</p> <p>The <code>@id</code> of the bNode for grossWeight in Example C2 was replaced by the ONE Record server with <code>internal:7fc81d1d-6c75-568b-9e47-48c947ed2a07</code>  after the ChangeRequest was accepted.</p> <p>Request:</p> <pre><code>PATCH /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json\nAccept: application/ld+json\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Change\",\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    },\n    \"api:hasDescription\": \"Change grossWeight\",\n    \"api:hasOperation\": [{\n            \"@type\": \"api:Operation\",\n            \"api:op\": {\n                \"@id\": \"api:DELETE\"\n            },\n            \"api:s\": \"internal:7fc81d1d-6c75-568b-9e47-48c947ed2a07\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#value\",\n            \"api:o\": [{\n                \"@type\": \"api:OperationObject\",\n                \"api:hasDatatype\": \"http://www.w3.org/2001/XMLSchema#double\",\n                \"api:hasValue\": \"20.0\"\n            }]\n        },\n        {\n            \"@type\": \"api:Operation\",\n            \"api:op\": {\n                \"@id\": \"api:ADD\"\n            },\n            \"api:s\": \"internal:7fc81d1d-6c75-568b-9e47-48c947ed2a07\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#value\",\n            \"api:o\": [{\n                \"@type\": \"api:OperationObject\",\n                \"api:hasDatatype\": \"http://www.w3.org/2001/XMLSchema#double\",\n                \"api:hasValue\": \"25.0\"\n            }]\n        }\n    ],\n    \"api:hasRevision\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\n        \"@value\": \"2\"\n    }\n}\n</code></pre> <p>(Change_example3.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 204 No Content\nContent-Type: application/ld+json\nType: https://onerecord.iata.org/ns/api#ChangeRequest\nLocation: https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99d\n</code></pre>"},{"location":"API-Security/logistics-objects/#example-c4","title":"Example C4","text":"<p>In the example below, Piece#grossWeight is deleted. This results in the following operations that MUST be part of the Change:</p> <ol> <li>delete the embedded object Value(unit=\"KGM\", value=20.0) from the property Piece#grossWeight</li> </ol> <p>Request:</p> <pre><code>PATCH /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json\nAccept: application/ld+json\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Change\",\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    },\n    \"api:hasDescription\": \"delete grossWeight\",\n    \"api:hasOperation\": [{\n            \"@type\": \"api:Operation\",\n            \"api:op\": {\n                \"@id\": \"api:DELETE\"\n            },\n            \"api:s\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#grossWeight\",\n            \"api:o\": [{\n                \"@type\": \"api:OperationObject\",\n                \"api:hasDatatype\": \"https://onerecord.iata.org/ns/cargo#Value\",\n                \"api:hasValue\": \"_:b0\"\n            }]\n        },\n        {\n            \"@type\": \"api:Operation\",\n            \"api:op\": {\n                \"@id\": \"api:DELETE\"\n            },\n            \"api:s\": \"_:b0\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#unit\",\n            \"api:o\": [{\n                \"@type\": \"api:OperationObject\",\n                \"api:hasDatatype\": \"http://www.w3.org/2001/XMLSchema#string\",\n                \"api:hasValue\": \"KGM\"\n            }]\n        },\n        {\n            \"@type\": \"api:Operation\",\n            \"api:op\": {\n                \"@id\": \"api:DELETE\"\n            },\n            \"api:s\": \"_:b0\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#value\",\n            \"api:o\": [{\n                \"@type\": \"api:OperationObject\",\n                \"api:hasDatatype\": \"http://www.w3.org/2001/XMLSchema#double\",\n                \"api:hasValue\": \"20\"\n            }]\n        }\n    ],\n    \"api:hasRevision\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\n        \"@value\": \"3\"\n    }\n}\n</code></pre> <p>(Change_example4.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 204 No Content\nContent-Type: application/ld+json\nType: https://onerecord.iata.org/ns/api#ChangeRequest\nLocation: https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99d\n</code></pre>"},{"location":"API-Security/logistics-objects/#example-c5","title":"Example C5","text":"<p>In the example below, CustomsInformations are added to Piece#customsInfo. This results in following the workflow:</p> <p>1. Create two CustomsInformation objects (see Create a Logistics Object)</p> <p>Request:</p> <pre><code>POST /logistics-objects HTTP/1.1\nHost: 1r.example.com\n\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@type\": \"cargo:CustomsInformation\",\n    \"cargo:country\": {\n        \"@type\": \"cargo:CodeListElement\",\n        \"cargo:code\": \"DE\"\n    },\n    \"cargo:subjectCode\": {\n        \"@type\": \"cargo:CodeListElement\",\n        \"cargo:code\": \"ISS\"\n    }\n}\n</code></pre> <p>(CustomsInformation.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 201 Created\nLocation: https://1r.example.com/logistics-objects/4d73acf0-3073-4ec9-8aee-b82d64ba3805\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/cargo#CustomsInformation\n</code></pre> <p>Request:</p> <pre><code>POST /logistics-objects HTTP/1.1\nHost: 1r.example.com\n\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@type\": \"cargo:CustomsInformation\",\n    \"cargo:country\": {\n        \"@type\": \"cargo:CodeListElement\",\n        \"cargo:code\": \"DE\"\n    },\n    \"cargo:subjectCode\": {\n        \"@type\": \"cargo:CodeListElement\",\n        \"cargo:code\": \"ISS\"\n    },\n    \"cargo:contentCode\": {\n        \"@type\": \"cargo:CodeListElement\",\n        \"cargo:code\": \"RA\"\n    },\n    \"cargo:otherCustomsInformation\": \"01234-01\"\n}\n</code></pre> <p>(CustomsInformation_2.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 201 Created\nLocation: https://1r.example.com/logistics-objects/ba1c2194-2442-400b-b26b-466a01dda8b5\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/cargo#CustomsInformation\n</code></pre> <p>2. Add the URI of the newly created CustomsInformation objects to the property Piece#customsInfos Request:</p> <pre><code>PATCH /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json\nAccept: application/ld+json\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Change\",\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    },\n    \"api:hasDescription\": \"add CustomsInformations\",\n    \"api:hasOperation\": [{\n            \"@type\": \"api:Operation\",\n            \"api:op\": {\n                \"@id\": \"api:ADD\"\n            },\n            \"api:s\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#customsInformation\",\n            \"api:o\": [{\n                \"@type\": \"api:OperationObject\",\n                \"api:hasDatatype\": \"https://onerecord.iata.org/ns/cargo#CustomsInformation\",\n                \"api:hasValue\": \"https://1r.example.com/logistics-objects/4d73acf0-3073-4ec9-8aee-b82d64ba3805\"\n            }]\n        },\n        {\n            \"@type\": \"api:Operation\",\n            \"api:op\": {\n                \"@id\": \"api:ADD\"\n            },\n            \"api:s\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#customsInformation\",\n            \"api:o\": [{\n                \"@type\": \"api:OperationObject\",\n                \"api:hasDatatype\": \"https://onerecord.iata.org/ns/cargo#CustomsInformation\",\n                \"api:hasValue\": \"https://1r.example.com/logistics-objects/ba1c2194-2442-400b-b26b-466a01dda8b5\"\n            }]\n        }\n    ],\n    \"api:hasRevision\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\n        \"@value\": \"4\"\n    }\n}\n</code></pre> <p>(Change_example5.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 204 No Content\nContent-Type: application/ld+json\nType: https://onerecord.iata.org/ns/api#ChangeRequest\nLocation: https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99e\n</code></pre> <p>Note</p> <p>Removing a bNode, the ONE Record server implementors should handle the cleansing of the triples.</p>"},{"location":"API-Security/logistics-objects/#example-c6","title":"Example C6","text":"<p>In the example below, the referencesLogisticsObject in the Change object differs from the Logistics URI that is used as the endpoint for the PATCH request. The ONE Record server returns a <code>400 Bad Request</code>.</p> <p>Request:</p> <pre><code>PATCH /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Change\",\n    \"api:hasLogisticsObject\": [\n        {\n            \"@type\": \"cargo:LogisticsObject\",\n            \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b8c\"\n        }\n    ],    \n    \"api:hasDescription\": \"add CustomsInformations\",\n    \"api:hasOperation\": [\n        {\n            \"@type\": \"api:Operation\",\n            \"api:op\": { \"@id\": \"api:ADD\" },\n            \"api:s\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b8c\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#customsInformation\",\n            \"api:o\": [\n                {\n                    \"@type\": \"api:OperationObject\",\n                    \"api:hasDatatype\": \"https://onerecord.iata.org/ns/cargo#CustomsInformation\",\n                    \"api:hasValue\": \"https://1r.example.com/logistics-objects/4d73acf0-3073-4ec9-8aee-b82d64ba3805\"\n                }\n            ]\n        }             \n    ],    \n    \"api:hasRevision\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\n        \"@value\": \"4\"\n    }\n}\n</code></pre> <p>(Change_example6.json)</p> <p>Response:</p> <p><pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n       \"api\": \"https://onerecord.iata.org/ns/api#\",\n       \"@language\": \"en-US\"\n    },\n    \"@type\": \"api:Error\",\n    \"@id\": \"_:b0\",\n    \"api:hasTitle\": \"Logistics Object URI does not match\",\n    \"api:hasErrorDetail\": [{\n       \"@type\": \"api:ErrorDetail\",\n       \"@id\": \"_:b1\",\n       \"api:hasCode\": \"400\",\n       \"api:hasMessage\": \"LogisticsObject URI in Change does not match requested Logistics Object URI\",\n       \"api:hasResource\": \"http://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    }]\n }\n</code></pre> (Error_400.json)</p>"},{"location":"API-Security/logistics-objects/#example-c7","title":"Example C7","text":"<p>In the example below, the Change object contains an illegal operation, i.e. an ADD operation that affects the disallowed property hasLogisticsEvent. The ONE Record server returns a <code>400 Bad Request</code>.</p> <p>Request:</p> <pre><code>PATCH /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Change\",\n    \"api:hasLogisticsObject\": [\n        {\n            \"@type\": \"cargo:LogisticsObject\",\n            \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n        }\n    ],    \n    \"api:hasDescription\": \"add LogisticsEvent\",\n    \"api:hasOperation\": [\n        {\n            \"@type\": \"api:Operation\",\n            \"api:op\": { \"@id\": \"api:ADD\" },\n            \"api:s\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n            \"api:p\": \"https://onerecord.iata.org/ns/cargo#hasLogisticsEvent\",\n            \"api:o\": [\n                {\n                    \"@type\": \"api:OperationObject\",\n                    \"api:hasDatatype\": \"https://onerecord.iata.org/ns/cargo#LogisticsEvent\",\n                    \"api:hasValue\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c/logistics-events/c9ab534e-3246-48d3-b34d-bb380bd98af7\"\n                }\n            ]\n        }             \n    ],    \n    \"api:hasRevision\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\n        \"@value\": \"4\"\n    }\n}\n</code></pre> <p>(Change_example7.json)</p> <p>Response:</p> <p><pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n       \"api\": \"https://onerecord.iata.org/ns/api#\",\n       \"@language\": \"en-US\"\n    },\n    \"@type\": \"api:Error\",\n    \"@id\": \"_:b0\",\n    \"api:hasTitle\": \"Logistics Events can not be updated\",\n    \"api:hasErrorDetail\": [{\n       \"@type\": \"api:ErrorDetail\",\n       \"@id\": \"_:b1\",\n       \"api:hasCode\": \"400\",\n       \"api:hasMessage\": \"Logistics Events of a Logistics Object can not be updated using PATCH\",\n       \"api:hasResource\": \"http://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    }]\n }\n</code></pre> (Error_400_example2.json)</p>"},{"location":"API-Security/logistics-objects/#get-audit-trail-of-a-logistics-object","title":"Get Audit Trail of a Logistics Object","text":"<p>Every time a Logistics Object is requested to be updated as described in the previous section, the details of this request are added to an AuditTrail of a Logistics Object.  Before a ChangeRequest is processed by the holder of a Logistics Object, the status of the ChangeRequest MUST be changed from REQUEST_PENDING to REQUEST_ACCEPTED or REQUEST_REJECTED.</p> <p>The ChangeRequest data class object details about the success or failure of this request, e.g. timestamps, any errors that occurred, in addition to the operations to be applied to a LogisticsObject.</p> <p>The AuditTrail is a data class of the ONE Record API ontology. The properties and relationships to other data classes are visualized in the following class diagram.</p> <pre><code>classDiagram\n    direction RL\n\n    class AuditTrail{                \n        + hasChangeRequest[]: ChangeRequest [*]                \n        + hasLatestRevision: xsd:positiveInteger       \n    }\n    AuditTrail \"1\" --&gt; \"*\" ChangeRequest</code></pre> <p>Note</p> <p><code>Users of the Logistics Object</code> can retrieve the AuditTrail of the LogisticsObject.  <code>Holder of the Logistics Object</code> is responsible for updating the AuditTrail.</p> <p>The AuditTrail of a Logistics Object can be retrieved by performing a GET request to the Logistics Object URI appended by: \"/audit-trail\", e.g. https://1r.example.com/logistics-objects/11ccfb7c-3643-41db-8098-740fccd97c93/audit-trail</p> <p>In order to retrieve the history of a Logistics Object between two dates, a query parameter should be added to the request URL as follows: \"?updated-from=YYYYMMDDThhmmssZ&amp;updated-to=YYYYMMDDThhmmssZ\". The ONE Record client MUST specify this date-time window.</p>"},{"location":"API-Security/logistics-objects/#endpoint_3","title":"Endpoint","text":"<pre><code> GET {{baseURL}}/logistics-objects/{{logisticsObjectId}}/audit-trail\n</code></pre>"},{"location":"API-Security/logistics-objects/#request_3","title":"Request","text":"<p>The following query parameters MUST be supported:</p> Query parameter Description Valid values updated-from (optional) The start date of the requested audit trail.  If not specificed the acutal time is taken. ISO 8601 UTC using format: <code>YYYYMMDDThhmmssZ</code> updated-to (optional) The end date of the requested audit trail. If not specificed the logistics object creation date is taken. ISO 8601 UTC using format: <code>YYYYMMDDThhmmssZ</code> status (optional) The type of change requests in the audit trail. If not specified all types are returned. <ul><li>PENDING</li><li>ACCEPTED</li><li>REJECTED</li> <p>The following HTTP header parameters MUST be present in the request:</p> Request Header Description Accept The content type that you want the HTTP response to be formatted in. Valid content types include: \u25aa application/x-turtle or text/turtle \u25aa application/ld+json Content-Type The content type that is contained with the HTTP body. Valid content types include: \u25aa application/x-turtle or text/turtle \u25aa application/ld+json"},{"location":"API-Security/logistics-objects/#response_3","title":"Response","text":"<p>A successful request MUST return a <code>HTTP/1.1 200 OK</code> status code.  The response body follows the API AuditTrail class structure.</p> AuditTrail Description Required Class hasChangeRequest List of change requests that were sent as PATCH for a Logistics Object yes api:ChangeRequest hasLatestRevision The latest revision of the Logistics Object yes xsd:positiveInteger <p>Each change request follows the API ChangeRequest class structure.</p> <p>The following HTTP headers parameters MUST be present in the response:</p> Header Description Example Content-Type The content type that is contained with the HTTP body. application/ld+json Content-Language Describes the language(s) for which the requested resource is intended. en-US <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 200 The request to retrieve the Logistics Object has been successful Audit Trail 301 The URI of the Logistics Object has permanently changed. No response body 302 The URI of the Logistics Object has temporarily moved. No response body 401 Not authenticated Error 403 Not authorized to retrieve the Logistics Object Audit Trail Error 404 Logistics Object not found Error 415 Unsupported Content Type Error 500 Internal Server Error Error"},{"location":"API-Security/logistics-objects/#security_3","title":"Security","text":"<p>To engage with the \"Get Audit Trail of a Logistics Object\" endpoint, a client needs proper authentication and authorization to access the designated resource. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status. Conversely, for requests without proper authorization, a <code>403 \"Not Authorized\"</code> response should be provided.</p> <p>The authorization to access the audit trail should be derived from the logistics objects. However, the implementor of a ONE Record server can decide to separate the control access between a logistics object and its audit trail.</p> <p>Note</p> <p>The Audit trail comprehensively documents the chronological history of a logistics object. Individuals with access to the audit trail are able to view the complete evolution of the logistics object over time. Due to this, it is imperative for the implementer of the ONE Record server to exercise caution when granting access to this particular resource.</p>"},{"location":"API-Security/logistics-objects/#example-d1","title":"Example D1","text":"<p>The following example shows an AuditTrail including a ChangeRequest. </p> <p>Request:</p> <pre><code>GET /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c/audit-trail HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json\nAccept: application/ld+json\n</code></pre> <p>Response:</p> <p><pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json\nContent-Language: en-US\n\n{\n  \"@context\": {\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n    \"api\": \"https://onerecord.iata.org/ns/api#\"\n  },\n  \"@type\": \"api:AuditTrail\",\n  \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c/audit-trail\",\n  \"api:hasChangeRequest\": [\n    {\n      \"@type\": \"api:ChangeRequest\",\n      \"@id\": \"https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99b\",\n      \"api:hasChange\": {\n      ...this contains a complete Change object...\n      },\n      \"api:hasError\": [],      \n      \"api:isRequestedAt\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2020-09-07T11:55:45.768Z\"\n      },\n      \"api:isRequestedBy\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\",\n      \"api:hasRequestStatus\": {\n        \"@id\": \"api:REQUEST_STATUS_ACCEPTED\"\n      }\n    }\n  ],\n  \"api:hasLatestRevision\": {\n    \"@type\": \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\n    \"@value\": \"2\"\n  }\n}\n</code></pre> (AuditTrail.json)</p>"},{"location":"API-Security/logistics-objects/#example-d2","title":"Example D2","text":"<p>An example of an AuditTrail with ChangeRequests with Errors, e.g. the revision of the Logistics Object used in the submitted Change is outdated</p> <p>Request:</p> <pre><code>GET /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c/audit-trail HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json\nAccept: application/ld+json\n</code></pre> <p>Response:</p> <p><pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json\nContent-Language: en-US\n\n{\n  \"@context\": {\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n    \"api\": \"https://onerecord.iata.org/ns/api#\"\n  },\n  \"@type\": \"api:AuditTrail\",\n  \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c/audit-trail\",\n  \"api:hasChangeRequest\": [\n    {\n      \"@type\": \"api:ChangeRequest\",\n      \"@id\": \"https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99b\",\n      \"api:hasChange\": {\n      ...this contains a complete Change object...\n      },\n      \"api:hasError\": [\n        {\n          \"@type\": \"api:Error\",\n          \"@id\": \"https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99b/errors/98843671-388c-53c6-ba79-7be266f61aa0\",\n          \"api:hasTitle\": \"LogisticsObject revision does not match\",\n          \"api:hasErrorDetail\": [\n            {\n              \"@type\": \"api:ErrorDetail\",\n              \"@id\": \"_:b1\",\n              \"api:hasCode\": \"409\",\n              \"api:hasMessage\": \"LogisticsObject revision does not match\",\n              \"api:hasResource\": \"http://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n            }\n          ]\n        }\n      ],\n      \"api:isRequestedAt\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2020-09-07T11:55:45.768Z\"\n      },\n      \"api:isRequestedBy\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\",\n      \"api:hasRequestStatus\": {\n        \"@id\": \"api:REQUEST_STATUS_REJECTED\"\n      }\n    }\n  ],\n  \"api:hasLatestRevision\": {\n    \"@type\": \"http://www.w3.org/2001/XMLSchema#positiveInteger\",\n    \"@value\": \"2\"\n  }\n}\n</code></pre> (AuditTrail_example2.json)</p>"},{"location":"API-Security/logistics-objects/#retrieve-a-historical-logistics-object","title":"Retrieve a historical Logistics Object","text":"<p>In ONE Record, data is updated in real time and every time a ChangeRequest is applied successfully, a new version of the Logistics Object and only the latest content is available via its URI. However, there is a need to retrieve a specific version of a data object at a specific point in time, for example the Master Air Waybill (MAWB).</p> <p>Note</p> <p>Reverting to a previous version of a Logistics Object with PATCH is not supported as out of scope of ONE Record.</p> <p>An ONE Record server MUST enable the ONE Record client to request an historical version of a Logistics Object using the <code>?at=</code> query parameter of the Logistics Object GET endpoint. This <code>?at=</code> parameter MUST accept past datetime strings in ISO 8601 UTC using the following format: <code>YYYYMMDDThhmmssZ</code></p> <p>Example: https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c?at=20190926T075830Z</p> <p>This datetime value MUST be in the past. If this parameter is before the creation date of the Logistics Object, <code>404 Not Found</code> is returned. If this parameter is in the future, <code>400 Bad Request</code> is returned.</p> <p>To ensure consistency when following the linked objects in a response, all linked Logistics Object, i.e. their Logistics Object URIs. in the response body MUST also contain the <code>?at=</code>query parameter with the same provided datetime value.</p> <p>To retrieve an historical logistic object we use the \"Get a logistics object\" endpoint. Additional information on how to perform a correct request can be found in the section \"Get a logistics object\".</p>"},{"location":"API-Security/logistics-objects/#example-e1","title":"Example E1","text":"<p>Request:</p> <pre><code>GET /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c?at=20190926T075830Z HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json\nAccept: application/ld+json\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json\nContent-Language: en-US\nLocation: https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c?at=20190926T075830Z\nType: https://onerecord.iata.org/ns/cargo#Piece\nRevision: 3\nLatest-Revision: 4\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"@language\": \"en-US\"\n    },\n    \"@type\": \"cargo:Piece\",\n    \"@id\": \" https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c?at=20190926T075830Z\",\n    \"cargo:coload\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#boolean\",\n        \"@value\": \"true\"\n    },\n    \"cargo:goodsDescription\": \"ONE Record Advertisement Materials\",\n    \"cargo:specialHandlingCodes\": [\n        {\n            \"@id\": \"https://onerecord.iata.org/ns/coreCodeLists#SpecialHandlingCode_VAL\"\n        }\n    ],\n    \"cargo:customsInformation\": [\n        {\n            \"@type\": \"cargo:CustomsInformation\",\n            \"@id\": \"https://1r.example.com/logistics-objects/4d73acf0-3073-4ec9-8aee-b82d64ba3805?at=20190926T075830Z\"\n        },\n        {\n            \"@type\": \"cargo:CustomsInformation\",\n            \"@id\": \"https://1r.example.com/logistics-objects/ba1c2194-2442-400b-b26b-466a01dda8b5?at=20190926T075830Z\"\n        }\n    ]\n}\n</code></pre> <p>(Piece_with_id.json)</p>"},{"location":"API-Security/notifications/","title":"Notifications","text":"<p>ONE Record utilizes a Publish &amp; Subscribe pattern to enable exchanging data updates in a distributed network of ONE Record compliant platforms.</p> <p>A key pillar of the implementation of this concept is asynchronous communication via HTTP.  To enable asynchronous communication via HTTP, every ONE Record server MUST provide a Notification REST API endpoint that can be used by ONE Record clients to submit Notifications about data changes and updates.</p> <p>This chapter describes the the requirements of a Notifications API which a ONE Record server MUST implement (1) to receive information about new created or updated Logistics Objects, (2) or to receive status updates of action requests from other ONE Record nodes.</p> <p>For the former, the initialization of this data exchange channel is described in the Subscription chapter. The latter is set up when notifyRequestStatusChange is set to <code>true</code> in the request for a Change, AccessDelegation , or Subscription.</p> <p>Guidelines for Notifications in ONE Record:</p> <ul> <li>Every ONE Record server MUST implement a Notifications endpoint to receive data from ONE Record clients</li> <li>The ONE Record Notifications endpoint MUST be accessible to any authenicated ONE Record client</li> <li>The ONE Record Notificatons endpoint MUST expect a Notification object in the POST request body</li> <li>The ONE Record Notificatons MUST respond with a HTTP response when it receives the Notification</li> <li>The ONE Record Notificatons MUST support HTTP 1.1</li> <li>The ONE Record Notificatons MUST support TLS 1.2</li> </ul> <p>Notification Data Model</p> <p>The Notification is a data class of the ONE Record API ontology. The properties and relationships to other data classes are visualized in the following class diagram.</p> <pre><code>    classDiagram\n\n    direction LR   \n\n    class LogisticsObject{                \n    }\n\n    class Organization{        \n    }  \n\n    class ActionRequest {\n        &lt;&lt;Abstract&gt;&gt;         \n        + hasError[]: Error [*]\n        + isRequestedAt: xsd:dateTime         \n        + isRequestedBy: Organization            \n        + isRevokedBy: Organization \n        + hasRequestStatus: RequestStatus = REQUEST_PENDING\n        + revokedAt: xsd:dateTime                 \n    }\n    ActionRequest &lt;|-- AccessDelegationRequest\n    ActionRequest &lt;|-- ChangeRequest\n    ActionRequest &lt;|-- SubscriptionRequest\n\n    ActionRequest \"1\" --&gt; \"1..*\" Organization : requestedBy    \n    ActionRequest --&gt; RequestStatus                \n    ActionRequest \"1\" --&gt; \"1..*\" Organization : revokedBy\n\n    class Notification{\n        + hasChangedProperty[]: xsd:anyURI [*]        \n        + hasEventType: NotificationEventType\n        + isTriggeredBy: ActionRequest [0..1]  \n        + hasLogisticsObject: LogisticsObject [0..1]\n        + hasLogisticsObjectType: xsd:anyURI [0..1]     \n    }\n    Notification \"1\"--&gt; \"0..1\" LogisticsObject\n    Notification \"1\" --&gt; \"1\" NotificationEventType\n    Notification \"1\" --&gt; \"0..1\" ActionRequest  \n\n    class NotificationEventType{\n        &lt;&lt;Enumeration&gt;&gt;\n        LOGISTICS_OBJECT_CREATED\n        LOGISTICS_OBJECT_UPDATED\n\n        LOGISTICS_EVENT_RECEIVED\n\n        CHANGE_REQUEST_PENDING\n        CHANGE_REQUEST_ACCEPTED                \n        CHANGE_REQUEST_REJECTED\n        CHANGE_REQUEST_FAILED        \n        CHANGE_REQUEST_REVOKED\n\n\n        ACCESS_DELEGATION_REQUEST_PENDING\n        ACCESS_DELEGATION_REQUEST_ACCEPTED                \n        ACCESS_DELEGATION_REQUEST_REJECTED\n        ACCESS_DELEGATION_REQUEST_FAILED\n        ACCESS_DELEGATION_REQUEST_REVOKED\n\n        SUBSCRIPTION_REQUEST_PENDING\n        SUBSCRIPTION_REQUEST_ACCEPTED                \n        SUBSCRIPTION_REQUEST_REJECTED\n        SUBSCRIPTION_REQUEST_FAILED\n        SUBSCRIPTION_REQUEST_REVOKED\n    }\n\n    class RequestStatus{\n        &lt;&lt;Enumeration&gt;&gt;\n        REQUEST_PENDING\n        REQUEST_ACCEPTED\n        REQUEST_REJECTED\n        REQUEST_FAILED\n        REQUEST_REVOKED        \n    }</code></pre>"},{"location":"API-Security/notifications/#send-notification","title":"Send Notification","text":""},{"location":"API-Security/notifications/#endpoint","title":"Endpoint","text":"<pre><code> POST {{baseURL}}/notifications\n</code></pre>"},{"location":"API-Security/notifications/#request","title":"Request","text":"<p>The following HTTP header parameters MUST be present in the request:</p> Header Description Examples Accept The content type in which the ONE Record client wants the HTTP response formatted. application/ld+json <p>The HTTP body must contain a valid Notification in the format as specified by the Content-Type in the header.</p> <p>The publisher sends a notification request to the subscriber when a logistics object is created or updated.  If the subscriber chose to receive the entire logistics object body via sendLogisticsObjectBody=true field, then the whole object is sent.</p> <p>Note</p> <p>If the embedded object of a LogisticsObject changed, the Notification#hasChangedProperty will contain the IRI of the embeddedObject, for example:  The hasGrossWeight property - which is of type Value - of a Piece is changed via ChangeRequest, the hasChangedProperty of the Notification will contain https://onerecord.iata.org/ns/cargo#hasGrossWeight</p>"},{"location":"API-Security/notifications/#response","title":"Response","text":"<p>One of the following HTTP status codes MUST be present in the response:</p> Code Description Response body 204 The request has been successful - 400 Notification format is invalid Error 401 Not authenticated, invalid or expired token Error 403 \u00a0    Not authorized to perform action Error 404 \u00a0    Resource Not Found Error 405 \u00a0    Method not allowed Error 415 \u00a0    Unsupported content type Error 500 \u00a0    Internal Server Error Error <p>A successful request MUST return a <code>HTTP/1.1 204 No Content</code> status code.</p>"},{"location":"API-Security/notifications/#security","title":"Security","text":"<p>To engage with the \"Send Notifications\" endpoint, a client needs to be authenticated. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status.</p>"},{"location":"API-Security/notifications/#example-1a","title":"Example 1A","text":"<p>The following example shows a <code>LOGISTICS_OBJECT_CREATED</code> Notification without the content of the object,  because <code>sendLogisticsObjectBody</code> in Subscription is set to <code>False</code>.</p> <p>Request:</p> <p><pre><code>POST /notifications HTTP/1.1\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {        \n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Notification\",    \n    \"api:hasEventType\": {\n        \"@id\": \"api:LOGISTICS_OBJECT_CREATED\"\n    },\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    },\n    \"api:hasLogisticsObjectType\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n        \"@value\": \"https://onerecord.iata.org/ns/cargo#Piece\"\n    },\n    \"api:isTriggeredBy\": {\n        \"@id\": \"https://1r.example.com/action-requests/599fea49-7287-42af-b441-1fa618d2aaed\"\n    }\n}\n</code></pre> (Notification_example1.json)</p> <p>Response: <pre><code>HTTP/1.1 204 No Content\n</code></pre></p>"},{"location":"API-Security/notifications/#example-1b","title":"Example 1B","text":"<p>The following example shows a <code>LOGISTICS_OBJECT_CREATED</code> Notification with the content of the object,  because <code>sendLogisticsObjectBody</code> in Subscription is set to <code>True</code>.</p> <p><pre><code>POST /notifications HTTP/1.1\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Notification\",\n    \"api:hasEventType\": {\n        \"@id\": \"api:LOGISTICS_OBJECT_CREATED\"\n    },\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c\",\n        \"@type\": \"cargo:Shipment\",\n        \"cargo:goodsDescription\": \"Lots of awesome ONE Record information materials\",\n        \"cargo:pieces\": [{\n            \"@type\": \"cargo:Piece\",\n            \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n        }]\n    }, \n    \"api:hasLogisticsObjectType\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n        \"@value\": \"https://onerecord.iata.org/ns/cargo#Shipment\"\n    },   \n    \"api:isTriggeredBy\": {\n        \"@id\": \"https://1r.example.com/action-requests/599fea49-7287-42af-b441-1fa618d2aaed\"\n    }\n}\n</code></pre> (Notification_example2.json)</p> <p>Response: <pre><code>HTTP/1.1 204 No Content\n</code></pre></p>"},{"location":"API-Security/notifications/#example-1c","title":"Example 1C","text":"<p>The following example shows a <code>LOGISTICS_OBJECT_UPDATED</code> Notification without the content of the object,  because <code>sendLogisticsObjectBody</code> in Subscription is set to <code>False</code>. <pre><code>POST /notifications HTTP/1.1\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {        \n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Notification\",\n    \"api:hasChangedProperty\": [\n        \"https://onerecord.iata.org/ns/cargo#grossWeight\"\n    ],\n    \"api:hasEventType\": {\n        \"@id\": \"api:LOGISTICS_OBJECT_UPDATED\"\n    },\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    },\n    \"api:hasLogisticsObjectType\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n        \"@value\": \"https://onerecord.iata.org/ns/cargo#Piece\"\n    },\n    \"api:isTriggeredBy\": {\n        \"@id\": \"https://1r.example.com/action-requests/599fea49-7287-42af-b441-1fa618d2aaed\"\n    }\n}\n</code></pre> (Notification_example3.json)</p> <p>Response: <pre><code>HTTP/1.1 204 No Content\n</code></pre></p>"},{"location":"API-Security/notifications/#example-1d","title":"Example 1D","text":"<p>The following example shows a <code>LOGISTICS_EVENT_RECEIVED</code> Notification after a LogisticsEvent is submitted.  </p> <p>Note</p> <p>Notifications will be triggered for the creation of a new Logistics Event on a Logistics Object solely when the subscription property 'includeSubscriptionEventType' contains the value 'LOGISTICS_EVENT_RECEIVED'. On the contrary, this notification will be omitted.</p> <p><pre><code>POST /notifications HTTP/1.1\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {        \n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Notification\",\n    \"api:hasEventType\": {\n        \"@id\": \"api:LOGISTICS_EVENT_RECEIVED\"\n    },\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b3c\"\n    },\n    \"api:hasLogisticsObjectType\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n        \"@value\": \"https://onerecord.iata.org/ns/cargo#Shipment\"\n    } \n}\n</code></pre> (Notification_example4.json)</p> <p>Response: <pre><code>HTTP/1.1 204 No Content\n</code></pre></p>"},{"location":"API-Security/notifications/#example-1e","title":"Example 1E","text":"<p>The following example shows a <code>CHANGE_REQUEST_ACCEPTED</code> Notification after the ChangeRequest is accepted by the holder of the logistics object.</p> <p><pre><code>POST /notifications HTTP/1.1\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {        \n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Notification\",\n    \"api:hasEventType\": {\n        \"@id\": \"api:CHANGE_REQUEST_ACCEPTED\"\n    },\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    },\n    \"api:hasLogisticsObjectType\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n        \"@value\": \"https://onerecord.iata.org/ns/cargo#Shipment\"\n    },\n    \"api:isTriggeredBy\": {\n        \"@id\": \"https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99b\"\n    }\n}\n</code></pre> (Notification_example5.json)</p> <p>Response: <pre><code>HTTP/1.1 204 No Content\n</code></pre></p>"},{"location":"API-Security/server-information/","title":"Server Information","text":""},{"location":"API-Security/server-information/#get-server-information","title":"Get Server Information","text":"<p>As a ONE Record client, it is helpful to know the capabilities of a ONE Record server and to be able to retrieve this information in a systematic way. Therefore, every ONE Record server MUST provide an endpoint that can be used to retrieve this technical server information. This <code>ServerInformation</code> include details about the ONE Record server's ONE Record capabilities, the data holder (as a link to an Organization using the Organization URI), the supported Logistics Object types (incl. data model versions) and the supported serialization formats.</p> <p>The ServerInformation is a data class of the ONE Record API ontology. The properties and relationships to other data classes are visualized in the following class diagram.</p> <pre><code>classDiagram   \n    direction LR   \n\n    class Organization{        \n    }  \n\n    class ServerInformation{\n        + hasDataHolder: Organization                \n        + hasServerEndpoint: xsd:anyURI        \n        + hasSupportedApiVersion[]: xsd:string [1..*]\n        + hasSupportedContentType[]: xsd:string [1..*]        \n        + hasSupportedEncoding[]: xsd:string [*]\n        + hasSupportedLanguage[]: xsd:string [1..*]\n        + hasSupportedOntology[]: xsd:anyURI [1..*]\n        + hasSupportedOntologyVersion[]: xsd:anyURI [1..*]\n    }        \n    ServerInformation \"1\" --&gt; \"1\" Organization</code></pre>"},{"location":"API-Security/server-information/#endpoint","title":"Endpoint","text":"<pre><code> GET {{baseURL}}/\n</code></pre>"},{"location":"API-Security/server-information/#request","title":"Request","text":"<p>The following HTTP header parameters MUST be present in the request:</p> Request Header Description Examples Accept The content type that you want the HTTP response to be formatted in. application/ld+json"},{"location":"API-Security/server-information/#response","title":"Response","text":"<p>One of the following HTTP status codes MUST be present in the response:</p> Code Description Response body 200 The request to retrieve the ServerInformation has been successful ServerInformation 301 \u00a0    Indicate that the server has moved permanently to a new location No response body 401 \u00a0    Not authenticated or expired token Error 403 \u00a0    Not authorized to perform action Error 404 \u00a0    Resource Not Found Error 405 \u00a0    Method not allowed Error 415 \u00a0    Unsupported content type Error 500 \u00a0    Internal Server Error Error <p>A successful request MUST return a <code>HTTP/1.1 200 OK</code> status code and the following HTTP headers parameters MUST be present in the response:</p> Response Header Description Example Content-Type The content type that is contained with the HTTP body. application/ld+json Content-Language Describes the language(s) for which the requested resource is intended. en-US Last-Modified The date and time of the most recent change to the server information. See https://developer.mozilla.org/en-US/docs/Web/ Tue, 21 Feb 2023 07:28:00 GMT <p>The HTTP body must contain a valid ServerInformation object in the format as specified by the Content-Type in the header.</p>"},{"location":"API-Security/server-information/#security","title":"Security","text":"<p>Any authenticated ONE Record client that is aware of this endpoint should have the capability to request Server Information from the ONE Record server. Therefore, access control should not be applied to this endpoint, and authentication alone should suffice.</p>"},{"location":"API-Security/server-information/#example-a1","title":"Example A1","text":"<p>Request:</p> <pre><code>GET / HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <p><pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@id\": \"https://1r.example.com/\",\n    \"@type\": \"api:ServerInformation\",\n    \"api:hasDataHolder\": {\n        \"@type\": \"cargo:Company\",\n        \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n    },\n    \"api:hasServerEndpoint\": \"http://1r.example.com\",\n    \"api:hasSupportedApiVersion\": [\n        \"2.0.0-dev\"\n    ],\n    \"api:hasSupportedContentType\": [\n        \"application/ld+json\"\n    ],\n    \"api:hasSupportedLanguage\": [\n        \"en-US\"\n    ],    \n    \"api:hasSupportedOntology\": [\n        \"https://onerecord.iata.org/ns/cargo/3.0.0\",\n        \"https://onerecord.iata.org/ns/api/2.0.0-dev\"\n    ]\n}\n</code></pre> (ServerInformation.json)</p>"},{"location":"API-Security/server-information/#example-a2","title":"Example A2","text":"<p>Request:</p> <pre><code>GET / HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 301 Moved Permanently\nLocation: https://1r.example.org/\n</code></pre>"},{"location":"API-Security/subscriptions/","title":"Subscriptions","text":""},{"location":"API-Security/subscriptions/#publish-subscribe-in-one-record","title":"Publish &amp; Subscribe in ONE Record","text":"<p>ONE Record utilizes a publish &amp; subscribe pattern to enable exchanging data updates in a distributed network of ONE Record nodes. More precisely, In ONE Record, so-called Notification data objects are exchanged  between applications to inform other ONE Record nodes about data updates. </p> <p>This chapter describes the publish &amp; subscribe concept and how it MUST be implemented in ONE Record.</p> <p>Note</p> <p>Receiving data updates (via notifications) from other ONE Record nodes requires implementation of the Notifications API endpoint  (see Notifications)</p> <p>Guidelines for Subscriptions in ONE Record:</p> <ul> <li>A Subscription MUST be immutable (unchangeable object), i.e. a Subscription cannot be changed after it is created and published.</li> <li>Updating a Subscription requires to delete/revoke the active Subscription and create a new Subscription that MUST be communicated to other ONE Record nodes.</li> <li>The publisher of a Notification MUST ensure the guaranteed delivery.</li> <li>It is RECOMMENDED to implement for each subscriber and each topic a message queue that is maintained by the publisher. While in transit, data is kept in message queues that ensure integrity and availability of the system. If a subscribing application is unavailable, messages are safely retained until the subscribing application returns to be available.</li> <li>The publisher MUST ensure the guaranteed delivery. That means keeping data until the subscriber confirms it has received a particular Notification. </li> </ul> <p>Subscription Data Model</p> <p>The Subscription and SubscriptionRequest are data classes of the ONE Record API ontology. The properties and relationships to other data classes are visualized in the following class diagram.</p> <pre><code>classDiagram\n    direction LR\n\n    class Organization{\n    }\n\n    class SubscriptionRequest{\n        + hasSubscription: Subscription\n    }   \n    SubscriptionRequest \"1\" --&gt; \"1\" Subscription\n\n    class Subscription{        \n        + hasContentType[]: xsd:string [*]\n        + hasDescription: xsd:string [0..1]\n        + expiresAt: xsd:dateTime [0..1]                                \n        + hasSubscriber: Organization        \n        + hasTopicType: TopicType        \n        + notifyRequestStatusChange: xsd:boolean = FALSE\n        + sendLogisticsObjectBody: xsd:boolean = FALSE \n        + includeSubscriptionEventType[]: SubscriptionEventType [1..*]     \n        + hasTopic: xsd:anyURI        \n    }    \n    Subscription \"1\" --&gt; \"1\" Organization: hasSubscriber\n    Subscription --&gt; TopicType\n    Subscription \"1\" --&gt; \"1..*\" SubscriptionEventType\n\n    class TopicType{\n        &lt;&lt;Enumeration&gt;&gt;\n        LOGISTICS_OBJECT_TYPE\n        LOGISTICS_OBJECT_IDENTIFIER\n    }\n\n    class SubscriptionEventType{\n        &lt;&lt;Enumeration&gt;&gt;\n        LOGISTICS_OBJECT_CREATED\n        LOGISTICS_OBJECT_UPDATED\n        LOGISTICS_EVENT_RECEIVED\n    }</code></pre> <p>Two scenarios were identified for initiating the publish/subscribe process:</p> <p>1) Publisher initiates Subscription:  After creating and publishing an Logistics Object, the publisher wants to subscribe another organization to receive Notifications about the newly created Logistics Object.</p> <p>2) Subscriber initiates Subscription:  An organization wants to receive Notifications about a specific Logistics Object or a type of Logistics Objects.</p> <p>Both scenarios are described with examples below. For simplicity reasons, the security part was not detailed in the following diagrams.</p>"},{"location":"API-Security/subscriptions/#get-subscription-information-as-publisher","title":"Get Subscription information as Publisher","text":"<p>If the publisher of a Logistics Object - also called <code>Holder of the Logistics Object</code> - wants to subscribe a user of a Logistics Object - also called <code>Subscriber</code> in this scenario  - to send Notifications about data updates and/or Logistics Events, the publisher can request the potential subscriber to provide subscription information. </p> <p>There are two different forms of this scenario:</p> <ul> <li>The publisher wants to notify the subscriber about changes to Logistics Objects of a certain type (e.g. Waybill or Piece)</li> <li>The publisher wants to notify the subscriber about changes to a specific Logistics Object, e.g. https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c</li> </ul> <p></p> <p>Workflow</p> <p>As result, for both scenarios the interaction between two ONE Record participants follows the following workflow:</p> <pre><code>sequenceDiagram\n\n  participant PUB as Publisher\n  participant SUB as Subscriber\n\n  PUB-&gt;&gt;+SUB: (1) Request subscription information for specific Logistics Object or Logistics Object type&lt;br&gt; GET /subscriptions HTTP/1.1\n  SUB--&gt;&gt;-PUB: (2) Returning Subscription objects&lt;br&gt; HTTP/1.1 OK&lt;br&gt;Subscription\n\n  note over PUB, SUB: After Subscription initiation\n  PUB-&gt;&gt;SUB: (3) Send Notifications about data updates and events&lt;br&gt; POST /notifications HTTP/1.1</code></pre> <p>(Optional) Step 0 - Create and Publish a Logistics Object</p> <p>This step is optional, because a subscription MUST also be possible for already existing Logistics Objects.</p> <p>Step 1 - Retrieve Subscription information</p> <p>The publisher MAY propose a Subscription to a subscriber by requesting the Subscription information from the potential subscriber.  The publisher sends a GET request to the subscriptions endpoint of a Subscriber with the proposed Logistics Object type or a specific Logistics Object URI using the query parameters <code>topicType</code> and <code>topic</code>. If the subscription proposal targets a specific Logistics Object, the subscribers MUST set the topicType=LOGISTICS_OBJECT_IDENTIFIER and provide an accessible Logistics Object URI as <code>topic</code> parameter. Example:</p> <pre><code>GET /subscriptions?topicType=https://onerecord.iata.org/ns/api%23LOGISTICS_OBJECT_IDENTIFIER&amp;topic=https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Step 2 - Acknowledge Subscription request In order to acknowledge a proposal the subscriber response to the request with the Subscription information. Example: <pre><code>HTTP/1.1 200 OK \nContent-Type: application/ld+json; version=2.0.0-dev\nContent-Language: en-US\n\n{\n  \"@context\": {\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n    \"api\": \"https://onerecord.iata.org/ns/api#\"\n  },\n  \"@id\": \"https://1r.example.com/subscriptions/5f1a4869-e324-45b1-9ab0-60271ba54185\",\n  \"@type\": \"api:Subscription\",\n  \"api:hasContentType\": \"application/ld+json\",\n  \"api:hasSubscriber\": {\n    \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n  },\n  \"api:hasTopicType\": {\n    \"@id\": \"api:LOGISTICS_OBJECT_IDENTIFIER\"\n  },\n  \"api:includeSubscriptionEventType\": [\n    {\n      \"@id\": \"api:LOGISTICS_OBJECT_UPDATED\"\n    },\n    {\n      \"@id\": \"api:LOGISTICS_OBJECT_CREATED\"\n    },\n    {\n      \"@id\": \"api:LOGISTICS_EVENT_RECEIVED\"\n    }\n  ],\n  \"api:hasTopic\": {\n    \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n    \"@value\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n  }\n}\n</code></pre></p> <p>(Subscriptions_example1.json)</p> <p>It is the responsibility of the publisher to check the response, i.e. to compare the requested topic/topicType with the topic/topicType in the returned Subscription data object.</p> <p>The publisher uses the response to store it in a SubscriptionRequest, which can later be referenced in Notifications (cf. isTriggeredBy property in Notification) and used to revoke the subscription. For example, the URI of the newly created SubscriptionRequest could be https://1r.example.com/action-requests/599fea49-7287-42af-b441-1fa618d2aaee</p> <p>The publisher MUST ensure that the subscriber gets sufficient access to the resulted SubscriptionRequest to request the status of the SubscriptionRequest and can revoke AccessDelegationRequest (see also section about revoking Action Requests</p> <p>Here an example of a SubscriptionRequest:</p> <pre><code>{\n    \"@context\": {\n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:SubscriptionRequest\",\n    \"@id\": \"https://1r.example.com/action-requests/599fea49-7287-42af-b441-1fa618d2aaee\",\n    \"api:hasSubscription\": {\n        \"@id\": \"https://1r.example.com/subscriptions/5f1a4869-e324-45b1-9ab0-60271ba54185\",\n        \"@type\": \"api:Subscription\",\n        \"api:hasContentType\": \"application/ld+json\",\n        \"api:hasSubscriber\": {\n            \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n        },\n        \"api:hasTopicType\": {\n            \"@id\": \"api:LOGISTICS_OBJECT_IDENTIFIER\"\n        },\n        \"api:includeSubscriptionEventType\": [\n            {\n                \"@id\": \"api:LOGISTICS_OBJECT_UPDATED\"\n            },\n            {\n                \"@id\": \"api:LOGISTICS_OBJECT_CREATED\"\n            },\n            {\n                \"@id\": \"api:LOGISTICS_EVENT_RECEIVED\"\n            }\n        ],\n        \"api:hasTopic\": {\n            \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n            \"@value\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n          }\n    },\n    \"api:isRequestedBy\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n    },\n    \"api:hasRequestStatus\": {\n        \"@id\": \"api:REQUEST_PENDING\"\n    },\n    \"api:isRequestedAt\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#dateTime\",\n        \"@value\": \"2023-04-20T10:38:01.000Z\"\n    }\n}\n</code></pre> <p>(SubscriptionRequest_example.json)</p> <p>Note</p> <p>The @id found in the subscription details provided by the Subscriber is not mandatory, but it can serve as a means for the Subscriber to manage various subscriptions. The Subscriber has the freedom to determine the format of this identifier. To access the SubscriptionRequest, both the Subscriber and the Publisher must utilize the id assigned by the Publisher for the SubscriptionRequest (https://1r.example.com/action-requests/599fea49-7287-42af-b441-1fa618d2aaee in the example), rather than the id of the Subscription.</p> <p>Step 3 - Send Notification to Subscribers</p> <p>Once the subscription information is received the publisher sends notifications to the subscriber using the details provided.  If a subscriber was not available at the time, then the publisher MUST need to queue and retry to notify the Subscriber. Example:</p> <p><pre><code>POST /notifications HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {        \n        \"api\": \"https://onerecord.iata.org/ns/api#\"\n    },\n    \"@type\": \"api:Notification\",    \n    \"api:hasEventType\": {\n        \"@id\": \"api:LOGISTICS_OBJECT_CREATED\"\n    },\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    },\n    \"api:hasLogisticsObjectType\": {\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n        \"@value\": \"https://onerecord.iata.org/ns/cargo#Piece\"\n    },\n    \"api:isTriggeredBy\": {\n        \"@id\": \"https://1r.example.com/action-requests/599fea49-7287-42af-b441-1fa618d2aaed\"\n    }\n}\n</code></pre> (Notification_example1.json)</p> <p>Note</p> <p>Notifications will be triggered for the creation of a new Logistics Event on a Logistics Object solely when the subscription property 'includeSubscriptionEventType' contains the value 'LOGISTICS_EVENT_RECEIVED'. On the contrary, this notification will be omitted.</p>"},{"location":"API-Security/subscriptions/#endpoint","title":"Endpoint","text":"<pre><code> GET {{baseURL}}/subscriptions?topicType={{topicType}}&amp;topic={dataclass/logisticObjectURI}}\n</code></pre>"},{"location":"API-Security/subscriptions/#request","title":"Request","text":"<p>The following HTTP query parameters MUST be supported:</p> Query parameter Description Valid values / Examples topicType Used by the publisher to specify if Subscription information for a specific Logistics Object or a data class should be in the response body. When passed in a URL, the topicType must be URL encoded (i.e <code>#</code> becomes <code>%23</code> or can be replaced with <code>/</code>) <ul><li>https://onerecord.iata.org/ns/api#LOGISTICS_OBJECT_TYPE</li><li>https://onerecord.iata.org/ns/api#LOGISTICS_OBJECT_IDENTIFIER</li></ul> topic Used by the publisher to specify the data class or Logistics Object URI the Subscription information should be related to. topic MUST be a valid URI <ul><li>https://onerecord.iata.org/ns/cargo#Piece</li><li>https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c</li></ul> <p>The following HTTP header parameters MUST be present in the request:</p> Header Description Examples Accept The content type that a ONE Record client wants the HTTP response to be formatted in. This SHOULD include the version of the ONE Record API, otherwise the latest supported ONE Record API MAY be applied. <ul><li>application/ld+json</li><li>application/ld+json; version=2.0.0-dev</li><li>application/ld+json; version=1.2</li></ul>"},{"location":"API-Security/subscriptions/#response","title":"Response","text":"<p>A successful request MUST return a <code>HTTP/1.1 200 OK</code> status code.  The body of the response includes the list of subscriptions in the RDF serialization format that has been requested in the <code>Accept</code> header of the request. This list of subscriptions MAY also be empty.</p> <p>The following HTTP headers parameters MUST be present in the response:</p> Header Description Example Content-Type The content type that is contained with the HTTP body. application/ld+json Content-Language Describes the language(s) for which the requested resource is intended. en-US <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 200 The request to retrieve the Subscription Information has been successful Subscriptions 400 The request is invalid Error 401 Not authenticated Error 403 Not authorized to retrieve the Subscription Information Error 500 Internal Server Error Error"},{"location":"API-Security/subscriptions/#security","title":"Security","text":"<p>To engage with the \"Get Subscription\" endpoint, a client needs proper authentication. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status.</p>"},{"location":"API-Security/subscriptions/#example-a1","title":"Example A1","text":"<p>Request subscription information for specific Logistics Object URI.</p> <p>Request:</p> <pre><code>GET /subscriptions?topicType=https://onerecord.iata.org/ns/api%23LOGISTICS_OBJECT_IDENTIFIER&amp;topic=https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 200 OK \nContent-Type: application/ld+json; version=2.0.0-dev\nContent-Language: en-US\n\n{\n  \"@context\": {\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n    \"api\": \"https://onerecord.iata.org/ns/api#\"\n  },\n  \"@id\": \"https://1r.example.com/subscriptions/5f1a4869-e324-45b1-9ab0-60271ba54185\",\n  \"@type\": \"api:Subscription\",\n  \"api:hasContentType\": \"application/ld+json\",\n  \"api:hasSubscriber\": {\n    \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n  },\n  \"api:hasTopicType\": {\n    \"@id\": \"api:LOGISTICS_OBJECT_IDENTIFIER\"\n  },\n  \"api:includeSubscriptionEventType\": [\n    {\n      \"@id\": \"api:LOGISTICS_OBJECT_UPDATED\"\n    },\n    {\n      \"@id\": \"api:LOGISTICS_OBJECT_CREATED\"\n    },\n    {\n      \"@id\": \"api:LOGISTICS_EVENT_RECEIVED\"\n    }\n  ],\n  \"api:hasTopic\": {\n    \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n    \"@value\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n  }\n}\n</code></pre> <p>(Subscriptions_example1.json)</p>"},{"location":"API-Security/subscriptions/#example-a2","title":"Example A2","text":"<p>Request subscription information for a Logistics Object type</p> <p>Request:</p> <pre><code>GET /subscriptions?topicType=https://onerecord.iata.org/ns/api%23LOGISTICS_OBJECT_TYPE&amp;topic=https://onerecord.iata.org/ns/cargo#Shipment\nHost: 1r.example.com\nContent-Type: application/ld+json; version=2.0.0-dev\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 200 OK \nContent-Type: application/ld+json; version=2.0.0-dev\nContent-Language: en-US\n\n{\n  \"@context\": {\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n    \"api\": \"https://onerecord.iata.org/ns/api#\",\n    \"publisher\": \"https://1r.example.com/\",\n    \"subscriber\": \"https://1r.example.com/\"\n  },\n  \"@id\": \"publisher:subscriptions/5f1a4869-e324-45b1-9ab0-60271ba54185\",\n  \"@type\": \"Subscription\",\n  \"api:contentType\": \"application/ld+json\",\n  \"api:hasSubscriber\": {\n    \"@id\": \"subscriber:logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n  },\n  \"api:includeSubscriptionEventType\": [\n    {\n      \"@id\": \"api:LOGISTICS_OBJECT_UPDATED\"\n    },\n    {\n      \"@id\": \"api:LOGISTICS_OBJECT_CREATED\"\n    },\n    {\n      \"@id\": \"api:LOGISTICS_EVENT_RECEIVED\"\n    }\n  ],\n  \"api:hasTopicType\": {\n    \"@id\": \"api:LOGISTICS_OBJECT_TYPE\"\n  },\n  \"api:hasTopic\": {\n    \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n    \"@value\": \"https://onerecord.iata.org/ns/cargo#Shipment\"\n  }\n}\n</code></pre> <p>(Subscriptions_example2.json)</p>"},{"location":"API-Security/subscriptions/#example-a3","title":"Example A3","text":"<p>Request subscription information for a not supported Logistics Object type</p> <p>Request:</p> <pre><code>GET /subscriptions?topicType=https://onerecord.iata.org/ns/api%23LOGISTICS_OBJECT_TYPE&amp;topic=https://onerecord.iata.org/ns/cargo#ForkLift\nHost: 1r.example.com\nAccept: application/ld+json\n</code></pre> <p>Response:</p> <p><pre><code>HTTP/1.1 400 Bad Request \nContent-Type: application/ld+json; version=2.0.0-dev\nContent-Language: en-US\n\n{\n    \"@context\": {\n       \"api\": \"https://onerecord.iata.org/ns/api#\",\n       \"@language\": \"en-US\"\n    },\n    \"@type\": \"api:Error\",\n    \"@id\": \"_:b0\",\n    \"api:hasTitle\": \"Logistics Object Type not supported\",\n    \"api:hasErrorDetail\": [{\n       \"@type\": \"api:ErrorDetail\",\n       \"@id\": \"_:b1\",\n       \"api:hasCode\": \"400\",\n       \"api:hasMessage\": \"Provided Logistics Object Type is not supported\"\n    }]\n }\n</code></pre> (Subscriptions_example3_Error_400.json)</p>"},{"location":"API-Security/subscriptions/#example-a4","title":"Example A4","text":"<p>Required parameter <code>topic=</code> is missing in the HTTP query parameters.</p> <p>Request:</p> <pre><code>GET /subscriptions?topicType=https://onerecord.iata.org/ns/api%23LOGISTICS_OBJECT_TYPE\nHost: 1r.example.com\nAccept: application/ld+json\n</code></pre> <p>Response:</p> <p><pre><code>HTTP/1.1 400 Bad Request \nContent-Type: application/ld+json; version=2.0.0-dev\nContent-Language: en-US\n\n{\n    \"@context\": {\n       \"api\": \"https://onerecord.iata.org/ns/api#\",\n       \"@language\": \"en-US\"\n    },\n    \"@type\": \"api:Error\",\n    \"@id\": \"_:b0\",\n    \"api:hasTitle\": \"Missing query parameter\",\n    \"api:hasErrorDetail\": [{\n       \"@type\": \"api:ErrorDetail\",\n       \"@id\": \"_:b1\",\n       \"api:hasCode\": \"400\",\n       \"api:hasMessage\": \"The required query parameter `topic` is missing.\"\n    }]\n }\n</code></pre> (Subscriptions_example3_Error_400_example2.json)</p>"},{"location":"API-Security/subscriptions/#subscribe-to-logistics-objects","title":"Subscribe to Logistics Objects","text":"<p>In the second scenario, the subscriber initiates the subscription process by actively sending subscription information to the publisher.  The subscription information can either specify a type of Logistics Object or a specific Logistics Object. The publisher creates a SubscriptionRequest from the submitted Subscription.</p> <pre><code>  sequenceDiagram\n\n  participant SUB as Subscriber\n  participant PUB as Publisher\n\n  SUB-&gt;&gt;+PUB: Subscribe to either a concrete Logistics Objector a Logistics Object type &lt;br&gt; POST /subscriptions HTTP/1.1\n  PUB--&gt;&gt;-SUB: Acknowledge Subscription request and return location of SubscriptionRequest&lt;br&gt;HTTP/1.1 204 No Content &lt;br&gt; Location: &lt;URI of SubscriptionRequest&gt;\n\n  note over PUB, SUB: After subscription proposal process\n  PUB-&gt;&gt;SUB: Send Notifications about data updates and events&lt;br&gt; POST /notifications HTTP/1.1</code></pre> <p>The ONE Record server must validate that : - the <code>topicType</code> is one of the types described in the ONE Record API ontology - the <code>topic</code> is a valid Logistics Object (i.e. https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c)or a supported Logistics Objects type (i.e https://onerecord.iata.org/ns/cargo#Shipment)</p> <p>The Callback URL can be derived from the Organization IRI provided in the <code>hasSubscriber</code> property of the body request.</p>"},{"location":"API-Security/subscriptions/#endpoint_1","title":"Endpoint","text":"<pre><code> POST {{baseURL}}/subscriptions\n</code></pre>"},{"location":"API-Security/subscriptions/#request_1","title":"Request","text":"<p>The following HTTP header parameters MUST be present in the request:</p> Header Description Examples Accept The content type that a ONE Record client wants the HTTP response to be formatted in. This SHOULD include the version of the ONE Record API, otherwise the latest supported ONE Record API MAY be applied. <ul><li>application/ld+json</li><li>application/ld+json; version=2.0.0-dev</li><li>application/ld+json; version=1.2</li></ul> Content-Type The content type that is contained with the HTTP body. Valid content types. application/ld+json <p>The HTTP body must contain a valid Subscription object in the format as specified by the Content-Type in the header.</p>"},{"location":"API-Security/subscriptions/#response_1","title":"Response","text":"<p>A successful request MUST return a <code>HTTP/1.1 201 Created</code> status code and the following HTTP headers parameters MUST be present in the response:</p> Header Description Examples Location The URI of the newly created Logistics Object https://1r.example.com/action-requests/599fea49-7287-42af-b441-1fa618d2aaed Type The type of the newly created Logistics Object as a URI https://onerecord.iata.org/ns/api#SubscriptionRequest <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 201 Subscription Request has been created No response body 400 Bad Request Error 401 Not authenticated Error 403 Not authorized Error 415 Unsupported Content Type Error 500 Internal Server Error Error"},{"location":"API-Security/subscriptions/#security_1","title":"Security","text":"<p>To engage with the \"Get Subscription\" endpoint, a client needs proper authentication. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status.</p>"},{"location":"API-Security/subscriptions/#example-b1","title":"Example B1","text":"<p>Request subscription for a specific Logistics Object URI.</p> <p>Request:</p> <p><pre><code>POST /subscriptions HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\nContent-Type: application/ld+json; version=2.0.0-dev\n\n{\n  \"@context\": {\n    \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n    \"api\": \"https://onerecord.iata.org/ns/api#\"\n  },\n  \"@type\": \"api:Subscription\",\n  \"api:hasContentType\": \"application/ld+json\",\n  \"api:hasSubscriber\": {\n    \"@id\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\"\n  },\n  \"api:hasTopicType\": {\n    \"@id\": \"api:LOGISTICS_OBJECT_IDENTIFIER\"\n  },\n  \"api:includeSubscriptionEventType\": [\n    {\n      \"@id\": \"api:LOGISTICS_OBJECT_UPDATED\"\n    },\n    {\n      \"@id\": \"api:LOGISTICS_OBJECT_CREATED\"\n    },\n    {\n      \"@id\": \"api:LOGISTICS_EVENT_RECEIVED\"\n    }\n  ],\n  \"api:hasTopic\": {\n    \"@type\": \"http://www.w3.org/2001/XMLSchema#anyURI\",\n    \"@value\": \"https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n  }\n}\n</code></pre> (Subscription_example1.json)</p> <p>Response:</p> <pre><code>HTTP/1.1 201 Created\nLocation: https://1r.example.com/action-requests/599fea49-7287-42af-b441-1fa618d2aaed\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/api#SubscriptionRequest\n</code></pre>"},{"location":"API-Security/subscriptions/#subscriptions-with-3rd-parties","title":"Subscriptions with 3rd parties","text":"<p>It is feasible to initiate a subscription on behalf of a third party. In such instances, the individual making the request will differ from the individual intended to receive the notifications.</p> <p>The entity responsible for implementing the ONE Record Server is obligated to establish a mechanism to verify the legitimacy of the intended recipient for receiving these notifications. There are scenarios where the implementor might choose to disallow this capability and verify that the authenticated user matches the intended receiver.</p> <p>Note</p> <p>Notifications are sent to the subscriber's Notification endpoint. It MUST be assumed that the subscriber performs the internal forwarding of the received notifications to the backend systems or third parties for further processing.</p>"},{"location":"API-Security/subscriptions/#unsubscribe","title":"Unsubscribe","text":"<p>Due to changing information needs, a subscribed user of a logistics object may no longer wish to receive notifications of logistics object updates.  To unscribe, an active Subscriber MUST revoke a SubscriptionRequest.  This is explained in the Revoke Action Request section.</p> <p>The  ActionRequest URI required for the Revocation is  provided to the User with the isTriggeredBy  property in the Notification) data object. Or it is given to the user in the HTTP response header <code>Location</code> to the subscription request.</p>"},{"location":"API-Security/verifications/","title":"Verifications","text":"<p>Note</p> <p>This page is a Draft and it's not approved by the COTB</p> <p>In addition to allowing third parties to propose modifications to specific properties of a LogisticsObject  (See Update a Logistics Object),  the ONE Record standard provides a solution for flagging anomalies, missing properties, or errors within these objects  through a procedure called <code>VerificationRequest</code>.</p> <p>Error Handling with Verification Request</p> <p>The following diagram illustrates a basic data exchange process between a forwarder and a carrier, focusing on error handling using a Verification Request.  The forwarder creates a LogisticsObject of type Shipment and  notifies the carrier. Upon receiving the shipment, the carrier identifies any discrepancies in the goods description and reports these issues back to the forwarder  using by sending a Verification  object. The forwarder creates a  VerificationRequest linking the Verification object sent  by the carrier. Depending on the case, the forwarder acknowledges or rejects the Verification Request.</p> <pre><code>sequenceDiagram\n    participant Forwarder\n    participant Carrier\n\n    Forwarder-&gt;&gt;Forwarder: Create shipment LogisticsObject on its ONE Record server\n    Forwarder-&gt;&gt;Carrier: Notify about the creation of the shipment using notification endpoint\n    Carrier-&gt;&gt;Carrier: Review the shipment object and identify issues in goods description\n    Carrier-&gt;&gt;Forwarder: Request a verification of the incorrect goods description property\n    Forwarder--&gt;&gt;Carrier: Response with link to VerificationRequest object\n    Forwarder-&gt;&gt;Forwarder: Acknowledge VerificationRequest and rectify the shipment object\n    Forwarder-&gt;&gt;Carrier: Notify about the update of the shipment </code></pre> <p>Guidelines for Verifications in ONE Record:</p> <ul> <li>The hasLogisticsObject and the hasRevision allows the party to target a specific version of a logistics object</li> <li>The hasError property is an array of Error objects. As in all other Action Requests, notifyRequestStatusChange allows to receive notification on status change.</li> <li>Each issue or anomaly on a specific logistics object will be incapsulated into a Error object which contains two attributes: HasTitle and HasErrorDetail. </li> <li>Should users need to convey a specific message, indicate a particular property, or transmit an error code, they can utilize the ErrorDetail object for this purpose.</li> </ul>"},{"location":"API-Security/verifications/#request-verification","title":"Request Verification","text":""},{"location":"API-Security/verifications/#endpoint","title":"Endpoint","text":"<pre><code>POST {{baseURL}}/logistics-objects/{{logisticsObjectId}}\n</code></pre>"},{"location":"API-Security/verifications/#request","title":"Request","text":"<p>The following HTTP header parameters MUST be present in the POST request:</p> Request Header Description Examples Accept The content type that you want the HTTP response to be formatted in. application/ld+json Content-Type The content type that is contained with the HTTP body. application/ld+json <p>The HTTP request body must contain a valid Verification object in the format as specified by the Content-Type in the header.</p> <p>The Verification is a data classes of the ONE Record API ontology. The properties and relationships to other data classes are visualized in the following class diagram.</p> <pre><code>    classDiagram\n\n    direction LR   \n\n    class LogisticsObject{                \n    }\n\n    class Error{        \n        + hasErrorDetail[]: ErrorDetail [1..*]\n        + hasTitle: xsd:string\n    }\n    Error \"1\" --&gt; \"*\" ErrorDetail\n\n    class ErrorDetail{\n        + hasCode: xsd:string  [0..1] [0..1]\n        + hasMessage: xsd:string [0..1]\n        + hasProperty: xsd:anyURI [0..1]\n        + hasResource: xsd:anyURI [0..1]\n    }\n\n\n    class Verification{      \n        + hasLogisticsObject: LogisticsObject\n        + hasError[]: Error[1..*]        \n        + hasRevision: xsd:positiveInteger        \n        + notifyRequestStatusChange: xsd:boolean = FALSE\n    }\n    Verification \"1\" --&gt; \"1\" LogisticsObject\n    Verification \"1\" --&gt; \"1..*\" Error</code></pre>"},{"location":"API-Security/verifications/#response","title":"Response","text":"<p>A successful request MUST return a <code>`HTTP/1.1 201 Created</code> status code and the following HTTP headers parameters MUST be present in the response:</p> Header Description Example Location The URI of the newly created VerificationRequest https://1r.example.com/action-requests/6b948f9b-b812-46ed-be39-4501453da99b Type The type of the newly created resource as a URI https://onerecord.iata.org/ns/api#VerificationRequest <p>Otherwise, an <code>Error</code> object with <code>ErrorDetail</code> as response body MUST be returned with the following HTTP headers:</p> Header Description Example Content-Type The content type that is contained with the HTTP body. application/ld+json Content-Language Describes the language(s) for which the requested resource is intended. en-US <p>The following HTTP status codes MUST be supported:</p> Code Description Response body 201 The change request was correctly created No body required 400 The verification request body is invalid Error 401 Not authenticated Error 403 Not authorized to update the Logistics Object Error 404 Logistics Object not found Error 415 Unsupported Content Type, response when the client sends a POST document format that the server does not support for the resource identified by the Request-URI. Error 422 Unprocessable request, when the server understands the POST document and the syntax of the POST document appears to be valid, but the server is incapable of processing the request. Error"},{"location":"API-Security/verifications/#security","title":"Security","text":"<p>To engage with the \"Verification\" endpoint, a client needs proper authentication. If requests lack proper authentication, the ONE Record server should respond with a <code>401 \"Not Authenticated\"</code> status.</p>"},{"location":"API-Security/verifications/#example-a1","title":"Example A1","text":"<p>A carrier identifies an issue on a Piece with the URI https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c</p> <p>Request: </p> <p><pre><code>POST /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nContent-Type: application/ld+json; version=2.0.0-dev\nAccept: application/ld+json; version=2.0.0-dev\n\n{\n    \"@context\": {\n        \"cargo\": \"https: //onerecord.iata.org/ns/cargo#\",\n        \"api\": \"https: //onerecord.iata.org/ns/api#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema\"\n    },\n    \"@type\": \"api:Verification\",\n    \"api:hasLogisticsObject\": {\n        \"@id\": \"https: //1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\"\n    },\n    \"api:hasError\": [{\n            \"@type\": \"api:Error\",\n            \"api:hasTitle\": \"The gross weight is missing\",\n            \"api:hasErrorDetail\": {\n                \"@type\": \"api:ErrorDetail\",\n                \"api:hasCode\": \"AWB07\",\n                \"api:hasMessage\": \"weight code\",\n                \"api:hasProperty\": {\n                    \"@value\": \"https: //onerecord.iata.org/ns/cargo#grossWeight\",\n                    \"@type\": \"xsd:anyURI\"\n                }\n            }\n        }, {\n            \"@type\": \"api:Error\",\n            \"api:hasTitle\": \"Empty goodsDescription. Please use goodsDescription to specify the description of the cargo\",\n            \"api:hasErrorDetail\": {\n                \"@type\": \"api:ErrorDetail\",\n                \"api:hasProperty\": {\n                    \"@value\": \"https: //onerecord.iata.org/ns/cargo#goodsDescription\",\n                    \"@type\": \"xsd:anyURI\"\n                }\n            }\n        }\n    ],\n    \"api:hasRevision\": {\n        \"@type\": \"http: //www.w3.org/2001/XMLSchema#positiveInteger\",\n        \"@value\": \"1\"\n    }\n}\n</code></pre> (Verification.json)</p> <p>Response: <pre><code>HTTP/1.1 201 Created\nLocation: https://1r.example.com/action-requests/e4cf1ea5-96fc-4025-be21-159b779e3200\nContent-Type: application/ld+json; version=2.0.0-dev\nType: https://onerecord.iata.org/ns/api#VerificationRequest\n</code></pre></p> <p>see also Example A2 in Action Requests for an example of a Verification Request.</p>"},{"location":"API-Security/verifications/#open-issues-discussions","title":"Open Issues &amp; Discussions","text":""},{"location":"API-Security/verifications/#audit-trail-update","title":"Audit Trail update","text":"<p>Note</p> <p>(under discussion). see Introduction of VerificationRequest #218</p> <p>For full transparency, all VerificationRequest objects MUST be linked in the AuditTrail. For this reason the hasChangeRequest in the audit trail should be renamed into hasActionRequest and it should contains both Verification Requests and Change Requests.</p>"},{"location":"API-Security/verifications/#changerequest-update","title":"ChangeRequest update","text":"<p>Note</p> <p>(under discussion). see Introduction of VerificationRequest #218</p> <p>In order to reference a VerificationRequest while requesting a Change (see Update a Logistics Object, we would like to add a new optional property in the Change object: - hasVerificationRequest : link to the VerificationRequest that caused the change.</p>"},{"location":"API-Security/assets/ONE-Record-API-Class-Diagram/","title":"ONE Record API Class Diagram","text":""},{"location":"API-Security/assets/ONE-Record-API-Class-Diagram/#one-record-api-class-diagram","title":"ONE Record API Class Diagram","text":"<p>Version: 2.0.0 Status: Endorsed by COTB on December 2023</p> <pre><code>classDiagram   \n    direction LR   \n\n    class LogisticsObject{                \n    }\n\n    class Organization{        \n    }  \n\n    class AccessDelegation{\n        + hasDescription: xsd:string [0..1]\n        + hasPermission[]: Permission [1..*]                \n        + isRequestedFor[]: Organization [1..*]\n        + notifyRequestStatusChange: xsd:boolean = FALSE\n        + hasLogisticsObject[]: LogisticsObject [1..*]        \n    }\n\n    AccessDelegation \"1\" --&gt; \"1..*\" Permission   \n    AccessDelegation \"1\" --&gt; \"1..*\" Organization: requestedFor\n    AccessDelegation \"1\" --&gt; \"1..*\" LogisticsObject\n\n    class ActionRequest {\n        &lt;&lt;Abstract&gt;&gt;         \n        + hasError[]: Error [*]\n        + isRequestedAt: xsd:dateTime         \n        + isRequestedBy: Organization            \n        + isRevokedBy: Organization [0..1]\n        + hasRequestStatus: RequestStatus = REQUEST_PENDING\n        + isRevokedAt: xsd:dateTime [0..1]                 \n    }\n    ActionRequest &lt;|-- AccessDelegationRequest\n    ActionRequest &lt;|-- ChangeRequest\n    ActionRequest &lt;|-- SubscriptionRequest\n\n    ActionRequest \"1\" --&gt; \"0..*\" Error     \n    ActionRequest \"1\" --&gt; \"1..*\" Organization : requestedBy    \n    ActionRequest --&gt; RequestStatus                \n    ActionRequest \"1\" --&gt; \"1..*\" Organization : revokedBy\n\n    class AccessDelegationRequest{\n        + hasAccessDelegation: AccessDelegation        \n    }\n    AccessDelegationRequest \"1\" --&gt; \"1\" AccessDelegation    \n\n    class ChangeRequest{        \n        + hasChange: Change        \n    }\n    ChangeRequest \"1\" --&gt; \"1\" LogisticsObject\n    ChangeRequest \"1\" --&gt; \"1\" Change\n\n    class SubscriptionRequest{\n        + hasSubscription: Subscription\n    }   \n    SubscriptionRequest \"1\" --&gt; \"1\" Subscription\n\n    class AuditTrail{                \n        + hasChangeRequest[]: ChangeRequest [*]                \n        + hasLatestRevision: xsd:positiveInteger       \n    }\n    AuditTrail \"1\" --&gt; \"*\" ChangeRequest\n\n    class Change{    \n        + hasDescription: xsd:string [0..1]    \n        + hasOperation[]: Operation [1..*]        \n        + hasLogisticsObject: LogisticsObject\n        + hasRevision: xsd:positiveInteger        \n        + notifyRequestStatusChange: xsd:boolean = FALSE\n    }\n    Change \"1\" --&gt; \"1\" LogisticsObject\n    Change \"1\" --&gt; \"1..*\" Operation\n\n    class Collection{    \n        + hasItem: Object [0..*]\n        + hasTotalItems: xsd:nonNegativeInteger [0..1]    \n    }\n\n    class Error{        \n        + hasErrorDetail[]: ErrorDetail [1..*]\n        + hasTitle: xsd:string\n    }\n    Error \"1\" --&gt; \"*\" ErrorDetail\n\n    class ErrorDetail{\n        + hasCode: xsd:string  [0..1]\n        + hasMessage: xsd:string [0..1]\n        + hasProperty: xsd:anyURI [0..1]\n        + hasResource: xsd:anyURI [0..1]\n    }\n\n    class Notification{\n        + hasChangedProperty[]: xsd:anyURI [*]        \n        + hasEventType: NotificationEventType\n        + isTriggeredBy: ActionRequest [0..1]  \n        + hasLogisticsObject: LogisticsObject [0..1]\n        + hasLogisticsObjectType: xsd:anyURI [0..1]            \n    }\n    Notification \"1\"--&gt; \"0..1\" LogisticsObject\n    Notification \"1\" --&gt; \"1\" NotificationEventType\n    Notification \"1\" --&gt; \"0..1\" ActionRequest    \n\n    class Operation{\n        + o: OperationObject\n        + op: PatchOperation\n        + p: xsd:anyURI\n        + s: xsd:string\n    }\n    Operation \"1\" --&gt; \"1\" OperationObject\n    Operation --&gt; PatchOperation\n\n    class OperationObject{\n        + hasDatatype: xsd:anyURI\n        + hasValue: xsd:string   \n    }\n\n    class ServerInformation{\n        + hasDataHolder: Organization                \n        + hasServerEndpoint: xsd:anyURI        \n        + hasSupportedApiVersion[]: xsd:string [1..*]\n        + hasSupportedContentType[]: xsd:string [1..*]        \n        + hasSupportedEncoding[]: xsd:string [*]\n        + hasSupportedLanguage[]: xsd:string [1..*]\n        + hasSupportedOntology[]: xsd:anyURI [1..*]\n        + hasSupportedOntologyVersion[]: xsd:anyURI [1..*]\n    }    \n    ServerInformation \"1\" --&gt; \"1\" Organization\n\n    class Subscription{        \n        + hasContentType[]: xsd:string [*]\n        + hasDescription: xsd:string [0..1]\n        + expiresAt: xsd:dateTime [0..1]                                \n        + hasSubscriber: Organization        \n        + hasTopicType: TopicType  \n        + notifyRequestStatusChange: xsd:boolean = FALSE      \n        + sendLogisticsObjectBody: xsd:boolean = FALSE        \n        + includeSubscriptionEventType[]: SubscriptionEventType [1..*]\n        + hasTopic: xsd:anyURI        \n    }    \n    Subscription \"1\" --&gt; \"1\" Organization: hasSubscriber\n    Subscription --&gt; TopicType\n    Subscription \"1\" --&gt; \"1..*\" SubscriptionEventType\n\n    class NotificationEventType{\n        &lt;&lt;Enumeration&gt;&gt;\n        LOGISTICS_OBJECT_CREATED\n        LOGISTICS_OBJECT_UPDATED\n\n        LOGISTICS_EVENT_RECEIVED\n\n        CHANGE_REQUEST_PENDING\n        CHANGE_REQUEST_ACCEPTED                \n        CHANGE_REQUEST_REJECTED\n        CHANGE_REQUEST_FAILED        \n        CHANGE_REQUEST_REVOKED\n\n\n        ACCESS_DELEGATION_REQUEST_PENDING\n        ACCESS_DELEGATION_REQUEST_ACCEPTED                \n        ACCESS_DELEGATION_REQUEST_REJECTED\n        ACCESS_DELEGATION_REQUEST_FAILED\n        ACCESS_DELEGATION_REQUEST_REVOKED\n\n        SUBSCRIPTION_REQUEST_PENDING\n        SUBSCRIPTION_REQUEST_ACCEPTED                \n        SUBSCRIPTION_REQUEST_REJECTED\n        SUBSCRIPTION_REQUEST_FAILED\n        SUBSCRIPTION_REQUEST_REVOKED\n    }\n    class PatchOperation{\n        &lt;&lt;Enumeration&gt;&gt;\n        ADD\n        DELETE\n    }\n    class Permission{\n        &lt;&lt;Enumeration&gt;&gt;                \n        GET_LOGISTICS_EVENT\n        GET_LOGISTICS_OBJECT\n        PATCH_LOGISTICS_OBJECT        \n        POST_LOGISTICS_EVENT        \n    }\n    class TopicType{\n        &lt;&lt;Enumeration&gt;&gt;\n        LOGISTICS_OBJECT_TYPE\n        LOGISTICS_OBJECT_URI\n    }\n    class RequestStatus{\n        &lt;&lt;Enumeration&gt;&gt;\n        REQUEST_PENDING\n        REQUEST_ACCEPTED\n        REQUEST_REJECTED\n        REQUEST_FAILED\n        REQUEST_REVOKED        \n    }\n    class SubscriptionEventType{\n        &lt;&lt;Enumeration&gt;&gt;\n        LOGISTICS_OBJECT_CREATED\n        LOGISTICS_OBJECT_UPDATED\n\n        LOGISTICS_EVENT_RECEIVED\n    }</code></pre>"},{"location":"API-Security/security/access-control/","title":"Access Control","text":"<p>In ONE Record, access to resources can be specified by using Access Control Lists (ACLs) associated to specific Logistics Objects. Each Logistics Object resource possesses a related ACL containing a set of Authorization statements that describe:</p> <ul> <li>who has access to that resource;</li> <li>what types (or modes) of access they have.</li> </ul> <p>Each Authorization is a single rule for access, such as \"entities one and two may write to Logistics Object logisticObjectRef\", described with a set of RDF properties.</p> <p>ONE Record recommends the use of the ACL ontology in order to express the Authorizations. As the ACL is specific to each ONE Record Server and it is not a mandatory requirement to make it available to external entities, any other kind of data model/ontology can be used instead.</p>"},{"location":"API-Security/security/access-control/#permissions","title":"Permissions","text":"Permission Description GET_LOGISTICS_OBJECT Authorized to retrieve the content of a LogisticsObject PATCH_LOGISTICS_OBJECT Authorized to request a change of a Logistics Object POST_LOGISTICS_EVENT Authorized to add a Logistics Event to a LogisticsObject GET_LOGISTICS_EVENT Authorized to retrieve the details of a LogisticsEvent <p>Rules and recommendations related to Access Control:</p> <ul> <li>No Access Control Lists on property level</li> <li>Access Control MUST be on Logistics Object level</li> <li>Every ONE Record server MUST support at least the following permissions: GET_LOGISTICS_OBJECT, PATCH_LOGISTICS_OBJECT, POST_LOGISTICS_EVENT, GET_LOGISTICS_EVENT</li> <li>Each ONE Server MUST deny access to certain operations by default. Therefore, if an access permission is not explicitly set, a requesting ONE Record client MUST NOT be allowed to perform the respective operations until the permission is granted. If an operation is attempted to be performed and the permissions for that operation have not been granted, the ONE Record server MUST return a <code>403 Forbidden</code> HTTP error.</li> <li>The ONE Record API specification does not define a specific model for ACL, but suggests the utilization of Access Control Ontology defined by W3C.</li> </ul> <p>Authenticated access is similar to public access, but it is not anonymous.  Therefore, access is granted only to ONE Record clients that have authenticated and have an organizational URI to be identifiable.  In this way, a ONE Record server can track resource access and usage.</p> <p>In ONE Record, access to resources MAY be handled by using Access Control Lists (ACLs) stored in the backend systems of the ONE Record Servers and defined using the Web Access Control standard from W3C.</p>"},{"location":"API-Security/security/access-control/#web-access-control-and-access-control-list-acl","title":"Web Access Control and Access Control List (ACL)","text":"<p>According to W3C specifications, Web Access Control it is a standard that enforces access control based on the Access Control List (ACL) RDF resource associated with the requested resource.  It's concerned with giving access to agents (users, groups and more) to perform various kinds of operations (read, write, append, etc) on resources.  In Web Access Control, an ACL consists of a set of Authorizations.  Each Authorization is a single rule for access, such as \"entities A and B may write to resource C\", described with a set of RDF properties.</p> <p>In the context of ONE Record, three types of authorization can be identified:</p> <ol> <li>Single Authorization \u2013 when a single organization (identified by its Organization URI) from the ONE Record network has access to a Logistics Object.</li> <li>Group Authorization \u2013 when a group of organizations has access to the Logistics Object. The ONE Record Server can define internally groups of access such as Airlines, Ground Handlers, Customs, etc.</li> <li>Public Authorization \u2013 when every authenticated organization can access the Logistics Object URI can retrieve the data.</li> </ol> <p>The implementor of ONE Record server MUST implement Single Authorization and Public Authorization while Group Authorization is RECOMMENDED.</p>"},{"location":"API-Security/security/authn-application-layer/","title":"Authentication & Authorization","text":"<p>The authentication mechanism employed by ONE Record servers adheres to the OpenID Connect standard. To authenticate successfully, a party must possess an ID Token issued by an authorized identity provider (IdP). This page provides an explanation of OpenID Connect and its application within the network of ONE Record servers (ONE Record network).</p>"},{"location":"API-Security/security/authn-application-layer/#openid-connect","title":"OpenID Connect","text":"<p>OpenID Connect (OIDC) is an interoperable authentication protocol based on the OAuth 2.0 framework of specifications (IETF RFC 6749 and RFC 6750). It allows third-party applications to verify the identity of the end-user and to obtain basic user profile information. OIDC uses JSON web tokens (JWTs), which you can obtain using flows conforming to the OAuth 2.0 specifications. To know more about OIDC see https://openid.net/.</p> <p>The ONE Record server employs the OpenID Connect standard to authenticate other servers within the network.</p>"},{"location":"API-Security/security/authn-application-layer/#openid-connect-roles","title":"OpenID Connect Roles","text":"<p>OpenID Connect outlines various actors that play specific and distinct roles in the authentication and authorization process. In the context of the ONE Record servers network, our focus will be on the main roles that hold significance.</p> <ul> <li> <p>Client Application: The client represents a ONE Record server that wants to access an external resouce (i.e a logistics object situated on a different ONE Record server). In this page, a client application is referred as ONE Record client</p> </li> <li> <p>Identity Provider: The Identity Provider (IdP) holds the responsibility of authenticating a ONE Record server. It verifies the server's identity and generates an ID token that the requesting server can utilize for authentication within the ONE Record network.</p> </li> <li> <p>Resource Server: The Resource Server is the host of protected resources that a ONE Record server aims to access. In the ONE Record context, these resources may include logistics objects, logistics events, and more. In this page, a resource server is referred as ONE Record Server.</p> </li> </ul> <p>It's essential to understand that OpenID Connect is built on top of OAuth 2.0, which provides the framework for token-based authentication and authorization. OpenID Connect adds an authentication layer and standardizes the exchange of identity information, making it easier for ONE Record servers to authenticate other servers in the network.</p>"},{"location":"API-Security/security/authn-application-layer/#openid-connect-grant-types","title":"OpenId Connect Grant Types","text":"<p>OpenID Connect (OIDC) defines various grant types that facilitate secure authentication and authorization processes in web and mobile applications. These grant types determine how tokens are exchanged between the involved parties. The \"Authorization Code\" grant type is widely used and involves the exchange of an authorization code for access tokens, enhancing security by keeping tokens away from the client. The \"Implicit\" grant type is suitable for browser-based applications, providing access tokens directly, while the \"Client Credentials\" grant type is employed by confidential clients to authenticate themselves and obtain access tokens directly from the authorization server. Lastly, the \"Refresh Token\" grant type enables the renewal of access tokens without requiring users to reauthenticate, improving user experience and security.</p> <p>It is important to node that these grants define only the authentication procedure while the authorization to access specific resources is handled with Access Contol Lists.</p> <p>The server's implementer holds the authority to select the preferred grant type. However, the JSON Web Token MUST follow the specifications defined in the JWT section. Within this page, a demonstration of the \"Client Credential\" grant type will be showcased, noted for its suitability in facilitating machine-to-machine interactions. </p>"},{"location":"API-Security/security/authn-application-layer/#json-web-token","title":"JSON Web Token","text":"<p>A JSON Web Token (JWT), pronounced \"jot,\" is an established standard RFC 7519 that defines a concise and self-contained method for securely exchanging data in the form of a JSON object between different parties. It is essential to understand that while all JWTs are tokens, not all tokens necessarily follow the JWT standard.</p> <p>Due to its compact nature, a JWT can be easily conveyed via a URL, as a POST parameter, or within an HTTP header, ensuring swift transmission. Within a JWT, all pertinent details about an entity are included, eliminating the need for multiple database queries. Furthermore, the recipient of a JWT can verify the token's authenticity without having to contact a server.</p> <p>The structure of a JWT consists of three parts separated by dots ('.'). These parts are:</p> <ul> <li>Header</li> <li>Payload</li> <li>Signature</li> </ul> <p>Example JWT Token: <pre><code>xxxx.yyyy.zzzz\n</code></pre></p>"},{"location":"API-Security/security/authn-application-layer/#header","title":"Header","text":"<p>The header generally consists of two components: the token type (JWT) and the cryptographic signing algorithm employed, like HMAC SHA256 or RSA SHA256. However, additional properties are allowed according to the JSON Web Signature (JWS) standard</p> <p>Example header: <pre><code>{\n  \"alg\": \"RS256\",\n  \"typ\": \"JWT\",\n  \"jku\": \"https://auth.example.com/.well-known/jwks.json\",\n  \"kid\":\"NjVBRjY5MDlCMUIwNzU4RTA2QzZFMDQ4QzQ2MDAyQjVDNjk1RTM2Qh\",\n}\n</code></pre> The header in the example declares that the encoded object is a JWT and it's signed with RSA SHA256 algorithm. The optional \"jku\" and \"kid\" Header parameter contains informaion about the public key that matches the key used to digitally sign the JWS. The key is represented as a JSON Web Key (JWK).</p> <p>In order to be compliant with ONE Record specification, the JWT token must contains the \"alg\" and the \"typ\". The other header parameter are optional but can be used to enhance the authentication process.</p>"},{"location":"API-Security/security/authn-application-layer/#payload","title":"Payload","text":"<p>The payload contains the claims, which are statements about the ONE Record client server or other data. The claims are divided into three types:</p> <ul> <li> <p>Registered claims: These are predefined claims that are not mandatory but recommended. They include information such as the issuer (iss), subject (sub), audience (aud) and expiration time (exp). Additional registered claims can be found in the RFC7519 specification</p> </li> <li> <p>Public claims: JWT users have the freedom to define public claims according to their requirements. However, to prevent conflicts, it is recommended to either register these public claims in the IANA JSON Web Token Registry or define them using a URI with a namespace that can withstand collisions.</p> </li> <li> <p>Private claims: These are custom claims that are meant to be shared and used between specific parties. These claims are not part of registered or public claims</p> </li> </ul> <p>Example payload:</p> <pre><code>{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n</code></pre>"},{"location":"API-Security/security/authn-application-layer/#signature","title":"Signature","text":"<p>The signature is generated by combining the encoded header, encoded payload, and a secret key (or private key in the case of RSA) using the signing algorithm specified in the header. The signature is used to verify that the token hasn't been tampered with during transmission and that it comes from a trusted source.</p> <p>Example signature: <pre><code>RSASHA256(base64UrlEncode(header) + \".\" + base64UrlEncode(payload), PUBLIC_KEY, PRIVATE_KEY )\n</code></pre> The example shows how to generate a signature. The signature will be then encoded in base64 and added at the end of the JWT token, as explained in the section above.</p>"},{"location":"API-Security/security/authn-application-layer/#json-web-token-claims","title":"JSON Web Token Claims","text":"<p>JSON Web Tokens (JWTs) consist of claims, which are statements providing information about a particular subject. As explained in the previous section, claims are store in the payload of the JWT token. Despite the fact that claims are optional, in ONE Record network, a JWT token must carry the following claims:</p> <ul> <li>\"iss\" (Issuer) Claim : The \"iss\" (issuer) claim identifies the principal that issued the JWT.</li> <li>\"exp\" (Expiration Time) Claim : The \"exp\" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing.</li> <li>\"logistics_agent_uri\" Claim : The \"logistics_agent_uri\" claim carries the URI of a cargo:LogisticAgent and which identifies the logistics agent in the ONE Record network. </li> </ul> <pre><code>{\n  \"iss\": \"https://auth.example.com\",\n  \"logistics_agent_uri\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\",\n  \"exp\": \"2023-03-031T10:38:01.000Z\"  \n}\n</code></pre> <p>The \"iss\" must be present to allowed multiple IdP in the network while the \"exp\" is necessary to define the expiration time of the ID token.  The \"logistics_agent_uri\" is necessary for authenticate the party and it's used to fill the <code>isRequestedBy</code> property in action requests. Other claims can be added to the JWT Token according to the IdP configuration but might not be used by the ONE Record server.</p>"},{"location":"API-Security/security/authn-application-layer/#validate-json-web-tokens","title":"Validate JSON Web Tokens","text":"<p>Validation of JSON Web Tokens should be done using third party libraries that supports the signing algorithm of the JWT Token. It is strongly advised to avoid manually validating JWTs, as it can be error-prone and might overlook critical aspects, resulting in severe security vulnerabilities. Fortunately, there are various JWT libraries available for different platforms and programming languages that handle JWT validation automatically. To find a suitable JWT library for your specific platform and programming language, you can visit JWT.io.</p>"},{"location":"API-Security/security/authn-application-layer/#json-web-key-sets","title":"JSON Web Key Sets","text":"<p>The JSON Web Key Set (JWKS) is a collection of keys that includes the public keys required to validate any JSON Web Token (JWT) issued by the Identity Provider (IdP) and signed using the RS256 signing algorithm. For every tenant, OIDC provides a JWKS endpoint accessible at https://{yourDomain}/.well-known/jwks.json. This endpoint contains the JSON Web Key (JWK) required to validate all JWTs issued by OIDC for that specific tenant. For more information about JWKS, please refer to the specification RFC7517.</p> <p>IATA mantains a page with the list of authorized IdP together with:</p> <ul> <li>the url to request a token.</li> <li>the url to refresh a token.</li> <li>the location of the JSON Web Key Set. </li> </ul> <p>Any trusted IdP must immediately communicate any setup change to IATA.</p>"},{"location":"API-Security/security/authn-application-layer/#example-client-credential-grant","title":"Example - Client Credential Grant","text":"<p>In this section, a example of the Client Credential grant will be demostrated in the context of ONE Record.</p> <p>The OIDC Client Credential Flow can be used to secure machine-to-machine (m2m) communications, where a software program, rather than a user, needs to be authenticated. In this type of grant, the client credentials are verified and an ID Token is generated. This ID token is provided in a form of a signed JSON Web Token (JWT). Any ONE Record Server can verify the authenticity of the JWT token, and so the identity of the client server, using JWKS provided by the IdP without the need of a new API call.</p>"},{"location":"API-Security/security/authn-application-layer/#flow-diagram","title":"Flow Diagram","text":"<p>The following diagram shows a generic implementation of the Client Credential Flow :</p> <pre><code>sequenceDiagram\n    participant CA as Client Application (One Record Client)\n    participant SA as Server Application (One Record Server)\n    participant IdP as Identity Provider (IdP)\n\n    CA-&gt;&gt;+IdP: 1. Authenticate with Client ID and Client Secret    \n    IdP-&gt;&gt;IdP: 2. Validate Client ID and Client Secret \n    IdP-&gt;&gt;-CA: 3. ID Token\n\n\n    CA-&gt;&gt;+SA: 4. Request resource with ID token  \n    SA-&gt;&gt;SA: 5.  Validate the ID token with JWKS provided by the IdP\n    SA-&gt;&gt;-CA: 6. Response with the resource\n</code></pre> <ol> <li>The Client Application sends credentials to the Identity Provider</li> <li>The IdP validates the credentials</li> <li>The IdP generates an ID token and send it to the Client Application as response</li> <li>The Client Application request a resource on the Server Application attaching the ID token</li> <li>The Server Application validates the ID token using the JWKS provided by the IdP</li> <li>The Server Application responds with the requested resource</li> </ol> <p>This diagram does not shows how JWKS are shared between the IdP and the Server Application. More information can be found below in the JSON Web Key Sets section.</p>"},{"location":"API-Security/security/authn-application-layer/#request-a-token-in-client-credential-grant","title":"Request a Token in Client Credential Grant","text":"<p>The ONE Record server will perform a POST request in order to get an ID Token. The ID Token received can be used to authenticate towards a ONE Record server.</p>"},{"location":"API-Security/security/authn-application-layer/#endpoint","title":"Endpoint","text":"<p>The endpoint to request a token will be provided by the Identity Provider.  Example: https://auth.example.com/token</p>"},{"location":"API-Security/security/authn-application-layer/#request-header-parameter","title":"Request Header Parameter","text":"Request Header Description Examples Authorization Provides credentials that authenticates a ONE Record client with an IfP. This header must be set to Basic  if the IdP authentication method is set to Basic. The client_id and client_secret are provided when a client subscribes to an IdP. Basic b25lOnJlY29yZA== Content-Type Define the content type of the request application/x-www-form-urlencoded"},{"location":"API-Security/security/authn-application-layer/#request-body-parameter","title":"Request Body Parameter","text":"Body property Description Examples grant_type Provides the grant type of the request and must be set to \"client_credentials\" client_credentials client_id Provides the client id generated by the IdP. This property must be set if the IdP authentication method is set to POST client_secret Provides the client secret generated by the IdP. This property must be set if the IdP authentication method is set to POST"},{"location":"API-Security/security/authn-application-layer/#reponse","title":"Reponse","text":"<p>One of the following HTTP status codes MUST be present in the response:</p> Response Description Response Body 200 ID Token Created Return a newly created ID Token 400 Bad Request Error 401 Unauthorized Error 500 Internal Server Error Error"},{"location":"API-Security/security/authn-application-layer/#reponse-body","title":"Reponse Body","text":"Body property Description Examples access_token A JWT token representing a session sdaksmcna3249mn432mn423842.... expires_in The number of second till session expiration 600 token_type The type of the token. This is always set to bearer bearer <p>Note</p> <p>OIDC is built upon the foundation of OAuth 2.0 (as defined in RFC 67490). It's important to note that the ID Token, which contains user identity information, is returned within the `access_token`` field as described by the OAuth specification.</p>"},{"location":"API-Security/security/authn-application-layer/#error-body","title":"Error Body","text":"Body property Description Examples error Name of the error invalid_client_id error_description Description of the error the client id provided is invalid"},{"location":"API-Security/security/authn-application-layer/#refresh-token","title":"Refresh token","text":"<p>The Client Credential Grant used by ONE Record does not support refresh tokens (RFC 6749 Section 4.4.2). Refresh tokens primarily serve the purpose of allowing applications to prevent users from having to provide their username and password multiple times. Since ONE Record server authentication does not involve any user interaction, there is no need for refresh tokens in this scenario.</p>"},{"location":"API-Security/security/authn-application-layer/#implementation-example","title":"Implementation example","text":"<p>The following section describes an example of authentication between two ONE Record servers.</p> <pre><code>sequenceDiagram\n    participant 1Rc as ONE Record Client\n    participant 1Rs as ONE Record Server\n    participant IdP as Identity Provider (IdP)\n\n    opt Get JSON Web Key Set\n        1Rs-&gt;&gt;+IdP: Request JSON Web Key Set\n        IdP--&gt;&gt;-1Rs: JSON Web Key Set\n        1Rs-&gt;&gt;1Rs: Cache JWKS\n    end\n\n    1Rc-&gt;&gt;+IdP: Authenticate with Client ID and Client Secret    \n    IdP-&gt;&gt;IdP: Validate Client ID and Client Secret \n    IdP--&gt;&gt;-1Rc: ID Token\n\n    1Rc-&gt;&gt;+1Rs: HTTP request with ID token\n    1Rs-&gt;&gt;1Rs: Verify ID token with JSON Web Key and check Access Control Lists\n    alt is invalid or expired ID token\n        1Rs--&gt;&gt;1Rc: Error with status code 401\n    else is not authorized\n        1Rs--&gt;&gt;1Rc: Error with status code 403\n    else is valid token and authorized\n        1Rs--&gt;&gt;1Rc: Requested resource with status code 2xx\n    end\n    deactivate 1Rs</code></pre> <ol> <li>(Optional) The ONE Record server get the JWKS from the IdP <pre><code>GET /.well-known/jwks.json\nHost: auth.example.com\n</code></pre></li> </ol> <p><pre><code>HTTP/1.1 200 OK\nCache-Control: public, max-age=15, stale-while-revalidate=15, stale-if-error=86400\n{\n   \"keys\":[\n      {\n         \"alg\":\"RS256\",\n         \"kty\":\"RSA\",\n         \"use\":\"sig\",\n         \"x5c\":[\n            \"MIIC+DCCAeCgAwIBAgIJBIGjYW6hFpn2MA0GCSqGSIb3DQEBBQUAMCMxITAfBgNVBAMTGGN1c3RvbWVyLWRlbW9zLmF1dGgwLmNvbTAeFw0xNjExMjIyMjIyMDVaFw0zMDA4MDEyMjIyMDVaMCMxITAfBgNVBAMTGGN1c3RvbWVyLWRlbW9zLmF1dGgwLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMnjZc5bm/eGIHq09N9HKHahM7Y31P0ul+A2wwP4lSpIwFrWHzxw88/7Dwk9QMc+orGXX95R6av4GF+Es/nG3uK45ooMVMa/hYCh0Mtx3gnSuoTavQEkLzCvSwTqVwzZ+5noukWVqJuMKNwjL77GNcPLY7Xy2/skMCT5bR8UoWaufooQvYq6SyPcRAU4BtdquZRiBT4U5f+4pwNTxSvey7ki50yc1tG49Per/0zA4O6Tlpv8x7Red6m1bCNHt7+Z5nSl3RX/QYyAEUX1a28VcYmR41Osy+o2OUCXYdUAphDaHo4/8rbKTJhlu8jEcc1KoMXAKjgaVZtG/v5ltx6AXY0CAwEAAaMvMC0wDAYDVR0TBAUwAwEB/zAdBgNVHQ4EFgQUQxFG602h1cG+pnyvJoy9pGJJoCswDQYJKoZIhvcNAQEFBQADggEBAGvtCbzGNBUJPLICth3mLsX0Z4z8T8iu4tyoiuAshP/Ry/ZBnFnXmhD8vwgMZ2lTgUWwlrvlgN+fAtYKnwFO2G3BOCFw96Nm8So9sjTda9CCZ3dhoH57F/hVMBB0K6xhklAc0b5ZxUpCIN92v/w+xZoz1XQBHe8ZbRHaP1HpRM4M7DJk2G5cgUCyu3UBvYS41sHvzrxQ3z7vIePRA4WF4bEkfX12gvny0RsPkrbVMXX1Rj9t6V7QXrbPYBAO+43JvDGYawxYVvLhz+BJ45x50GFQmHszfY3BR9TPK8xmMmQwtIvLu1PMttNCs7niCYkSiUv2sc2mlq1i3IashGkkgmo=\"\n         ],\n         \"n\":\"yeNlzlub94YgerT030codqEztjfU_S6X4DbDA_iVKkjAWtYfPHDzz_sPCT1Axz6isZdf3lHpq_gYX4Sz-cbe4rjmigxUxr-FgKHQy3HeCdK6hNq9ASQvMK9LBOpXDNn7mei6RZWom4wo3CMvvsY1w8tjtfLb-yQwJPltHxShZq5-ihC9irpLI9xEBTgG12q5lGIFPhTl_7inA1PFK97LuSLnTJzW0bj096v_TMDg7pOWm_zHtF53qbVsI0e3v5nmdKXdFf9BjIARRfVrbxVxiZHjU6zL6jY5QJdh1QCmENoejj_ytspMmGW7yMRxzUqgxcAqOBpVm0b-_mW3HoBdjQ\",\n         \"e\":\"AQAB\",\n         \"kid\":\"NjVBRjY5MDlCMUIwNzU4RTA2QzZFMDQ4QzQ2MDAyQjVDNjk1RTM2Qh\",\n         \"x5t\":\"NjVBRjY5MDlCMUIwNzU4RTA2QzZFMDQ4QzQ2MDAyQjVDNjk1RTM2Qh\"\n      }\n   ]\n}\n</code></pre> The IdP uses a private key to sign JWTs. The IdP provides the public key on a URL in the form of a JSON Web Key Set (JWKS).</p> <ol> <li>ONE Record client gets ID token from an IdP </li> </ol> <p>The ONE Record client must authenticate for this request. As seen in the Request token API, the IdP define the authentication method as BASIC or POST</p> <ul> <li><code>POST</code>: <code>client_id</code> and <code>client_secret</code> in the HTTP request body  </li> <li><code>BASIC</code>: <code>client_id</code> and <code>client_secret</code>as username and password in the HTTP Basic auth header following the encoding explained in the API description.</li> </ul> <p>Request: <pre><code>POST /token\nHost: auth.example.com\nAuthorization: Basic bXljbGllbnRpZDpteWNsaWVudHNlY3JldA==\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type: \"client_credentials\"\nclient_id: \"secretid\"\nclient_secret: \"secretpassword\"\n</code></pre></p> <p>Response: <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{\n  \"access_token\" : \"eyJhbGciOiJIUzI1NiIsImprdSI6Imh0dHBzOi8vYXV0aC5leGFtcGxlLmNvbS8ud2VsbC1rbm93bi9qd2tzLmpzb24iLCJraWQiOiJjYmQzZDBiZi02YzIwLTRlZDMtOGFlYy1jNGFmMGI2NTdjMmEiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2F1dGguZXhhbXBsZS5jb20iLCJzdWIiOiJodHRwczovLzFyLmV4YW1wbGUuY29tL2xvZ2lzdGljcy1vYmplY3RzLzk1N2UyNjIyLTlkMzEtNDkzYi04YjhmLTNjODA1MDY0ZGJkYSIsImV4cCI6IjIwMjMtMDMtMDMxVDEwOjM4OjAxLjAwMFoifQ.1mj-448srB9EEjXZWHosD79KW46Wfm7LQ6pfhrYZg4k\",\n  \"token_type\" : \"Bearer\",\n  \"expires_in\" : 86400\n}\n</code></pre></p> <p>Using the JWT debugger to decode the ID token, returns the following JSON object:</p> <p>Header: <pre><code>{\n  \"alg\": \"HS256\",\n  \"jku\": \"https://auth.example.com/.well-known/jwks.json\",\n  \"kid\": \"cbd3d0bf-6c20-4ed3-8aec-c4af0b657c2a\",\n  \"typ\": \"JWT\"\n}\n</code></pre> Payload: <pre><code>{\n  \"iss\": \"https://auth.example.com\",\n  \"logistics_agent_uri\": \"https://1r.example.com/logistics-objects/957e2622-9d31-493b-8b8f-3c805064dbda\",\n  \"exp\": \"2023-03-031T10:38:01.000Z\"  \n}\n</code></pre></p> <ol> <li>ONE Record client sends request to ONE Record server Having received an ID token, the ONE Record client can then send a request to a ONE Record server, using that token. </li> </ol> <pre><code>GET /logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c HTTP/1.1\nHost: 1r.example.com\nAccept: application/ld+json; version=2.0.0-dev\nAuthorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJodHRwczovLzFyLmV4YW1wbGUuY29tL2xvZ2lzdGljcy1vYmplY3RzLzk1N2UyNjIyLTlkMzEtNDkzYi04YjhmLTNjODA1MDY0ZGJkYSIsImlzcyI6Imh0dHBzOi8vYXV0aC5leGFtcGxlLmNvbSIsImV4cCI6Ijg2NDAwIn0.IDnawFcz7mfHDMasHLNN7NsnFFZIxp9mVPEF9eyQou0\n</code></pre> <ol> <li>Server verifies JWT Token, checks ACLs, and returns requested Logistics Object<ul> <li>If present a \"kid\" is present, the ONE Record can use it to find the public key and verify the JWT Token.</li> <li>The ONE Record server MUST return a 401 Authorized Error if the token is expired or not valid.</li> </ul> </li> <li>ONE Record server checks access of requesting client using ACLs</li> <li>ONE Record server response to ONE Record client's request</li> </ol> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/ld+json\nContent-Language: en-US\nLocation: https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\nType: https://onerecord.iata.org/ns/cargo#Piece\nRevision: 1\nLatest-Revision: 1\n\n{\n   \"@context\":{\n     \"api\": \"https://onerecord.iata.org/ns/api#\",\n     \"@language\": \"en-US\"\n   },\n    \"@type\": \"https://onerecord.iata.org/ns/cargo#Piece\",\n    \"@id\": \" https://1r.example.com/logistics-objects/1a8ded38-1804-467c-a369-81a411416b7c\",\n    \"https://onerecord.iata.org/ns/cargo#goodsDescription\": \"ONE Record Advertisement Materials\",\n    \"https://onerecord.iata.org/ns/cargo#Piece#handlingInstructions\": [\n        {\n            \"@type\": \"https://onerecord.iata.org/ns/cargo#HandlingInstructions\",\n            \"https://onerecord.iata.org/ns/cargo#HandlingInstructions#serviceType\": \"SPH\",\n            \"https://onerecord.iata.org/ns/cargo#HandlingInstructions#serviceDescription\": \"Valuable Cargo\",\n            \"https://onerecord.iata.org/ns/cargo#HandlingInstructions#serviceTypeCode\": \"VAL\"\n        }\n    ]\n}\n</code></pre>"},{"location":"API-Security/security/authn-application-layer/#identity-provider","title":"Identity Provider","text":"<p>Identity Providers play a crucial role in the ONE Record network, responsible for authenticating parties and safeguarding the network from external threats and malicious entities.</p> <p>Due to their critical role, IATA consistently ensures that IdPs adhere to the highest security standards and have a stringent onboarding process for new parties in place. This ongoing monitoring and verification help maintain the integrity and security of the network.</p> <p>ONE Record servers have the option to place trust in Identity Providers (IdPs) that are not included in IATA's trusted list. However, in such cases, the servers themselves will be responsible for ensuring the trustworthiness of those external IdPs.</p>"},{"location":"API-Security/security/authn-application-layer/#onboarding-of-an-identity-provider","title":"Onboarding of an Identity Provider","text":"<p>The onboarding of a new Identity Provider in ONE Record network is complex procedure which establish the integrity of the IdP. For more information, please contact the API maintainers. </p>"},{"location":"API-Security/security/authn-application-layer/#onboarding-of-a-party","title":"Onboarding of a party","text":"<p>The Identity provider is responsible for the onboarding of a party in the network. A procedure to assert the identity of a new party must be in place following the industry security standard. For more information, please contact the API maintainers. </p>"},{"location":"API-Security/security/authn-application-layer/#multiple-identity-providers","title":"Multiple Identity Providers","text":"<p>The ONE Record network allows for the existence of multiple Identity Providers (IdPs). Although not obligatory, different key players may choose different Identity Providers according to their preferences.</p> <p>Consequently, the ONE Record API must have the capability to handle multiple IdPs. Each server should be able to establish a list of trusted IdPs that ONE Record clients can use for authentication. This specification outlines how to interact with an IdP, but variations in the JWT token implementation can occur, and it is the responsibility of the IdP to provide public information about each variation.</p> <p>To implement multiple IdPs, a ONE Record Server utilizes the 'iss' claim to identify the issuer of the token (IdP). Once the IdP is identified, the ONE Record server can utilize the appropriate JWKS (JSON Web Key Set) to validate the ID token.</p> <p>IATA will maintain and publish a list of accredited Identity Providers. ONE Record nodes have the ability to communicate with IATA to obtain information about a specific IdP.</p>"},{"location":"API-Security/security/authn-application-layer/#api-authentication-and-autorization","title":"API Authentication and Autorization","text":"<p>In the following table we summarize the authentication and authorization needed for each API defined by ONE Record API specifications.</p> Resource / Endpoint HTTP Action Authentication required Authorization required / GET Yes No /logistics-objects POST Only Internal Service Only Interal Service /logistics-objects/{{logisticsObjectId}} GET Yes Yes /logistics-objects/{{logisticsObjectId}} PATCH Yes No /logistics-objects/{{logisticsObjectId}}/audit-trail GET Yes Yes <sup>1</sup> /logistics-objects/{{logisticsObjectId}}/logistics-events GET Yes Yes /logistics-objects/{{logisticsObjectId}}/logistics-events POST Yes Yes <sup>2</sup> /logistics-objects/{{logisticsObjectId}}/logistics-events/{{logisticsEventId}} GET Yes Yes /subscriptions GET Yes No /subscriptions POST Yes No /access-delegation POST Yes No /action-requests/{{actionRequestId}} GET Yes Yes /action-requests/{{actionRequestId}} PATCH Only Internal Service Only Internal Service /action-requests/{{actionRequestId}} DELETE Yes Yes /notifications POST Yes No <p>The term \"Only Internal Service\" emphasizes that the service is exclusively accessible to internal actors and should be blocked for third-party ONE Record servers.</p> <p>More information about the authorization mechanism can be found in the access control page.</p> <ol> <li> <p>The audit trail can inherit the authorization from the Logistics Object.\u00a0\u21a9</p> </li> <li> <p>The implementor can decide to give access to all authenticated users.\u00a0\u21a9</p> </li> </ol>"},{"location":"API-Security/security/authn-transport-layer/","title":"Transport Layer Security","text":""},{"location":"API-Security/security/authn-transport-layer/#transport-layer-security-tls","title":"Transport Layer Security (TLS)","text":"<p>Securing data exchange in the ONE Record network is NOT optional.  One way to secure the communication channel on transport layer is using TLS. TLS stands for Transport Layer Security. It is a cryptographic protocol that provides secure communication over the internet.  TLS is the successor to the earlier SSL (Secure Sockets Layer) protocol, and is used to secure a wide range of internet communications, including email, instant messaging, virtual private networks (VPNs), and e-commerce transactions.  TLS is an essential component of public internet security, as it helps to protect sensitive information such as passwords, credit card numbers, and personal data from interception and theft by hackers and other malicious actors.</p> <p>It is used to encrypt data sent between a client (such as a web browser or a ONE Record client) and a server (such as a website, a REST API or a ONE Record server) to prevent unauthorized access or tampering of the data while it is in transit. It works by establishing a secure, encrypted connection between the client and server, which is authenticated using digital certificates.</p> <p>Without TLS, a third party could intercept and read sensitive information such as API credentials and private data as it is transmitted. However, relying solely on TLS encryption, does not ensure security.</p> <p>Workflow:</p> <ol> <li>A ONE Record client connects to the ONE Record server</li> <li>The ONE Record server presents its TLS certificate (issued by a trusted authority)</li> <li>The ONE Record client verifies the ONE Record server's certificate</li> <li>ONE Record client and ONE Record server exchange data over an encrypted TLS connection</li> </ol> <pre><code>    sequenceDiagram\n        participant C as ONE Record Client\n        participant S as ONE Record Server\n\n        C-&gt;&gt;S: Establish TCP Connection to ONE Record server\n        S--&gt;&gt;C: Present TLS certificate to ONE Record client\n        C-&gt;&gt;C: Verify TLS certificate\n        C-&gt;&gt;S: Exchange data over encrypted TLS connection\n        S--&gt;&gt;C: Exchange data over encrypted TLS connection       </code></pre> <p>Guidelines on the usage of TLS in ONE Record:</p> <ul> <li>Every ONE Record server MUST force the use of TLS for every ONE Record endpoint.</li> <li>Eery ONE Record MUST support TLS 1.2 or newer. Furthermore, every ONE Record MUST set the minium TLS version to 1.2. A minimum TLS version only accepts incoming HTTPS connections from ONE Record clients that support the selected TLS protocol version or a newer version.</li> </ul> <p>Note</p> <p>Because the certificates used for TLS are only as trustworthy as the Certificate Authority (CA) that issues them, IATA maintains a list of trusted CAs.  The CAs on this list are subject to rigorous audits.</p>"},{"location":"API-Security/security/authn-transport-layer/#mutual-transport-layer-security-mtls","title":"Mutual Transport Layer Security (mTLS)","text":"<p>Mutual Transport Layer Security (mTLS) is an end-to-end mutual authentication security method that ensures that the client and server exchange information about their claimed identities and that traffic is secure and trusted in both directions. This is an extension of TLS, which only proves the identity of the server to the client and leaves the authentication of the client to the server to the application layer, e.g., using oAUTH2.</p> <p>mTLS is often used in a 0-trust environment because it strictly limits which clients are allowed to connect to a server, regardless of where the client is located (e.g., VPN, internal network, etc.) and regardless of any credentials. mTLS is more commonly used in (closed) environments where a limited number of services and servers communicate with each other. This has limited applicability to the ONE Record open data ecosystem approach.</p> <p>Workflow:</p> <ol> <li>A ONE Record client connects to the ONE Record server</li> <li>The ONE Record server presents its TLS server certificate to the ONE Record client</li> <li>The ONE Record client verifies the ONE Record server's certificate</li> <li>The ONE Record client presents its TLS client certificate to the ONE Record server</li> <li>The ONE Record server verified the ONE Record client's certificate</li> <li>THE ONE Record server grants access</li> <li>ONE Record client and ONE Record server exchange data over an encrypted TLS connection</li> </ol> <pre><code>    sequenceDiagram\n        participant C as ONE Record Client\n        participant S as ONE Record Server\n\n        C-&gt;&gt;S: Establish TCP Connection to ONE Record server\n        S--&gt;&gt;C: Present TLS certificate to ONE Record client\n        C-&gt;&gt;C: Verify TLS certificate\n        C-&gt;&gt;S: Present TLS certificate to ONE Record server\n        S-&gt;&gt;S: Verify TLS certificate (&amp; grant access)        \n        C-&gt;&gt;S: Exchange data over encrypted TLS connection\n        S--&gt;&gt;C: Exchange data over encrypted TLS connection       </code></pre> <p>Advantages of mTLS:</p> <ul> <li>More secure than TLS, because it validates not only server's certificate, but also client'certificate</li> <li>Authentication of client on protocol layer.</li> </ul> <p>Note on disadvantages of mTLS: </p> <ul> <li>Complex to implement, rollout for high number of clients/server. Requires an additional secure communication channel to exchange certificates (inl. private key).</li> <li>Complex to manage, because ONE Record server and ONE Record client must maintain certificates of all ONE Record applications with which they exchange data, considering expiry dates, revocations, drop of root CAs</li> <li>Computationally costly and slower than TLS, because of the extra mTLS handshake for every connection</li> <li>TLS and mTLS works best when an open connection is used for multiple requests</li> <li>Less user-friendly and rarely used in end-user API applications</li> <li>Depending on setup, termination of mTLS may hinder the passing of authentication details to ONE Record server for authorization.</li> </ul> <p>Guidelines for the usage of mTLS in ONE Record:</p> <ul> <li>mTLS is RECOMMENDED for highly sensitive data exchange using ONE Record</li> </ul>"},{"location":"API-Security/security/security-overview/","title":"Overview","text":"<p>This section describes the mechanisms and guidelines for securing the ONE Record API,  which enables the connection between ONE Record clients and servers on the ONE Record network.</p>"},{"location":"API-Security/security/security-overview/#background","title":"Background","text":"<p>When exchanging data, each party needs to know with certainty the true identity of the other party and that they have the authority to receive or share the data.  They also need to be certain that the data being shared is private, secured, and confidential and cannot be intercepted or changed by any unauthorized third party.  The ONE Record security framework works globally and for all stakeholders in the full logistics and transport supply chain,  and in compliance with corporate and local data security requirements.</p> <p> </p> Security overview <p>IT and business experts from the industry from ONE Record Task Force have explored and discussed the different connectivity configurations within the ONE Record network and two models \u2013 possibly complementary \u2013 were retained. </p> <p>ONE Record Security specifications are built around two concepts: mutual TLS (short for Transport Layer Security) and OAuth2 (an authorization protocol).  Mutual TLS secures all the Node-to-Node channels whereas OAuth2 adds an extra security layer for identification and authentication.</p> <p>IATA has conceptualized a first practical implementation, which is promoted as the official security model for ONE Record. This implementation is split in two modules: \u2022   TLS authentication support, including the definition of certificate profiles and practical use of digital certificates for client and server certificates; \u2022   Token-based authentication support, including a practical implementation using OIDC as authentication protocol, based on the concept of a \u201cTrusted Identity Provider\u201d. The next sections provide more detailed descriptions on the chosen security models and common use cases.</p> <p>This section presents these models and showcases the implications and benefits that they bring to the air cargo industry.</p> <ul> <li>Authentication (authn) has to do with identity: are you who you\u2019re claiming to be?</li> <li>Authorization (authz) has to do with policy: are you allowed to do the thing you\u2019re trying to do?</li> </ul>"},{"location":"API-Security/supplementary-materials/","title":"Index","text":""},{"location":"API-Security/supplementary-materials/#supplemenatry-materials-for-one-record-api-specification","title":"Supplemenatry materials for ONE Record API specification","text":"<p>This folder contains supplementary materials for the ONE Record API specification. The materials are intended to provide additional context and guidance for implementing the ONE Record API.</p> <p>Supplementary material typically includes relevant information that is not part of the formal specification but is useful for understanding the context, rationale, and implementation of the ONE Record API.</p>"},{"location":"API-Security/supplementary-materials/edi-integration/","title":"EDI Integration","text":"<p>Note</p> <p>This page is a Draft and it's not approved by the COTB</p> <p>Accepting the coexistence and integration of various communication channels between stakeholders along the supply chain,  this section provides an overview of integrating legacy EDI messages (e.g., Cargo-IMP / Cargo-XML) and ONE Record Web APIs.</p> <p>While both technologies offer data exchange capabilities, APIs and EDI operate quite differently.  However, by adopting a data-centric approach, companies can effectively integrate ONE Record with legacy EDI messaging systems.  This enables efficient data exchange and collaboration not only in the air cargo industry but along the global supply chain.</p> <p>This document does not delve into the specifics of information mapping between the various standards, nor does it compare the benefits and limitations of each technology.  Instead, we exemplify the communication of stakeholders - airlines, freight forwarders, and ground handling agents -  via legacy EDI messaging systems and ONE Record Web APIs with a high-level architecture.</p>"},{"location":"API-Security/supplementary-materials/edi-integration/#electronic-data-interchange-edi-and-cargo-impcargo-xml","title":"Electronic Data Interchange (EDI) and Cargo-IMP/Cargo-XML","text":"<p>Electronic Data Interchange (EDI) is the electronic exchange of business documents between trading partners using a standardized format.  EDI facilitates the automated exchange of information, such as purchase orders, invoices, and shipping notices, streamlining business processes and reducing manual data entry.</p> <p>In the air cargo industry, EDI messaging systems are employed to exchange information among stakeholders, including airlines, freight forwarders, and ground handling agents.  These systems define standards for message formats and data elements to facilitate seamless data exchange.</p> <p>Two common EDI standards in the air cargo industry are Cargo-IMP and Cargo-XML:</p> <ul> <li>Cargo-IMP (Cargo Interchange Message Procedures): An older standard for EDI messages in air freight, defining a series of message formats and data elements for electronic data interchange.</li> <li>Cargo-XML: A newer standard based on XML, designed to replace Cargo-IMP. Cargo-XML is more flexible and extensible, supporting a wider range of data elements and overcoming limitations of Cargo-IMP, such as size constraints, character sets, and data types.</li> </ul> <p>In general, EDI messaging systems and ONE Record both serve as data exchange standards in the air cargo industry, but they differ significantly in structure, format, and approach to data exchange.</p> <p>EDI Messaging Systems: EDI is based on a set of standards that define the structure and format of messages exchanged between trading partners.  These standards are typically industry-specific and are designed to facilitate the electronic exchange of business documents.  EDI systems follow a document-centric approach and typically operate on a data-pushing model, where messages are sent (pushed) to trading partners. In most cases, the message itself contains the business documents, such as purchase orders, invoices, and shipping notices.</p> <p>ONE Record: ONE Record serves as a data-sharing standard, establishing a unified view of shipments through a singular record and a single source of truth (SOT).  This standard outlines a common, extensible data model for the exchange of information, which is facilitated by standardized and secure web APIs.  Unlike EDI, ONE Record operates on a data-centric approach and follows a data-sharing model, where information is accessed and shared as needed. In many scenarions, so called ONE Record Notifiactions are sent, informing the data consumer that data is available has been changed and notify about the location of the data. (cf. Notifications)</p> <p>Key Differences</p> <ul> <li>Document-Centric vs. Data-Centric: EDI systems are document-centric, focusing on the exchange of structured documents. In contrast, ONE Record is data-centric, focusing on the seamless sharing of single data objects with properties and are linked each other.</li> <li>Data Pushing vs. Data Sharing: EDI relies on pushing data through messages to trading partners, while ONE Record promotes sharing data via web APIs, enabling real-time access and updates.</li> </ul> <p>This distinction is crucial when considering the integration of ONE Record with EDI messaging systems. Understanding these differences ensures a more effective integration, leveraging the strengths of both approaches.</p>"},{"location":"API-Security/supplementary-materials/edi-integration/#integration-alternatives","title":"Integration Alternatives","text":"<p>The integration of ONE Record with EDI messaging systems can be approached in various ways, depending on the specific requirements of the stakeholders involved. The following scenarios outline potential integration approaches:</p> <ol> <li> <p>Legacy Integration: In this scenario, both the forwarder and the airline rely on legacy EDI messaging systems. There is no integration with ONE Record, and communication is solely based on existing EDI standards.</p> </li> <li> <p>ONE Record Integration: In this scenario, ONE Record integrates with legacy EDI messaging systems. The airline and the forwarder use the ONE Record API to communicate with each other.</p> </li> <li> <p>Hybrid Integration: In this scenario, a combination of ONE Record and legacy EDI messaging systems is used. For example, the forwarder may use ONE Record to communicate with the airline, while the airline communicates with the ground handling agent (GHA) using legacy EDI messaging systems. This might be the most common scenario in the air cargo industry for the next years.</p> </li> </ol> <p>The following tables present a list of possible scenarios and the corresponding approaches:</p> Scenario Forwarder Airline GHA Approach 1 ONE Record Legacy Legacy 100% legacy 2 Legacy ONE Record Legacy 100% legacy 3 Legacy Legacy ONE Record 100% legacy 4 ONE Record ONE Record Legacy ONE Record between FF and Airline, then downgrade to EDI for GHA. 5 Legacy ONE Record ONE Record ONE Record possible only with GHA. Airline upgrades from EDI to ONE Record. 6 ONE Record Legacy ONE Record Legacy between Airline and GHA; Data exchange between FF and GHA might possible using ONE Record (e.g. via physicalQR-labels), but can bring problems due to Airline\u00b4s constrains. <p>The following visualizaion shows the various data exchange scenarios examplified by the integration of  Freight Forwarders (FF), Carrier (Airline) and Ground Handling Agents (GHA) using EDI and ONE Record.</p> <pre><code>graph LR\n    F1[\"FF 1\"] &lt;-- EDI --&gt; A1[Carrier 1]\n    F2[\"FF 2\"] &lt;-- ONE Record --&gt; A1\n    F3[\"FF 3\"] &lt;-- ONE Record --&gt; A1\n    F4[\"FF 4\"] &lt;-- EDI --&gt; A4[Carrier 4]\n    F5[\"FF 5\"] &lt;-- ONE Record --&gt; A5[Carrier 5]\n    F3 &lt;-- ONE Record --&gt; A2[Carrier 2]\n    F3 &lt;-- EDI --&gt; A3[Carrier 3]\n    A1 &lt;-- EDI --&gt; G1[GHA 1]\n    A1 &lt;-- ONE Record --&gt; G2[GHA 2]              \n    A2 &lt;-- EDI --&gt; G3[GHA 3]    \n    A3 &lt;-- EDI --&gt; G4[GHA 4]\n    A4 &lt;-- ONE Record --&gt; G4\n    A4 &lt;-- ONE Record --&gt; G5[GHA 5]    \n    A5 &lt;-- ONE Record --&gt; G5</code></pre> Freight Forwarder Capability Carrier Capability GHA Capability FF 1 EDI Carrier 1 EDI + ONE Record GHA 1 EDI FF 2 ONE Record Carrier 2 EDI + ONE Record GHA 2 ONE Record FF 3 EDI + ONE Record Carrier 3 EDI GHA 3 EDI FF 4 EDI Carrier 4 EDI + ONE Record GHA 4 EDI + ONE Record FF 5 ONE Record Carrier 5 ONE Record GHA 5 ONE Record"},{"location":"API-Security/supplementary-materials/edi-integration/#implementation-approaches","title":"Implementation Approaches","text":"<p>The integration of ONE Record with EDI messaging systems can be implemented using various approaches, depending on the specific requirements of the stakeholders involved.  The following implementation approaches outline potential strategies for integrating ONE Record with EDI messaging systems:</p> <p>Native ONE Record Support: In this approach, ONE Record is integrated directly with the Transport Management System / Cargo Handling Information System.  This approach eliminates the need for a middleware connector and streamlines the integration process.</p> <p>The Transport Management System is extended to support the ONE Record standard natively.  This approach eliminates the need for a middleware connector and streamlines the integration process.</p> <pre><code>graph TD\n    B1[Business partner 1] &lt;--Cargo-IMP/Cargo-XML--&gt; A[EDI messaging interface]\n    B2[Business partner 2] &lt;--ONE Record--&gt; T\n    A[EDI messaging interface] &lt;--&gt; T[ONE Record-native Transport Management System]    </code></pre> <p>Middleware Integration: In this approach, middleware platforms are used to integrate ONE Record with EDI messaging systems. These platforms provide data transformation, routing, and orchestration capabilities to facilitate seamless data exchange between the systems.</p> <p>Middleware/Mediator Design Pattern</p> <p>The middleware/mediator design pattern is a software architectural pattern that provides a centralized mechanism to facilitate communication and manage interactions between multiple components or systems. Instead of components communicating directly with each other, they communicate through the mediator, which coordinates the interactions and ensures that components remain loosely coupled. This pattern is particularly useful in scenarios where complex interactions need to be managed and where reducing direct dependencies between components enhances modularity and maintainability.</p> <p>Key Characteristics:</p> <ul> <li>Centralized Communication: All interactions between components are routed through the mediator, simplifying the communication process.</li> <li>Loose Coupling: Components do not need to be aware of each other; they only need to know the mediator. This reduces dependencies and enhances flexibility.</li> <li>Simplified Interactions: The mediator encapsulates the logic for communication and coordination, making the system easier to manage and modify.</li> <li>Enhanced Scalability: Adding or removing components becomes easier as changes are managed through the mediator rather than through multiple direct connections.</li> </ul> <p>Applications:</p> <ul> <li>Integration Systems: Facilitating communication between different systems or services (e.g., integrating EDI messaging systems with ONE Record).</li> <li>UI Components: Managing interactions between various user interface elements.</li> <li>Event Handling: Centralizing event management in applications with complex event interactions.</li> </ul> <p>By employing the middleware/mediator design pattern, systems can achieve better organization, reduced complexity, and improved maintainability.</p> <p>The communication layer that already exists in the EDI messaging system is extended to support the integration of ONE Record. The logic to interact is abstracted in a Communication Middleware. This middleware is responsible for handling the communication between the EDI messaging system and the ONE Record server.</p> <pre><code>graph TD\n    B1[Business partner 1] &lt;--Cargo-IMP/Cargo-XML--&gt; A[EDI messaging interface]\n    B2[Business partner 2] &lt;--ONE Record--&gt; O[ONE Record interface]\n    A[EDI messaging interface] &lt;--&gt; B(Communication Middleware)\n    O[ONE Record interface] &lt;--&gt; B\n    B &lt;--&gt; T[Transport Management System]    </code></pre>"},{"location":"API-Security/supplementary-materials/edi-integration/#example-interaction-in-hybrid-scenario","title":"Example: Interaction in hybrid scenario","text":"<p>The following sequence diagram represent an example of communication in case of scenario 5 of the previous table, i.e. we consider a scenario where an airline, adopting the ONE Record standard, seeks to communicate with a forwarder still reliant on EDI messaging systems. </p> <p>The central component of the architecture is the carrier communication interface that serves as a bridge between the ONE Record server and the EDI messaging system.  The connector is responsible for translating data between the ONE Record data model and the EDI message format, ensuring seamless data exchange between the systems.</p> <p>For the sake of simplicity, we assume that the airline establishes a connector for each third-party company seeking to connect with EDI messages.  However, it is also possible and more efficient to use a single reusable/configurable connector component.</p> <p>The communication interface provides the following capabilities:</p> <p>Receive EDI Messages: </p> <ul> <li>Create logistics objects (<code>createLogisticsObject</code>)</li> <li>Update logistics objects (<code>createChangeRequest</code>)     </li> <li>Create logistics events (<code>createLogisticsEvent</code>)</li> </ul> <p>Receive ONE Record Notifications:</p> <ul> <li>Retrieve logistics objects (<code>getLogisticsObject</code>)</li> <li>Generate corresponding EDI messages</li> </ul> <p>From the ONE Record perspective, the connector acts as a proxy for the third-party company, representing it within the ONE Record network by executing ONE Record API calls based on the received EDI messages.</p> <p>From the EDI perspective, the connector represents the airline's EDI message endpoint, triggered by notifications from the airline's ONE Record server.</p> <p>This setup ensures efficient and seamless data exchange between ONE Record and EDI messaging systems, maintaining compatibility with legacy systems while leveraging modern data standards.  By implementing a versatile connector capable of managing multiple connections, the integration process becomes more scalable and flexible, accommodating evolving business needs.</p> <p>The following sequence diagram illustrates the interaction between the forwarder, carrier communication interface, carrier messaging system, ONE Record server, and ground handling agent in a hybrid scenario.</p> <pre><code>sequenceDiagram\n    participant F as Forwarder/CCS\n    box Carrier Communication Interface\n    participant C as Carrier Messaging System\n    participant S as Carrier ONE Record Server\n    end\n    participant G as GHA\n\n    F-&gt;&gt;C: Sends (x)FWB\n    C-&gt;&gt;S: Publishes xFWB as LOs\n    C--&gt;&gt;F: Responds with FMA\n    S-&gt;&gt;G: Notifies about LOs-Created\n    F-&gt;&gt;C: Sends updated FWB\n    C-&gt;&gt;S: Creates ChangeRequest on behalf of the Forwarder\n    S-&gt;&gt;S: Accepts Fowarder ChangeRequest\n    S-&gt;&gt;G: Notifies about LOs-Updated\n    G-&gt;&gt;S: Requests Change to LogisticsObjects\n    S-&gt;&gt;C: Notify a new ChangeRequest \n    F-&gt;C: Error handling with legacy process\n    S-&gt;&gt;S: Evaluates and accept GHA ChangeRequest</code></pre>"},{"location":"API-Security/supplementary-materials/edi-integration/#implementation-guidelines","title":"Implementation Guidelines","text":"<p>When integrating ONE Record with EDI messaging systems, several guidelines should be considered to ensure a successful integration.</p>"},{"location":"API-Security/supplementary-materials/edi-integration/#single-source-of-truth-sot","title":"Single Source of Truth (SOT)","text":"<p>A key consideration when integrating ONE Record with EDI messaging systems is maintaining a Single Source of Truth (SOT).</p> <p>SOT is a fundamental principle in data exchange via ONE Record, stating that every data object should exist only once within the ONE Record data network.  This ensures data consistency, accuracy, and integrity across the system.</p> <p>In cases where the original data source is not available within ONE Record, the necessary data should be retrieved from EDI messaging systems.  This data must then be hosted and published as soon as possible by other ONE Record-ready parties to maintain the SOT principle.</p>"},{"location":"API-Security/supplementary-materials/edi-integration/#best-practices","title":"Best Practices","text":"<p>When integrating ONE Record with EDI messaging systems, consider the following best practices and integration considerations to ensure a seamless and efficient data exchange process:</p> <ol> <li> <p>Understand the Differences: Recognize the distinctions between the document-centric approach of EDI systems and the data-centric approach of ONE Record. This understanding is crucial for effective integration.</p> </li> <li> <p>Mapping Data Elements: Develop a comprehensive mapping of data elements between EDI message formats (Cargo-IMP/Cargo-XML) and the ONE Record data model. Ensure all necessary data is accurately translated between the two systems to maintain data consistency and integrity.</p> </li> <li> <p>Message Transformation: Implement message transformation mechanisms to convert data between the ONE Record data model and the EDI message format. These mechanisms facilitate the exchange of information and ensure accurate data representation.</p> </li> <li> <p>Leverage Web APIs: Utilize ONE Record's standardized and secure web APIs to facilitate data exchange. Ensure your systems can interact with these APIs efficiently and effectively.</p> </li> <li> <p>Ensure Data Consistency: Implement validation checks, error handling procedures, and regular data reconciliation to maintain data consistency and accuracy during the exchange process.</p> </li> <li> <p>Security Measures: Prioritize data security during integration. Use encryption, secure authentication methods, and other best practices to protect sensitive information exchanged between systems. Secure communication channels, data encryption, and access control mechanisms are essential to safeguard data.</p> </li> <li> <p>Compliance: Ensure compliance with industry standards and regulations. Adherence to relevant standards and guidelines is critical for seamless integration and maintaining industry best practices.</p> </li> <li> <p>Scalability and Flexibility: Design the integration with scalability and flexibility in mind. The system should accommodate future growth and changes in business needs without requiring significant rework.</p> </li> <li> <p>Interoperability: Ensure interoperability between ONE Record and EDI messaging systems. Effective communication and data exchange without loss or corruption are essential for successful integration.</p> </li> <li> <p>Monitoring and Logging: Implement monitoring and logging mechanisms to track data exchange between ONE Record and EDI messaging systems. These mechanisms provide visibility into the data flow and help identify and resolve issues promptly.</p> </li> <li> <p>Performance: Consider performance aspects to ensure efficient and timely data exchange. Maintaining operational efficiency and meeting business requirements depends on the performance of the integration.</p> </li> <li> <p>Testing: Conduct comprehensive testing of the integration between ONE Record and EDI messaging systems. Testing should cover data mapping, message transformation, error handling, security, compliance, scalability, interoperability, monitoring, and performance to ensure a robust integration solution.</p> </li> </ol> <p>By following these best practices and addressing these integration considerations, organizations can achieve a seamless integration of EDI messaging systems with the ONE Record WebAPI, enhancing data exchange efficiency and accuracy in the air cargo industry.</p>"},{"location":"API-Security/tools/unit-tests/","title":"Unit Test Suite","text":""},{"location":"API-Security/tools/unit-tests/#one-record-api-unit-test-suite","title":"ONE Record API Unit Test suite","text":"<p>ONE Record is the new IATA standard for data sharing and creates a single record view of the shipment.</p> <p>The ONE Record standard is highly technical and there is a risk that different parties interpret the specifications differently, which would lead to data quality issues and disruption of connectivity between different network players.\u00a0</p> <p>Due to this rationale, we construct a unit test suite with the aim of verifying that any implementation aligns with the API specifications. The unit test suite is freely available for self testing and can be run locally using Postman or any software compatible with Postman collections.</p>"},{"location":"API-Security/tools/unit-tests/#suite-structure","title":"Suite structure","text":"<p>The Unit Test suite is divided in several sections:</p> <ul> <li> <p>Server Information</p> </li> <li> <p>Logistics Objects</p> </li> <li> <p>Logistics Events</p> </li> <li> <p>Subscriptions</p> </li> <li> <p>Access Delegations</p> </li> <li> <p>Action Requests</p> </li> </ul> <p>Every section is crafted to assess a distinct segment of the ONE Record API, operating autonomously from the other sections. Within each section, calls must be carried out sequentially. For instance, within the Logistics Events section, the prerequisite folder generates all necessary logistics objects for the test. The Create folder performs tests related to the creation of Logistics Events, while the Get folder attempts to fetch the Logistics Events generated by the preceding calls.</p>"},{"location":"API-Security/tools/unit-tests/#how-to-run-the-unit-tests-suite","title":"How to run the Unit Tests suite","text":"<p>As a prerequisite for utilizing the Unit Test suite, it is necessary to install Postman or a compatible software. Once Postman is installed, please adhere to the subsequent steps to execute the Unit Tests suite.</p> <ul> <li> <p>Download the Postman Collection here. </p> </li> <li> <p>Download the Postman Environment here </p> </li> <li> <p>Import the Unit Test Step Environment in Postman</p> </li> </ul> <p></p> <ul> <li>Import the Collection in Postman</li> </ul> <p></p> <ul> <li>Navigate to the Environments tab, choose the Unit Test Setup environment, and configure the baseUrl to point to the API server under test.</li> </ul> <p></p> <ul> <li>Access the Collections in the right menu and open the previously imported ONE Record API Unit Tests collection.</li> </ul> <p></p> <ul> <li>Utilize the Authorization tab to configure the authorization method implemented in your server.</li> </ul> <p></p> <ul> <li>Once the authorization is configured, you have the option to either execute the calls individually or employ the Collection Run feature. </li> </ul> <p>Each call comprises a set of tests that will be applied to both the response payload and response headers during execution. It's crucial to emphasize that the presentation of test results may vary depending on the tool being used.</p> <p>In case of issues with the Unit Test Suite, please contact the IATA Digital Cargo team (see Community page).</p>"},{"location":"Data-Model/","title":"Introduction","text":""},{"location":"Data-Model/#purpose","title":"Purpose","text":"<p>This ONE Record data model specification is part of the ONE Record standard. It details core concepts of the data model described in the ONE Record cargo and ONE Record core code lists ontologies. It aims to provide explanations and examples for usage of the data model for implementers.</p>"},{"location":"Data-Model/#prerequisites","title":"Prerequisites","text":"<p>It is assumed that the reader is familiar with air cargo vocabulary and the concept of linked data.</p>"},{"location":"Data-Model/#supporting-documents","title":"Supporting Documents","text":"<ul> <li>TDB</li> </ul>"},{"location":"Data-Model/#document-version","title":"Document Version","text":"<p>Version: 0.0.1</p> <p>Status: Not endorsed</p> <p>Note</p> <p>Discussion on the data model is highly encouraged and please contact onerecord@iata.org with any comments or suggested improvements. The version of the ONE Record data model is incremented when the data model is endorsed by the IATA Cargo Operations Technology Board (COTB).</p>"},{"location":"Data-Model/#conventions","title":"Conventions","text":"<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.</p>"},{"location":"Data-Model/#license","title":"License","text":"<p>This document is licensed under MIT license (see License for details).</p>"},{"location":"Data-Model/activity-model/","title":"Activity Model","text":"<p>ONE Record data model 3.0 introduced an activity model. It is built on the superclasses LogisticsService, LogisticsActivity, LogisticsAction, and PhysicalLogisticsObject. The activity model is developed based the design principles Single Source of Truth and Physics-orientation. Further emphasis lays on practicality over abstractation. This page details the core concepts including examples.</p>"},{"location":"Data-Model/activity-model/#logisticsservices","title":"LogisticsServices","text":"<p>A <code>LogisticsService</code> (a subtype of <code>LogisticsObject</code>) describes a set of scheduled and sequenced <code>LogisticsActivities</code> provided by one party to another. The properties are described here.</p> <p> </p> LogisticsService and connected objects"},{"location":"Data-Model/activity-model/#booking","title":"Booking","text":"<ul> <li>TBD</li> </ul>"},{"location":"Data-Model/activity-model/#logisticsactivities","title":"LogisticsActivities","text":"<p>A <code>LogisticsActivity</code> (a subtype of <code>LogisticsObject</code>) describes an activity or process state which is scheduled and executed by an orchestrating party. It involves a set of dedicated tasks in the form of specific <code>LogisticsActions</code> to be performed on <code>PhysicalLogisticsObjects</code>. Some activities are directly bound to a specific <code>PhysicalLogisticsObject</code>. It can be part of one or multiple <code>LogisticsServices</code>. It has an execution status that is actively maintained. The properties are described here.</p> <p> </p> LogisticsActivity and connected objects"},{"location":"Data-Model/activity-model/#unitcomposition","title":"UnitComposition","text":"<p>An <code>UnitComposition</code> (a subtype of <code>LogisticsActivity</code>) describes the process state of a packed/loaded LoadingUnit (Container, ULD, Pallet, ...). It requires a 1:1 connection to a <code>LoadingUnit</code> as long as its execution status is Active. Composing (a <code>LogisticsAction</code>) is used to model the tasks of composing (cargo:Composition) or decomposing (cargo:Decomposition) Pieces for the UnitComposition. An <code>UnitComposition</code> typically begins with a Composition at one location (eg. warehouse of origin) and ends with a Decomposition at another location (eg. warehouse of departure). The properties are described here.</p> <p> </p> UnitComposition and connected objects"},{"location":"Data-Model/activity-model/#transportmovement","title":"TransportMovement","text":"<ul> <li>TBD</li> </ul>"},{"location":"Data-Model/activity-model/#storage","title":"Storage","text":"<ul> <li>TBD</li> </ul>"},{"location":"Data-Model/activity-model/#logisticsactions","title":"LogisticsActions","text":"<p>A <code>LogisticsAction</code> (a subtype of <code>LogisticsObject</code>) describes a specific task performed on one or a set of <code>PhysicalLogisticsObjects</code> in the context of a <code>LogisticsActivity</code>. <code>LogisticsActions</code> serve the purpose of connecting different <code>PhysicalLogisticsObjects</code> to each other and to an <code>LogisticsActivity</code>. It is set at a specific point in time. This can also be a time frame (start and end time). The time type can be either requested, planned or actual. The properties are described here.</p> <p> </p> LogisticsAction and connected objects"},{"location":"Data-Model/activity-model/#composing","title":"Composing","text":"<ul> <li>TBD</li> </ul>"},{"location":"Data-Model/activity-model/#loading","title":"Loading","text":"<ul> <li>TBD</li> </ul>"},{"location":"Data-Model/activity-model/#storing","title":"Storing","text":"<ul> <li>TBD</li> </ul>"},{"location":"Data-Model/activity-model/#check","title":"Check","text":"<ul> <li>TBD</li> </ul>"},{"location":"Data-Model/activity-model/#physicallogisticsobjects","title":"PhysicalLogisticsObjects","text":"<p>A <code>PhysicalLogisticsObject</code> (a subtype of <code>LogisticsObject</code>) is the digital twin of a physically distinguishable object in the air cargo supply chain. It interacts with other <code>PhysicalLogisticsObjects</code> and <code>LogisticsActivities</code> through <code>LogisticsActions</code>. Some <code>PhysicalLogisticsObjects</code> are directly connected to an <code>LogisticsActivity</code> describing its state. The properties are described here.</p> <p> </p> PhysicalLogisticsObject and connected objects"},{"location":"Data-Model/activity-model/#piece","title":"Piece","text":"<ul> <li>TBD</li> </ul>"},{"location":"Data-Model/activity-model/#loadingunit","title":"LoadingUnit","text":"<ul> <li>TBD</li> </ul>"},{"location":"Data-Model/activity-model/#transportmeans","title":"TransportMeans","text":"<ul> <li>TBD</li> </ul>"},{"location":"Data-Model/activity-model/#examples","title":"Examples","text":""},{"location":"Data-Model/activity-model/#booking-with-2-loose-and-1-palletized-pieces-on-one-flight","title":"Booking with 2 loose and 1 palletized pieces on one flight","text":"Booking with 2 loose and 1 palletized pieces on one flight"},{"location":"Data-Model/businessrequirements/","title":"Overview","text":"<p>ONE Record data model has been designed based on technical requirements on one hand (moving from an EDI landscape to data sharing) and on business requirements on the other hand.</p> <p>This part focuses on Business requirements that come from various sources: - IATA CSC Resolutions and Recommended Practices as published in the IATA CSC Resolutions Manual (including standards and regulations) - IATA Working group specific outcomes that fall under IATA Boards governance</p> <p>In order to ensure ONE Record compliance with business requirements we have analyzed the existing documentation and proposed an approach to use ONE Record to convey relevant information.</p>"},{"location":"Data-Model/co2emissions/","title":"CO2 Emission","text":""},{"location":"Data-Model/co2emissions/#requirements","title":"Requirements","text":"<p>CO2 Emissions transparency is an essential topic in order to move toward a more sustainable industry. IATA has been addressing CO2 Emissions measurement methodology, joint with ICAO, in the Recommended Practice 1678, more details can be found on IATA\u2019s website dedicated page: https://www.iata.org/en/programs/cargo/sustainability/carbon-footprint/ Our objective is to provide necessary information in the data model to be able to calculate or predict CO2 emissions for transport movements. Required information relate to: - Typical CO2 coefficient - Distance of the transport movement, calculated and measured - Fuel consumed, calculated and measured - Method used for calculation of the CO2 emissions</p>"},{"location":"Data-Model/co2emissions/#chosen-approach","title":"Chosen approach","text":"<p>Calculation of CO2 emissions require some data element that are relevant on <code>TransportMovement</code> and <code>TransportMeans</code>, it was decided to add a specific <code>CO2Emissions</code> object to contain calculated values.</p> <p><code>CO2Emissions</code> object is generic enough to allow for various calculation methods to be used. The calculation itself is not part of ONE Record scope but we want ot make sure all required information are available.</p>"},{"location":"Data-Model/co2emissions/#data-model","title":"Data model","text":""},{"location":"Data-Model/code-lists/","title":"Code Lists","text":"<p>ONE Record data model 3.0.0 introduced code lists for type safety. These replaced data properties holding enumerations and strings referencing a particular code list.</p> <p>Code lists are built on using custom objects. Many code lists are published as named individuals in the ONE Record coreCodeLists ontology.</p> <p>For unpublished or open code lists, the embedded object CodeListElement is used. A code list is <code>open</code> when it is not  restricted to standard values.</p> <p>The approach also allows to refer codes defined as linked data outside of ONE Record. This includes, for example, code lists published as part of the UN/CEFACT Web Vocabulary .</p> <p>This page provides guidance on how to use code lists in practical use cases.</p>"},{"location":"Data-Model/code-lists/#codelistelement","title":"CodeListElement","text":"<p>The <code>CodeListElement</code> is an embedded object. It is the superclass of all other code lists in ONE Record. As such, all codes defined as named individuals are viewed as instances of the <code>CodeListElement</code>. It features the following properties if a custom instance as embedded object is required:</p> Property Description code Code or short version of a code, for example \"CH\" for Switzerland when referring to the UN/LOCODE code list codeDescription Description or long version of the code, for example \"Switzerland\" for Switzerland when referring to the UN/LOCODE code list codeLevel Integer indicating the level of a code if a code list is hierarchical, for example HS-Codes codeListName \u00a0Official name of the code list without version number when direct reference is not possible, for example \"UN/LOCODE\" when referring to the UN/LOCODE code list codeListReference \u00a0  URL to access the code list the code is taken from, for example \"https://unece.org/trade/cefact/unlocode-code-list-country-and-territory\" for UN/LOCODE. codeListVersion \u00a0Version of the code list, for example \"223-1\" for UN/LOCODE. Used if the property codeListName is used or the version is not apparent from the resource referred to in property codeListReference. <p>Note</p> <p>The properties code and either codeListName or codeListReference at least SHOULD be used if instanced.</p>"},{"location":"Data-Model/code-lists/#examples","title":"Examples","text":""},{"location":"Data-Model/code-lists/#example-1-enumeration","title":"Example 1: Enumeration","text":"<p>In the following example, a named individual defined in the cargo ontology is used to set the loadType of a Piece to LOOSE.</p> <pre><code>{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@type\": \"cargo:Piece\",\n\n    \"cargo:loadType\": \"cargo:LOOSE\"\n}\n</code></pre> <p>(examples-dm/code-lists-enumberation.json)</p>"},{"location":"Data-Model/code-lists/#example-2-closed-code-list","title":"Example 2: Closed Code List","text":"<p>In the following example, a named individual defined in the coreCodeLists ontology is used to set the securityStatus of a SecurityDeclaration to NSC.</p> <pre><code>{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"ccodes\": \"https://onerecord.iata.org/ns/coreCodeLists#\"\n    },\n    \"@type\": \"cargo:SecurityDeclaration\",\n\n    \"cargo:securityStatus\": \"ccodes:SecurityStatus_NSC\"\n}\n</code></pre> <p>Note</p> <p>This code list is defined in the ONE Record coreCodeLists ontology.</p> <p>(examples-dm/code-lists-closed-code-list.json)</p>"},{"location":"Data-Model/code-lists/#example-3-open-code-list-defined-code","title":"Example 3: Open Code List, defined Code","text":"<p>In the following example, named individuals are used to set the specialHandlingCodes of a Piece as EAW and NSC.</p> <pre><code>{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"ccodes\": \"https://onerecord.iata.org/ns/coreCodeLists#\"\n    },\n    \"@type\": \"cargo:Piece\",\n\n    \"cargo:specialHandlingCodes\": \"ccodes:SpecialHandlingCode_EAW\",\n    \"cargo:specialHandlingCodes\": \"ccodes:SecurityStatus_NSC\"\n}\n</code></pre> <p>(examples-dm/code-lists-open-code-list-1.json)</p> <p>Note</p> <p>Both code lists are defined in the ONE Record coreCodeLists ontology. Note that a SecurityStatus is also an acceptable Special Handling Code.</p>"},{"location":"Data-Model/code-lists/#example-4-open-code-list-custom-code","title":"Example 4: Open Code List, custom Code","text":"<p>In the following example, a named individual defined is used to set the specialHandlingCodes of a Piece as EAW. Additionally, a new embedded object is created to set CUS, a custom organization-specific special handling code, using the properties of the CodeListElement.</p> <pre><code>{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"ccodes\": \"https://onerecord.iata.org/ns/coreCodeLists#\"\n    },\n    \"@type\": \"cargo:Piece\",\n\n    \"cargo:specialHandlingCodes\": \"ccodes:SpecialHandlingCode_EAW\",\n    \"cargo:specialHandlingCodes\": [\n        {\n            \"@type\": \"ccodes:SpecialHandlingCode\",            \n            \"cargo:code\": \"CUS\",\n            \"cargo:codeDescription\": \"Custom Special Handling Code\",\n            \"cargo:codeListName\": \"Some Airline Custom Handling Codes\",\n            \"cargo:codeListVersion\": \"2024-04\"\n        }\n    ]\n}\n</code></pre> <p>(examples-dm/code-lists-open-code-list-2.json)</p> <p>Note</p> <p>The code instanced SHOULD be of type required by the property, in this case as SpecialHandlingCode for property specialHandlingCodes.</p>"},{"location":"Data-Model/code-lists/#example-5-codelistelement-undefined-code-list","title":"Example 5: CodeListElement, undefined Code List","text":"<p>In the following example, a new embedded object of type CodeListElement is created to set the hsCode of a Product.</p> <pre><code>{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\"\n    },\n    \"@type\": \"cargo:Product\",\n\n    \"cargo:hsCode\": [\n        {\n            \"@type\": \"cargo:CodeListElement\",            \n            \"cargo:code\": \"9023\",\n            \"cargo:codeDescription\": \"Instruments, apparatus, models\",\n            \"cargo:codeLevel\": 4,\n            \"cargo:codeListName\": \"Harmonized System\",\n            \"cargo:codeListVersion\": \"Nomenclature 2024\"\n        }\n    ]\n}\n</code></pre> <p>(examples-dm/code-lists-code-list-element.json)</p>"},{"location":"Data-Model/code-lists/#example-6-code-list-defined-in-other-vocabulary","title":"Example 6: Code List defined in other Vocabulary","text":"<p>In the following example, a named individual defined in the UN/CEFACT Web Vocabulary is used to set the currencyUnit of a CurrencyValue describing the declaredValueForCarriage of a Waybill to CHF.</p> <pre><code>{\n    \"@context\": {\n        \"cargo\": \"https://onerecord.iata.org/ns/cargo#\",\n        \"unece\": \"https://vocabulary.uncefact.org/\"\n    },\n    \"@type\": \"cargo:Waybill\",\n\n    \"cargo:waybillType\": \"cargo:MASTER\",\n    \"cargo:declaredValueForCarriage\": [\n        {\n            \"@type\": \"cargo:CurrencyValue\",            \n            \"cargo:numericalValue\": 5000.00,\n            \"cargo:currencyUnit\": \"unece:CurrencyCodeList#CHF\"\n        }\n    ]\n}\n</code></pre> <p>(examples-dm/code-lists-other-linked-data-code-list.json)</p>"},{"location":"Data-Model/concepts/","title":"Concepts","text":""},{"location":"Data-Model/concepts/#one-record-data-model-ontologies","title":"ONE Record Data Model Ontologies","text":"<p>The ONE Record data model is specified as an ontology which is also referred to as a semantic model. The ONE Record data model consists of two ontologies: the <code>ONE Record cargo ontology</code> and the <code>ONE Record core code lists ontology</code></p> <p>The <code>ONE Record cargo ontology</code> contains industry concepts, their properties, and their relationships between them. This ontology can be used by analysts, developers, and users to understand the data classes in ONE Record and their relationship to each other.</p> <p>The <code>ONE Record core code lists ontology</code> contains industry code lists as named individuals.</p> <p>Both ontologies are maintained on GitHub.</p>"},{"location":"Data-Model/concepts/#logistics-objects","title":"Logistics Objects","text":"<p>The ONE Record cargo ontology is organized as a set of data classes that represent real world concepts in transport and logistics, also referred to as digital twins. These generic data classes are referred to as <code>Logistics Objects</code> in the world of ONE Record. Each digital twin is an instance of a data classes that inherits from the Logistics Object data class. The data exchange that is facilitated by the ONE Record API is mainly the exchange of Logistics Objects. This is transition from the traditional logistics and transport EDI systems that only exchanged messages and documents. The concept of Logistics Objects is far more extensive since Logistics Objects can be more granular and have very specific usage in different use cases within the logistics and transport domain. Examples of a Logistics Object are a Piece, an IotDevice, a Sensor or a BookingOptionRequest and many more.</p>"},{"location":"Data-Model/concepts/#linked-data","title":"Linked Data","text":"<p>A central approach of ONE Record is to enable the creation of a comprehensive network of data, i.e. data related to specific consignments and shipments are accessible as a unique and single shipment record, i.e. \"one record\" in that network of linked data. To achieve this, the ONE Record data model is based on a ONE Record cargo industry ontology using the Resource Description Framework (RDF) format.</p> <p>Used Namespace Prefixes in ONE Record Context</p> Prefix Namespace Description cargo https://onerecord.iata.org/ns/cargo This refers to the ONE Record cargo ontology. ccodes https://onerecord.iata.org/ns/coreCodeLists This refers to the ONE Record core code lists ontology. api https://onerecord.iata.org/ns/api This refers to the ONE Record API ontology. xsd http://www.w3.org/2001/XMLSchema W3C vocabulary, primarily used for primitive data types (e.g. string, dateTime)"},{"location":"Data-Model/designprinciples/","title":"Design Principles","text":""},{"location":"Data-Model/designprinciples/#one-record-vision","title":"ONE Record Vision","text":"<p>The vision for ONE Record is an end-to-end digital logistics and transport supply chain where data is easily and transparently exchanged in a digital ecosystem of air cargo stakeholders, communities and data platforms. ONE Record is an open standard for data sharing and creates a single record view of the shipment. This standard defines a common data model for the data that is shared via standardized and secured web API. The standard is based on mature but progressive data sharing technologies that are well aligned with the best practices used by leading airlines. This makes it directly accessible to IT teams and service providers. ONE Record standard aims to become an essential part of the Internet of Logistics (IoL) data exchange infrastructure that is emerging. An expert group with stakeholders from the whole logistics and transport chain has been gathered to define the ONE Record data model under IATA\u2019s guidance since 2018.</p>"},{"location":"Data-Model/designprinciples/#the-one-record-data-model","title":"The ONE Record Data Model","text":"<p>The Data Model is an essential part of ONE Record and aims to provide the air cargo industry with a standard data structure for data exchange using JSON-LD that facilitates data integration with existing and new data services. Such a data structure needs to be as simple as possible and needs to be shared and understood by any stakeholder involved. This means that the way data objects are defined is applicable to the relationship between a shipper and a forwarder as well as between a forwarder and a carrier.</p> <p> </p> <p>Goals of ONE Record Data Model</p> <p>This document focuses on the Airline Core Ontology referring to the interaction of General Cargo between shippers and freight forwarders as well as between freight forwarders and Airlines. It is designed to be expandable to other types of cargo such as dangerous goods and special cargo with add-ons to cover as well other logistics partners included in the end-to-end transport supply chain of air cargo.</p> <p> </p> <p>Scope of the data model</p>"},{"location":"Data-Model/designprinciples/#principles","title":"Principles","text":"<p>To achieve the data model objectives, four core design principles have been identified as per below:</p> <p> </p> <p>Core principles</p>"},{"location":"Data-Model/designprinciples/#piece-centric","title":"Piece centric","text":"<p>As defined by the IATA Recommended Practice 1689, a piece is a uniquely identified physical single unit. A Piece may form all or a part of a shipment in the logistics supply chain. As a basic architectural principle, the ONE Record data model is built around the logistic object \u201cpiece\u201d. Having the piece at the center of the data model encourages all parties in the supply chain to deliver detailed data at a high level of granularity.</p>"},{"location":"Data-Model/designprinciples/#physics-oriented","title":"Physics oriented","text":"<p>The data model intends to reflect as much as possible the actual operational data, it has been designed around the concept of Digital Twin: the main objects of the data model represent either physical assets or the physical journey within the logistics supply chain. For instance, the objects Item, Pieces or ULD are easily identified in operations and they bear the same meaning in the data model.</p>"},{"location":"Data-Model/designprinciples/#one-single-source-of-truth","title":"One single source of truth","text":"<p>The ONE Record data model aims at minimizing redundancy of data. In other words, data  should be defined and stored at a single place in the data model. Having data only in a single place has several benefits: - There\u2019s only one single source of truth, instead of having multiple sources that can have contradicting values - Ownership of the data is clear and data management is simplified - Efficiency and performance of the data model are optimized - Data quality is improved, as there will be no corruption of data due to conversion, trans-mission errors or delayed updates</p>"},{"location":"Data-Model/designprinciples/#data-driven","title":"Data driven","text":""},{"location":"Data-Model/designprinciples/#a-data-driven-data-model","title":"A data-driven data model","text":"<p>Cargo industry of today relies on many documents that are sent from stakeholder to stakeholder, some of them being legally binding. The ONE Record data model aims to be data-driven, not document-driven. As documents remain essential for the legal side of logistics, the data model aims to be exhaustive enough to make sure that all required information is captured. Any stakeholder who has access to the proper information should be able to create or re-create any document he needs for operations purposes.</p>"},{"location":"Data-Model/designprinciples/#semantic-web-and-linked-data","title":"Semantic web and linked data","text":"<p>As Tim Berners-Lee, inventor of the World Wide Web, describes it, \u201cthe Semantic Web isn\u2019t just about putting data on the web. It is about making links, so that a person or machine can explore the web of data.  With linked data, when you have some of it, you can find other, related, data.\u201d With the correct usage of web technologies and standard mechanisms, as defined and de-scribed in the API &amp; Security specifications of ONE Record, the linked data enables to connect and query data from different sources. This gives the flexibility for every stakeholder to choose if they want to host their data and make it available to others or use a common platform, from another stakeholder or an IT service provider. The ontology, defined in the Turtle syntax, is the faithful transcription of the logical data model in a machine-readable format. In the ONE Record data model this principle also allows to: - Keep the relation between objects simple - Avoid redundancy of links and information</p> <p>For instance, if a Product is linked to a Piece and a Piece is linked to a Shipment, an explicit link between Product and Shipment is not required.</p>"},{"location":"Data-Model/designprinciples/#events","title":"Events","text":"<p>The status of a Logistic Object is a key element of the transparency and tracking possibilities that ONE Record wants to provide. The generic object Event enables to capture the evolution of all objects in the logistics and transport supply chain. Events can, for instance, be used to monitor Cargo iQ milestones, the state of physical assets or the status of transport segments such as Departed, Arrived, etc. This includes the planned events as per the routemap as well. </p>"},{"location":"Data-Model/dg/","title":"Dangerous Goods","text":""},{"location":"Data-Model/dg/#requirements","title":"Requirements","text":"<p>The requirements for Dangerous Goods are strongly based on the Cargo-XML message xSDG that contains all required information for the transport of dangerous goods. The details of the information can be found in the Cargo-XML toolkit and thus will not be fully transcribed in this document.</p>"},{"location":"Data-Model/dg/#chosen-approach","title":"Chosen approach","text":"<p>The different data required in the xSDG message are split among objects Piece, Product, Item and some dedicated objects: DgProductRadioactive, DgRadioactiveIsotope and DgDeclaration. A focus is made on making sure that all legal data required are within ONE Record data model.</p> <p>As Dangerous Goods cargo require specific data, ProductDg, ItemDg and PieceDg objects are added to simplify the data model, they are subtypes of Product, Item and Piece objects.</p> <p>In details information related to the packaging concept of Dangerous Goods is added on the PieceDg object to fully integrate these requirements.</p> <p>DgProductRadioactive and DgRadioactiveIsotope objects contain specific data related to radioactive products and are linked to ProductDg object.</p> <p>DgDeclaration object is used to contain data related to the existing Dangerous Goods Declaration, it is linked to one or many PieceDg objects.</p> <p></p>"},{"location":"Data-Model/dg/#data-model","title":"Data model","text":"<p>All Dangerous Goods requirements result in the creation of new subtypes or objects, they are described in details below. \u2003   <p></p> </p>"},{"location":"Data-Model/distribution/","title":"Distribution","text":""},{"location":"Data-Model/distribution/#requirements","title":"Requirements","text":"<p>The Modernizing Cargo Distribution working group (MCD) has defined the standardized Sales &amp; Booking process to highlight the business and data requirements of Distribution. The current Sales &amp; Booking process is the following:</p> <p></p> <p>In addition a specific Cancellation process has been defined:</p> <p></p> <p>In this process, the quote request should contain a minimum set of information:</p> <p></p> <p>The second step, airline presenting booking options, needs to ensure that the following data are included:</p> <p></p> <p>The booking confirmation step ends the Quote &amp; Book process, it should ensure that some data are validated and agreed between the two parties. The data are:</p> <p></p> <p>Further discussions with MCD working group members allowed to identify the need to properly track the shipment status and data throughout the shipment lifecycle. Essential shipment data such as Weight can evolve as the Quote &amp; Book process moves forward, the data model and ONE Record specifications need to ensure that this is possible. The group came up with a proposal for a standard shipment lifecycle as depicted below:</p> <p></p> <p>This is an example of a typical shipment lifecycle that should help standardize some of the events and milestones that are required on the business side of the Quote &amp; Book process.</p>"},{"location":"Data-Model/distribution/#chosen-approach-in-the-data-model","title":"Chosen approach in the data model","text":"<p>The chosen approach is on multiple levels to make sure that all requirements are met.</p>"},{"location":"Data-Model/distribution/#definition-of-appropriate-objects-to-reflect-distribution","title":"Definition of appropriate objects to reflect Distribution","text":"<p>Four main objects have been defined to represent the Distribution: - Booking Shipment: In the context of Distribution, and only distribution, the BookingShipment is a simplified mix between Piece and Shipment to meet a quote request minial requirements. - Booking Option Request: It refers to the quote request. - Booking Option: A Booking Option is an offer made by a carrier that is supposed to be bookable. - Booking Request: It refers to the booking confirmation request, equivalent to (X)FFR message. - Booking: Used for confirmed bookings, it contains all information that have been agreed between customer and carrier.</p> <p></p> <p>Along those two main objects, a few simpler objects are added to ensure that all information are available for the Sales &amp; Booking process. It includes Routing,  ScheduledLegs, BookingTimes, BookingSegment, CarrierProduct, Price, Ratings and Ranges.</p> <p>Ranges are included to address challenges where cargo tendered to Airline has variance versus the booking option request dimension and/or weight.  </p> <p>As the Sales &amp; Booking process may occur before actual operations, we have chosen to allow for some data property at BookingOptionRequest level that are to be used for the sole purpose of the quote request. Thus the expectedCommodity and requestedHandling data properties are used at an early stage to indicate what the forwarder intends to ship. The BookingShipment object, which is still being finalized, is also used for that purpose, with more detailed information on intended shipment.</p> <p>The expectedCommodity values are to be discussed and decided by the MCD working group, the requestedHandling values shall refer to special handling codes.</p>"},{"location":"Data-Model/distribution/#one-record-mechanisms-to-ensure-keeping-track-of-data-throughout-the-lifecycle","title":"ONE Record mechanisms to ensure keeping track of data throughout the lifecycle","text":"<p>Like all Logistic Objects, Shipments can have Events. An Event can record the state of a shipment (e.g. \u201cQuote Requested, Booking requested, etc.) and reflect the lifecycle.</p> <p>The Audit Trail specified in ONE Record API can be used to recover older versions of the objects based on, for instance, a specific date and time.</p>"},{"location":"Data-Model/distribution/#data-model","title":"Data model","text":"<p>Details of the objects and their data properties can be found in the Ontology or the PDF version of the data model.</p> <p>The impacts on the conceptual data model and the way these objects are supposed to interact with each other are quite straightforward and explained in the figure below.</p> <p></p> <p># API mechanism</p> <p>Based on the Data Model, a standard API workflow has been designed. The use case shows an interaction between a Customer (Freight Forwarder) and a Carrier where both stakeholders have their own ONE Record servers. Using a 3rd-party service provider would be the same workflow.</p> <p></p>"},{"location":"Data-Model/features/","title":"Overview","text":"<p>TBD</p>"},{"location":"Data-Model/ic/","title":"Interactive Cargo","text":""},{"location":"Data-Model/ic/#requirements","title":"Requirements","text":"<p>The Interactive Cargo requirements are still a work in progress however the dedicated taskforce has drafted a Recommended Practice that expresses requirements as to what kind of data should be recorded. The recommended practice follows the guiding principles of ONE Record, meaning that the integration of the requirements are quite straightforward and in line with the existing data model.</p> <p>The recommended practice highlights:</p> <p>IoT Devices: - They are \u201ctangible objects that provide the technological interface to interact with or obtain information about physical and other digital entities in an Internet-of-Things (IoT) ecosystem. The IoT device extends physical entities and allows them to be part of the digital world.\u201d - IoT devices must contain some information to identify them: manufacturer, model, name, description and serial number. - IoT devices may include sensors that record measurements</p> <p>Sensor: - They refer to \u201ca device that senses and reports physical or chemical properties from the physical environment and transforms them into digital data that can be transmitted over a network.\u201d - Sensors contain information to identify them: name, description, serial number, type - The type gives information on the type of measurements (property) recorded by the sensor, the RP highlights multiple types of sensors e.g. geolocation, thermometer or humidity. - Most observed properties have a datatype double and a unit of measurement. Only the geolocation differs as the geolocation contains a triplet of values latitude, longitude, altitude.</p>"},{"location":"Data-Model/ic/#chosen-approach","title":"Chosen approach","text":"<p>To meet the requirements of the Interactive Cargo RP there IotDevice, Sensor, and Measurements objects that have been created. In order to respect the Digital Twin principle and align on the real world, multiple IotDevice objects can be linked to any Logistic Object that refers to known physical entities. Such LO can be a Piece, a ULD, a specific location, etc.</p> <p>Then an IotDevice can be linked to multiple Sensor objects that record a single type Measurements.</p> <p></p>"},{"location":"Data-Model/ic/#data-model","title":"Data Model","text":"<p>To take into account the specificity of the Geolocation sensor type, subtypes of Sensor and Measurements have been added to ease the usage of the data model.</p> <p></p>"},{"location":"Data-Model/implementation-guidelines/","title":"Implementation Guidelines","text":""},{"location":"Data-Model/implementation-guidelines/#paper-transport-documents-in-one-record","title":"Paper transport documents in ONE Record","text":"<p>The general concept of legal entities like MAWB or HAWB in ONE Record does not differ from the established concepts in term of legal preconditions or validity. All the legal requirements remain in place and must be fulfilled. But because of the architecture of ONE Record, changes in the practical management of data are required. In the context of ONE Record, a legal entity like the AWB has the following characteristics: - A defined set of data fields, as described in the corresponding Logistics Object</p> <p>These data fields are either attributes (e.g. type of AWB) or defined as links to other LOs in the data model (e.g. Booking or Shipment).</p> <ul> <li>From defined owners</li> </ul> <p>Due to legal requirements, some fields must be provided by the accountable party. E.g. in case of MAWB, the forwarder must be owner of most data fields, although some data fields (like the transport segments with the planned routing) are owned by the carrier, and some are owned by shippers (e.g. the commodity information).</p> <ul> <li>For a special purpose (\u201ce.g. Master Air Waybill\u201d)</li> </ul> <p>The traditional paper documents fulfil a defined legal purpose. To fulfil this purpose is the only function of the correlating Logistics Object (e.g. \u201cAWB Logistics Object\u201d).</p> <ul> <li>At a special point in time, consented by two parties (e.g. \u201cShipper\u201d and \u201cCarrier\u201d)</li> </ul> <p>The data of the LO is intentionally shared by the contractual parties at a defined point in time, to freeze that version of the data set as the one used for the contractual purpose. Data might change afterwards, but the changed revisions will not be taken into consideration, unless a new version of the legal entity is generated and consented on.</p>"},{"location":"Data-Model/implementation-guidelines/#master-awb","title":"Master AWB","text":""},{"location":"Data-Model/implementation-guidelines/#digital-awb-approach","title":"Digital AWB approach","text":"<p>The digital AWB approach follows the four principles of avoiding redundancy, marking outdated data fields as deprecated, removing all data fields without a legal impact and, fourthly, separating all non-legal, physical characteristics in a separate LO (Shipment).</p> <p>Firstly: remove redundancies with any other data source and data fields covered by ONE Record mechanisms. Most data classically found in the AWB are essential parts of the Booking Option and Booking Option Request as well as the Piece and Shipment objects. As those LOs are created earlier in the logical chain, the data in the booking process is in the lead and referred to in the AWB. Data like WAYBILL_NUMBER, the total gross weight, the origin and destination, or the number of pieces originate from the Booking, not the AWB. Additionally, some information is not required anymore, especially the total-fields, as the mechanism to be used in ONE Record would be to count the correlated items themselves.</p> <p>Secondly: Mark outdated data fields clearly as deprecated. All the data fields found under the WayBill Lane in the cIMP/cXML data catalogue are considered to be outdated, especially the IATA Rates. The whole architecture of these fields, presenting characteristics of groups of pieces, is already not supported by most carriers nowadays. Additionally, the structure of this LO is not compatible with the principles of ONE Record.</p> <p>Thirdly: Remove all data fields that have no legal impact on the AWB. A lot of information was traditionally part of the AWB, as the AWB used to be the major \u2013 and often exclusive \u2013 source of information on the shipment. With ONE Record, any data can shared in correlation with the AWB number or any other unique ID, but then don\u2019t have to be part of the AWB. This mostly effects fields like the accounting information, the airline product names and codes, or the insurance information. Also, parts of the other charges section not be part of the contract between forwarder and carrier, as the add up during the execution of the AWB.</p> <p>Fourthly: All physical characteristics of the totality of pieces under one contract can be found in the Shipment LO. This does not include piece-related information, as they are characteristics of pieces themselves, but physical characteristics that are shared by all pieces under that contract. The data fields of the AWB LO and owners of each of these fields are better described in the Use Case document for the ONE Record data model (insert reference).</p>"},{"location":"Data-Model/implementation-guidelines/#pieces-ulds-in-awb-wording","title":"Pieces / ULDs in AWB wording","text":"<p>The legal terminology for BUPs in the AWB is not consistent, as BUPs don\u00b4t count as ULDs, but as pieces. To solve this problem, the following solution is suggested: Whenever a BUP is pre-sented by the forwarder, additionally to the ULD LO, a single Piece LO is created with the dimensions and gross weight of the packed ULD.</p>"},{"location":"Data-Model/implementation-guidelines/#42-house-awb","title":"4.2. House AWB","text":"<p>The House Waybill is made up from data provided by the Customer in the Shippers Letter of Instruction (SLI) which is then enhanced by the forwarder as necessary to include specific data required by the forwarder, carrier and other authorities. This then provides the door to door route map of the pieces linked to the House Waybill for cIQ transportation plan. </p>"},{"location":"Data-Model/la/","title":"Live Animals","text":""},{"location":"Data-Model/la/#requirements","title":"Requirements","text":""},{"location":"Data-Model/la/#shippers-certification-for-live-animals","title":"Shipper\u2019s certification for Live Animals","text":"<p>The shipper\u2019s certification for Live Animals is an essential document required to transport live animals. The requirements are described in the Live Animals Regulation as published by IATA.</p> <p></p>"},{"location":"Data-Model/la/#cites-epermit","title":"CITES ePermit","text":"<p>The CITES permit is a the key instrument to control the trade in the species it protects. An extensive work has been done in order to define the requirements for the CITES ePermit, including the ePermit Core Component Data Model V2.0. The details of the ePermit and the associated data model are in the \u201cCITES electronic permitting toolkit Version 2.0\u201d document that can be found here.</p>"},{"location":"Data-Model/la/#chosen-approach","title":"Chosen approach","text":"<p>Requirements have shown that the data model requires new objects to capture the specific information for Live Animals. These objects are: - PieceLiveAnimals object, subtype of the Piece class containing data specific for Live Animals - EPermitConsignement object to reflect the pieces (Animals) contained in a eCITES permit - LiveAnimalsEpermit object to reflect the eCITES permit document requirements and allow for its creation from the ONE Record data model - EpermitSignature object to take into account Signature requirements in the eCITES permit, mainly identifying the signatory and recording the date of signature</p> <p></p> <p>The mapping with the CITES ePermit data model has been made to ensure all required information are available, it is available in details in the Excel version of the data model on GitHub in the document IATA-1R-DataModel-LiveAnimalsIntegration Nov 2020.</p> Object Data property Description eCITES box ePermit class Epermit Epermit permitNumber \"The original number is a unique number allocated to each document by the relevant Management Authority.\" 1 HeaderExchangedDocument-ID Epermit permitTypeCode Code specifying the document name. 1 HeaderExchangedDocument-TypeCode Epermit permitTypeOther Description if TypeCode is Other 1 HeaderExchangedDocument-Name Epermit permitCopyIndicator Indicates if the permit is a copy (true) or an original (false) 1 HeaderExchangedDocument-CopyIndicator Epermit transactionPurposeText Purpose of the transaction in free text 5a HeaderExchangedDocument-Purpose Epermit transactionPurposeCode Code indicating the purpose of the transaction 5a HeaderExchangedDocument-PurposeCode Epermit specialConditions Special conditions 5 HeaderExchangedDocument-Information Epermit permitValidUntil Permit Valid until 2 HeaderExchangedDocument-ReferenceReferencedDocument-EffectiveSpecifiedPeriod Epermit permitValidfrom Permit Valid from HeaderExchangedDocument-ReferenceReferencedDocument-EffectiveSpecifiedPeriod Epermit issuingAuthoritySignature Signature details of the Issuing Authority (box 6) 6 FirstSignatoryDocumentAuthentication Epermit applicantSignature Signature details of the Applicant (box 4) 4 SecondSignatoryDocumentAuthentication Epermit issuerSignature \"Signature details of the Permit issuer (box 13) includes date of issuance of the permit and associated location\" 13 Epermit examiningSignature Signature details of the Examining authority (box 14) 14 FourthSignatoryDocumentAuthentication Epermit consignor \"Consignor company details including complete name and address (box 4 already in applicantSignaure ?)\" Epermit consignee \"Consignee company details including complete name and address (box 3)\" 3 Epermit transportContractTypeCode Code specifying the transport document name 15 SpecifiedSupplyChainConsignment-TransportContractReferencedDocument-TypeCode Epermit transportContractId Reference to the Air Waybill or other transport contract document 15 SpecifiedSupplyChainConsignment-TransportContractReferencedDocument-ID Epermit consignments Reference to the pieces and properties linked to the Permit 7 to 12 IncludedSupplychainConsignment EpermitConsignment EpermitConsignment consignementItems Reference to the pieces EpermitConsignment examiningQuantity Quantity measured by examining authority (box 14) 14 SpecifiedSupplyChainConsignment-ExaminationTransportEvent-UnitQuantity EpermitConsignment usedToDateQuotaQuantity total number of specimens exported in the current calendar year and the current annuela quota for the species concerned (box 12b) 11a IncludedSupplychainConsignmentItem-ApplicableCrossBorderRegulatoryProcedure-UsedToDateQuantity EpermitSignature EpermitSignature signatureTypeCode \"Code specifying a type of government action such asinspection detention fumigation EpermitSignature securityStampId Security stamp ID 5b \u2026Signatory\u2026ID EpermitSignature signatureStatement Signatory signature authentication text \u2026Signatory\u2026Statement EpermitSignature signatoryId Signatory company name \u2026Signatory\u2026ProviderTradeParty EpermitSignature signatoryAddress Full address of the signatory company \u2026Signatory\u2026ProviderTradeParty-PostalTradeAddress EpermitSignature signatoryRepresentant Name of the official representative person of the Issuing Authority \u2026Signatory\u2026ProviderTradeParty-SpecifiedRepresentativePerson EpermitSignature signatureLocation Place where signature occurred or was registered \u2026Signatory\u2026IssueLogisticsLocation Piece Piece shippingMarks (see SLI) PieceLiveAnimals PieceLiveAnimals originTradeCountry country of origin (box 12) 12 IncludedSupplychainConsignmentItem-PhysicalLogisticsShippingMarks-OriginTradeCountry PieceLiveAnimals exportTradeCountry Country of last re-export (box 12a) 12a IncludedSupplychainConsignmentItem-PhysicalLogisticsShippingMarks-ExportTradeCountry PieceLiveAnimals originReferencePermitDatetime Issuing date for Origin reference permit or re-export reference Certificate (box 12) 12 IncludedSupplychainConsignmentItem-PhysicalLogisticsShippingMarks-AssociatedReferencedDocument-IssueDateTime PieceLiveAnimals originReferencePermitTypeCode identifier of Origin reference permit or re-export reference Certificate (box 12/12a) 12/12a IncludedSupplychainConsignmentItem-PhysicalLogisticsShippingMarks-AssociatedReferencedDocument-TypeCode PieceLiveAnimals originReferencePermitId identifier of Origin reference permit or re-export reference Certificate (box 12/12a) 12/12a IncludedSupplychainConsignmentItem-PhysicalLogisticsShippingMarks-AssociatedReferencedDocument-ID PieceLiveAnimals quantityAnimals Quantity including units (box 11) 11 IncludedSupplychainConsignmentItem-PhysicalLogisticsShippingMarks-TransportLogisticsPackage-ItemQuantity PieceLiveAnimals goodsTypeCode \"Appendix number of the convention (I II or III) (box 10)\" 10 PieceLiveAnimals goodsTypeExtensionCode Source of the appendix number (box 10) 10 IncludedSupplychainConsignmentItem-IncludedSupplyChainTradeLineItem-TypeExtensionCode PieceLiveAnimals specimenDescription \"Description of specimens including age and sex if LA (box 9)\" 9 PieceLiveAnimals specimenTypeCode \"Description of specimens CITES type code (box 9)\" 9 PieceLiveAnimals speciesCommonName Species common name (box 8) 8 IncludedSupplychainConsignmentItem-IncludedSupplyChainTradeLineItem-SpecifiedTradeProduct-CommonName PieceLiveAnimals speciesScientificName Species scientific name (box 7) 7 IncludedSupplychainConsignmentItem-IncludedSupplyChainTradeLineItem-SpecifiedTradeProduct-ScientificName PieceLiveAnimals categoryCode Operations code ID. Refers to the number of the registered captive-breeding or artifical propagation operation (box 12b) 12b IncludedSupplychainConsignmentItem-ApplicableCrossBorderRegulatoryProcedure-CategoryCode PieceLiveAnimals acquisitionDatetime Defined in Resolution Conf. 13.6 and is required for pre-Convention specimens (box 12b) 12b IncludedSupplychainConsignmentItem-ApplicableCrossBorderRegulatoryProcedure-AcquisitionDateTime PieceLiveAnimals annualQuotaQuantity total number of specimens exported in the current calendar year and the current annuela quota for the species concerned (box 11a) 11a IncludedSupplychainConsignmentItem-ApplicableCrossBorderRegulatoryProcedure-AnnualQuotaQuantity"},{"location":"Data-Model/la/#data-model","title":"Data model","text":"<p>The objects added for Live Animals integration have been specified, accordingly with the existing models.   <p> </p> </p>"},{"location":"Data-Model/pharma/","title":"Pharmaceutical Products","text":""},{"location":"Data-Model/pharma/#requirements","title":"Requirements","text":"<p>The requirements for pharmaceutical shipments may differ depending on the parties involved. We have highlighted two cases.</p> <p> From Shipper to forwarder:</p> <ul> <li>Product Temperature Range: the shipper express the temperature range the shipment need to handled. The requirement is expressed in free format.</li> <li>Packaging Technology: passive or active technology</li> <li>Packaging Type: packaging type as per chapter 6.3.7 of the TCR</li> <li>Unit Loading Device: information related to the ULD (exemple: uldTypeCode, serialNumber, ownerCode, ataDesignator)</li> </ul> <p> From forwarder to carrier:</p> <ul> <li>Product Temperature Range: Special handling code (COL, CRT, ERT, FRO)</li> <li>Packaging Technology: Special handling code (ACT, PIP)</li> <li>Packaging Type: as per chapter 6.3.7</li> <li>Unit Loading Device: see ULD data elements from ONE Record data model</li> </ul>"},{"location":"Data-Model/pharma/#chosen-approach","title":"Chosen approach","text":"<p>Data model covers the pharmaceutical shipments requirements using the ULD, Piece, ServiceRequest and SpecialHandling objects.</p> <p></p> <p>The ULD object capture all the information related to the ULD used by the shipper/forwarder</p> <p>The information is captured at Piece level. The Piece object enables to capture all the required information, including goods description, product information, ULD information, handling information, packaging type as per chapter 6.3.7 of the TCR. If accompany certificate are required, they can be digitalized (if acceptable) in PDF format for example and the link to the PDF document can be inserted using the externalReference data property.</p> <p>The SpecialRequest object is used to capture the shipper requirements. Either the special handling code can be inserted (if known), or the requirement can be inserted in full text using the statementText attribute. Requirements may include:</p> <ul> <li>Active or Passive packaging</li> <li>Product temperature range</li> </ul> <p>The SpecialHandling object aims to capture all the special handling codes. For pharma product, the use of the below codes have been identified: - PIL: Pharmaceuticals - ACT: Active Temperature Controlled System - PIP: Passive Insulated Packaging - COL: between +2\u00b0C to +8\u00b0C - CRT: between +15\u00b0C to +25\u00b0C - ERT: between +2\u00b0C to +25\u00b0C - FRO: below -18\u00b0C</p>"},{"location":"Data-Model/pharma/#data-model","title":"Data model","text":"<p>As a result there are no specific part of the data model that were required for the integration of pharmaceutical shipments.</p>"},{"location":"Data-Model/sli/","title":"Shipper letter of instriction","text":""},{"location":"Data-Model/sli/#requirements","title":"Requirements","text":"<p>The Shipper's Letter of Instruction (SLI) is a document in which the shipper gives handling instructions for the freight forwarder. It also allows the freight forwarder to act on the shipper\u2019s behalf.</p> <p>The SLI is part of CSC Recommended Practice 1650 and should refer to the United Nations Layout Key for Trade Documents in its paper form.</p> <p>The requirements expressed in this document are based on the XSLI Cargo-XML message, 8th Edition, they can be summarized as follows:</p> <p>XSLI Header: - Letter of instruction number / customs reference - Consignor details, including contact information, tax/customs information - Consignee details, including contact information, tax/customs information - Freight forwarder details, including contact information, tax/customs information - Other parties details - Transport and booking details, including terms of delivery and transport equipment details - Special handling information, special service request, reference documents - Currency details</p> <p>Packaging detail: - Complete packages details, including weights, volumes, etc.</p> <p>Commodity details: - Complete commodity details, including dangerous goods specific data elements</p>"},{"location":"Data-Model/sli/#chosen-approach","title":"Chosen approach","text":"<p>The SLI details are mainly at Piece level. - On the <code>Piece</code>: Declared values for customs and for carriage as well as package marks information. - On the <code>Shipment</code>: Terms of delivery (expected delivery date and location, incoterms), indicators for Weight valuation and Other charges (Prepaid or Collect). - On the <code>TransportMovement</code>: Mode Qualifier to indicate Pre-Carriage, Main-Carriage or On-Carriage.</p> <p>The overall idea is that the SLI document in itself does not exist in the Data Model but can be recreated using existing objects and their data properties. It is then a matter of mapping the right information, essentially: - Parties are represented by Company objects - Packaging and handling details are data properties of Pieces and Shipment objects - Commodity details are data properties of Item and Product objects - Transport details are data properties of Transport movement linked to the pieces</p>"},{"location":"Data-Model/sli/#data-model","title":"Data model","text":""},{"location":"Data-Model/uldtracking/","title":"ULD Tracking","text":""},{"location":"Data-Model/uldtracking/#requirements","title":"Requirements","text":"<p>The ULD global tracking business requirements (main operational procedures and minimum data elements to be captured) are based on: - the existing ULD Control Receipt (UCR) (see Cargo Services Conference Recommended Practice 1654 and Cargo-XML Message XUCR) - the suggested ULD handover requirements between cargo handling agent (in the warehouse) and ramp handling agent taken consideration of UCR/ XUCR and Cargo iQ FIW/FOW events, and - the reconciliation requirements for aircraft loading/ unloading of ULDs taken into consideration of CPM/ UWS/ UCM messages</p> <p>For easy understanding, the recommendation looks at ULD tracking in four scenarios with respective data elements required as follows:</p> <ul> <li>ULD ground transfer: XUCR data elements</li> <li>ULD handover between cargo warehouse and ramp: XUCR data elements (recommended) or relevant data elements in Cargo iQ FIW/ FOW events (optional)</li> <li>Aircraft Loading/ Departure: relevant data elements in CPM/ UWS/ UCM</li> <li>Aircraft Arrival/ Unloading: relevant data elements in CPM/ UWS/ UCM</li> </ul>"},{"location":"Data-Model/uldtracking/#chosen-approach","title":"Chosen approach","text":"<p>The ULD tracking requirements can be mainly managed with the usage of proper Events in ONE Record, the chosen approach consists of the following: o   Addition of new data elements to the ULD objects, related to damage and details of the ULD</p> <p>For better transparency we propose to split the ground transfer/handover using 2 events. This allows to properly identify the party responsible for the ULD at a given time: - ULD Transfer: the transferring party creates a \u201cTransfer\u201d Event associated to the ULDs - ULD Reception: the receiving party creates a \u201cReceived\u201d Event associated to the ULDs With this approach we recommend that events are created on every ULD to ensure proper tracking of the assets.</p> <p></p> <ul> <li>Aircraft Loading and Unloading are managed through Events associated to the ULDs   <p></p> </li> </ul> <p>The Transport movement gives details about the associated flight (flight number, time of departure, etc.). The loadingPosition field in the Event allows to record the loading position of the ULD in the aircraft (e.g. lower or main deck), it is managed by a EventUld subtype of the Event.</p>"},{"location":"Data-Model/uldtracking/#data-model","title":"Data Model","text":"<p>The ULD tracking requirements have highlighted the need for a few additional data properties on the ULD object as well as the need to create a EventUld subtype of Event to record the loading position.</p> <p></p>"},{"location":"Data-Model/visualizer/","title":"Data Model Visualizer","text":""},{"location":"Data-Model/visualizer/#introduction","title":"Introduction","text":"<p>While the Data Model is primarly defined in the ontology in TTL format, there is a demand to have a visual version of the ONE Record Data Model.</p> <p>Our objective is to have an automated tool that allows to transcribe the ontology into a visual version.</p>"},{"location":"Data-Model/visualizer/#data-model-visualizer","title":"Data Model Visualizer","text":"<p>The tool is based on the open-source SQL Schema Visualizer available here: https://github.com/sqlhabit/sql_schema_visualizer</p> <p>We host the tool on GitHub: https://aloccid-iata.github.io/ontology_visualizer/ (temporary repository)</p> <p>The tool has been customized to fit our needs in terms of visual and features.</p>"},{"location":"Data-Model/visualizer/#data-mdodel-visualizer-in-details","title":"Data Mdodel Visualizer in details","text":""},{"location":"Data-Model/visualizer/#preparing-the-ontology","title":"Preparing the ontology","text":"<p>The ontology in its TTL format cannot be used directly in the Visualizer, it needs to be  transcribed in the format used by the SQL Schema Visualizer.</p> <p>// to be further documented</p>"},{"location":"Data-Model/visualizer/#main-technical-aspects","title":"Main technical aspects","text":"<p>// to be further documented</p>"},{"location":"Data-Model/visualizer/#additional-features","title":"Additional features","text":"<p>Additional features have been added to enhance the user experience and facilitate the understanding of the data model.</p>"},{"location":"Data-Model/visualizer/#navigation-between-objects","title":"Navigation between objects","text":"<p>When looking at an object, you can click on the data type of a property if it's another object. The interface will directly zoom on that object to facilitate navigation among objects.</p>"},{"location":"Data-Model/visualizer/#descriptions-and-comments","title":"Descriptions and comments","text":"<p>Descriptions of objects and properties are within the ontology, along with some comments when relevant. These can be also found in the visualizer by hovering over a property pressing shift.</p> <p></p>"},{"location":"Data-Model/visualizer/#search","title":"Search","text":"<p>Search is possible within the visualizer. When text is entered, all objects and properties containing the text are displayed. When clicking on a result the relevant oject is displayed. Note that clicking on a property will display the object containing that property.</p> <p></p>"},{"location":"Data-Model/waybill/","title":"Air Waybill","text":""},{"location":"Data-Model/waybill/#requirements","title":"Requirements","text":"<p>From a paper perspective the Air Waybill requirements are described in Cargo Services Conference Resolutions Manual (CSCRM) in Resolution 600a. Especially all boxes of the paper Waybill are identified with details on how to properly fill in information.</p> <p>From an electronic perspective the Air Waybill relies on (deprecated) Cargo-IMP FWB message and Cargo-XML XFWB message. Discrepancies exist between FWB and XFWB essentially because Cargo-IMP was discontinued in 2014 and context has evolved.</p> <p> </p>"},{"location":"Data-Model/waybill/#chosen-approach","title":"Chosen approach","text":"<p>Approach needs to be two-fold: - Firstly we take into account the paper requirements, this leads to a mapping that is presented below. - Secondly the electronic requirements lead to a mapping that has been done between XFWB and ONE Record in the corresponding section in the Data Orchestration tab [link]  </p>"},{"location":"Data-Model/waybill/#paper-waybill-mapping","title":"Paper Waybill mapping","text":"Box Air Waybill requirements 1R mapping Comment 1A Airline Code Number Waybill#waybillPrefix 1B Serial Number Waybill#waybillNumber 1 Airport of Departure Waybill#departureLocation 1C Issuing Carrier's Name and Address involvedParty#Party From Party: use partyDetails to capture the carrier's name and address. Use ParticipantIdentifier to specifiy AIR for Airline 1D Reference to Originals - 1E Reference to Conditions of Contracts - 2 Shipper's Name and Address Waybill#involvedParty In Party: use partyDetails to capture the shipper's name and address. Use partyRole to specifiy SHP for Shipper or FFW for Freight Forwarder 3 Shipper's Account Number - 4 Consignee's Name and Address Waybill#involvedParty In Party: use partyDetails to capture the consignee's name and address. Use\u00a0 partyRole to specifiy CNE for Consignee 5 Consignee's Account Number - 6 Issuing Carrier's Agent Name and City Waybill#involvedParty In Party: use partyDetails to capture the Issuing carrier's IATA Cargo Agent 7 Agent's IATA Code Waybill#involvedParty In Party: use partyDetails to capture the iataCargoAgentCode from Company 8 Account Number - 9 Airport of Departure and Requested Routing TransportLegs#departureLocation Where legNumber is '1' 11A To (by 1st carrier) TransportLegs#arrivalLocation Where legNumber is '1' 11B By 1st carrier - 11C To (by 2nd carrier) TransportLegs#arrivalLocation Where legNumber is '2' 11D By 2nd carrier - 11E To (by 3rd carrier) TransportLegs#arrivalLocation Where legNumber is '3' 11F By 3rd carrier - 18 Airport of Destination TransportLegs#arrivalLocation Where legNumber is 'greater' 19A Requested Flight TransportLegs#transportIdentifier Where legNumber is '1' 19B Requested Date TransportLegs#departureDate Where legNumber is '1' 10 Accounting Information Waybill#accountingInformation 12 Currency - extract from the currency used in the Waybill 13 Charges Codes - For Carrier Use Only Waybill#carrierChargeCode 14A/14B Weight/Valuation Charges Waybill#weightValuationIndicator 15A/15B Other Charges at Origin Waybill#otherChargesIndicator 16 Declared Value for Carriage Waybill#declaredValueForCarriage 17 Declared Value for Customs Waybill#declaredValueForCustoms 20 Insurance Shipment#insurance 21 Handling information Shipment#specialHandlingCodes + textualHandlingInstructions Retrieve Handling Information captured for each piece of the shipment 21A Special Customs Information (SCI) Shipment#customsInformation 22A Number of pieces and RCP WaybillLineItem#pieceCountforRate Manual data capture 22B Gross Weight WaybillLineItem#grossWeightForRate Manual data capture 22C Kg/Lb WaybillLineItem#grossWeightForRate Unit of measurement to be specified in unit of Value (see table 1.48 Measureement Unit Code) 22Z Service Code Waybill#serviceCode 22D Rate Class WaybillLineItem#rateClassCode 22E Commodity Item Number WaybillLineItem#commodityItemNumberForRate 22F Chargeable Weight WaybillLineItem#chargeableWeightForRate 22G Rate/Charge WaybillLineItem#rateCharge 22H Total - Calculated value 22I Nature and Quantity of Goods WaybillLineItem#goodsDescriptionForRate + dimensionsForRate 22J Total Number of Pieces Shipment#pieces Count of Pieces linked to Shipment 22K Total Gross Weight Shipment#totalGrossWeight 22L Total - Calculated value 23 Other Charges Waybill#otherCharges 24A Prepaid Weight Charge - Calculated value 25A Prepaid Valuation Charge Waybill#declaredValueForCarriage 26A Prepaid Tax Waybill#otherCharges Sum of otherCharges where chargePaymentType is 'P' Prepaid Indicator (see code list 1.5) and otherChargeCode are tax codes related (see code list 1.2) 27A Due Agent Waybill#otherCharges Sum of otherCharges where chargePaymentType is 'P' Prepaid Indicator (see code list 1.5) and entitlement is 'A' Other Charges due Agent (see code list 1.3) 28A Due Carrier Waybill#otherCharges Sum of otherCharges where chargePaymentType is 'P' Prepaid Indicator (see code list 1.5) and entitlement is 'C' Other Charges due Carrier (see code list 1.3) 29A Untitled box - 30A Total Prepaid - calculated value: Weight Charge (prepaid) + Valuation Charge (prepaid) + Tax (prepaid) + Total Other Charges Due Agent (prepaid) + Total Other Charges Due Carrier (prepaid) 24B Collect Weight Charge - Calculated value 25B Collect Valuation Charge Waybill#declaredValueForCarriage 26B Collect Tax Waybill#otherCharges Sum of otherCharges where chargePaymentType is 'C' Collect Indicator (see code list 1.5) and otherChargeCode are tax codes related (see code list 1.2) 27B Due Agent Waybill#otherCharges Sum of otherCharges where chargePaymentType is 'C' Collect Indicator (see code list 1.5) and entitlement is 'A' Other Charges due Agent (see code list 1.3) 28B Due Carrier Waybill#otherCharges Sum of otherCharges where chargePaymentType is 'C' Collect Indicator (see code list 1.5) and entitlement is 'C' Other Charges due Carrier (see code list 1.3) 29B Untitled box - 30B Total Collect - calculated value: Weight Charge (collect) + Valuation Charge (collect) + Tax (collect) + Total Other Charges Due Agent (collect) + Total Other Charges Due Carrier (collect) 31 Shipper's Certification Box Waybill#consignorDeclarationSignature 32A Executed on (Date) Waybill#carrierDeclarationDate 32B At (Place) Waybill#carrierDeclarationPlace 32C Signature of Issuing Carrier or its Agent Waybill#carrierDeclarationSignature 33 For carriers use only at destination - 33A Currency Conversion Rate Waybill#destinationCurrencyRate + Waybill#destinationCharges#CurrencyUnit 33B Collect Charges in Destination Currency - Calculated value: 30A*33B 33C Charges at Destination Waybill#destinationCharges 33D Total Collect Charges - Calculated value: 33B+33C 34A Optional Shipping Information - Reference Number Waybill#shippingRefNo 34B Optional Shipping Information - Untitled Box Waybill#shippingInfo 34C Optional Shipping Information - Untitled Box - <p>While data can change at its source (e.g. shipment being reweighted), 2 API specific features allow to re-create the equivalent of a paper Waybill using the mapping above with the right data: - The Audit trail ensures that all changes to data is tracked and properly identified - One can retrieve data using a specific timestamp (for instance equivalent to RCS event or the Waybill ready event) to have the data that was agreed upon at that time</p>"},{"location":"Data-Model/waybill/#data-model","title":"Data model","text":"<p>Naturally the <code>Waybill</code> object is at the center of the data model when the Air Waybill is concerned, whether we refer to the paper or electronic waybill.</p> <p>The <code>WaybillLineItem</code> object is also necessary, linked to <code>Waybill</code> object, to properly record the information at Air Waybill level. The line items as used in the Air Waybill cannot always be linked to actual <code>Piece</code> objects as the level of information required does not always reflect the physical goods. This is because we can have discrepancy between actual goods transported and rates as they are defined.</p> <p>Also it is possible that all accurate piece details are available at the the Waybill.</p>"},{"location":"Data-Model/examples-dm/readme/","title":"Readme","text":"<p>file examples for Data Model</p>"},{"location":"General/resources/","title":"Resources","text":"<p>This section provides links to main resources of the ONE Record standard.</p> DEscription Link API specification folder https://github.com/IATA-Cargo/ONE-Record/tree/master/2023-12-standard/API-Security Data Model specifiation folder https://github.com/IATA-Cargo/ONE-Record/tree/master/2023-12-standard/Data-Model"},{"location":"Orchestration/","title":"Introduction","text":""},{"location":"Orchestration/#introduction","title":"Introduction","text":"<p>The Data Orchestration is a work that was intitiated in September 2023, under COTB and DCWG governance. Industry stakeholders (Airline, Freight Forwarders, IT Service Providers, Cargo iQ) have worked to propose a way to use the ONE Record standard to support the operations and business processes.</p>"},{"location":"Orchestration/#objectives","title":"Objectives","text":"<p>As a response to the industry for guidance with ONE Record, we figured the Data Orchestration is the answer to make the link between processes and ONE Record standard. It includes: * Review of the Industry and Cargo iQ Master Operating Plans (MOP) * Identification of key industry use cases * Identification of ONE Record workflow that supports the processes and use cases * Provide tools to check compliance with the standard and illustrate the Data Orchestration</p>"},{"location":"Orchestration/#how-did-we-operate","title":"How did we operate?","text":"<p>The MOP is an overall standard process that defines steps, activities and specific milestones in the transportation supply chain. All stakeholders operate differently thus the MOP should be seen as a general guideline and reference but not an absolute standard. The Data Orchestration decided to use the MOP as a starting point to cover most of the required steps and milestones while transporting general cargo.</p> <p> </p> <p>The mixed approach</p> <p>We have decided to use a mixed approach based on the Activities/Process steps analysis and the Milestones analysis. The two approaches have different outcomes that are completing each other.</p>"},{"location":"Orchestration/#starting-from-the-activities","title":"Starting from the activities","text":"<p>From the activities to the Data Model</p> <p>The Activites, as defined in the MOP, are sequential although there could be some parallel flows or different order depending on the situation. The main objective of the Data Orchestration is to define for each activity what ONE Record actions are required and by whom. This includes: * Identifying all data (Objects) that need to be created, updated, deleted or shared accordingly * Identifying all relevant stakeholders: who holds the data, who is accountable for the data, with whom the data shall be shared * Defining API calls and content</p>"},{"location":"Orchestration/#starting-from-the-milestones","title":"Starting from the milestones","text":"<p>From the milestones to the Data Model</p> <p>A Milestone, from Cargo iQ perspective is:</p> <p>A planned checkpoint in a route map indicating the latest time by which an event or events are expected to happen at a given location.</p> <p>Milestones are used in the Data Orchestration as the latest time by which we need to ensure that certain mechanisms or data are made avaialble to other stakeholders. In current messaging environment, milestones are converted into: * Providing status update though (X)FSU messages with dedicated status codes * Sending Waybill data through (X)FWB and (X)FZB * Sending booked freight list and manifest through (X)FBL and (X)FFM</p> <p>For the analysis with the Data Orchestration our main objective is to ensure that all those mechanisms and messages are mapped with ONE Record, it ususally relies on: * Mapping (X)FSU message with a dedicated LogisticsEvent * Making sure a proper set of data is available and shared accordingly as a replacement of a message</p>"},{"location":"Orchestration/orchestration-01/","title":"P01 - Book Shipment","text":"<p>First Segment of the MOP, related to the interaction between the Shipper and the Forwarder.</p>"},{"location":"Orchestration/orchestration-01/#01-shipper-provides-shipment-details","title":"01. Shipper provides shipment details","text":"<p>In this step the Shipper provides initial shipment details to its freight forwarder.</p> <p>As Shipper provides shipment details, it is the equivalent of the SLI. The Shipper or the Forwarder on its behalf, creates Product, Item and Piece objects, including ULD if relevant and any Special cargo subtype for Live Animals or Dangerous Goods to further describe goods to transport. SecurityDeclaration object can be created as well if relevant Parties are created as well (if not already existing), are required at minimum the Consignee (Shipper) and Consignor details.</p> <p>Are included as well: handling instructions directly in the Piece details, ExternalReference if applicable (for rerefence documents)</p> <p>If Shipper hosts a 1R server he needs to make sure teh Forwarder has proper access to data</p> <p>Values to declare for carriage and customs are not on Piece</p>"},{"location":"Orchestration/orchestration-01/#api-interaction","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Shipper or Forwarder Shipper or Forwarder POST Product Minimum Product details, including HS codes: hsCode, description Shipper or Forwarder Shipper or Forwarder POST Item Minimum Item details including link to Product: itemQuantity, ofProduct Shipper or Forwarder Shipper or Forwarder POST Piece Minimum Piece details to define the goods. Includes link to Product or Item: contentProducts/containedItems, goodsDescription, slac, specialHandlingCodes, textualHandlingInstructions, declaredValue Shipper or Forwarder Shipper or Forwarder POST SecurityDeclaration Security details available at this stage Shipper or Forwarder Shipper or Forwarder POST ULD Optional, if relevant Shipper or Forwarder Shipper or Forwarder PATCH Product and/or Item Add backlinks to relevant objects (to Piece or Item&gt;Product)"},{"location":"Orchestration/orchestration-01/#02-receive-forwarding-order-from-shipper-check-security-status","title":"02. Receive Forwarding Order from shipper &amp; check security status","text":"<p>In this step the Forwarder receives data from the Shipper</p> <p>Forwarder creates the Waybill objects (House) and Shipments based on the details provided by the Shipper.</p>"},{"location":"Orchestration/orchestration-01/#api-interaction_1","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Waybill House Waybill object: arrivalLocation, departureLocation, involvedParties (Shipper and Forwarder), waybillType (House), waybillNumber, declaredValueForCustoms, declaredValueForCarriage Forwarder Forwarder POST Shipment Shipments details and link to Waybill object: waybill, insurance, involvedParties, totalGrossWeight, totalDimensions, goodsDescription Forwarder Forwarder PATCH Waybill Add backlink Waybill&gt;Shipment"},{"location":"Orchestration/orchestration-01/#03-check-banned-and-restricted-commodities","title":"03. Check Banned and Restricted Commodities","text":"<p>Internal process</p>"},{"location":"Orchestration/orchestration-01/#04-plan-routing-direct-or-consolidation","title":"04. Plan routing direct or consolidation","text":"<p>Internal process</p>"},{"location":"Orchestration/orchestration-01/#05-arrange-capacity","title":"05. Arrange Capacity","text":"<p>Distirbution process</p>"},{"location":"Orchestration/orchestration-01/#06-confirm-capacity","title":"06. Confirm Capacity","text":"<p>Distribution process</p>"},{"location":"Orchestration/orchestration-01/#07-create-shipment-planning-mawb-and-confirm-service-commitment-to-forwarder","title":"07. Create Shipment Planning (MAWB) and confirm Service Commitment to Forwarder","text":"<p>Distribution process, the main outputs expected are the Booking object created by the Airline and the Waybill object (MAWB) created by the Forwarder</p> <p>Status/Message: <code>RMP</code> and <code>BKD</code></p> <p>CiQ Milestone: <code>BKD</code></p>"},{"location":"Orchestration/orchestration-01/#08-confirm-capacity-with-customer","title":"08. Confirm capacity with Customer","text":"<p>Internal process</p>"},{"location":"Orchestration/orchestration-01/#09-create-d2d-shipment-planning-hawbdawb-and-confim-service-commitment-too-shipper","title":"09. Create D2D Shipment Planning (HAWB/DAWB) and confim Service Commitment too Shipper","text":"<p>Status/Message: <code>RMI</code></p> <p>CiQ Milestone: <code>CBK</code></p> <p>The Forwarder updates the Waybill objects (Master and Houses) to link them. TransportMovement objects for Truck movement are created, Loading actions (planned) are created and linked with the respective TransportMovement and Pieces.</p> <p>Flight details are directly retrieved from the Booking.</p>"},{"location":"Orchestration/orchestration-01/#api-interaction_2","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder PATCH Waybill (Master) Add backlink Waybill (House) &gt; Waybill (Master) Forwarder Forwarder PATCH Waybill (House) Add backlink Waybill (Master) &gt; Waybill (House) Forwarder Forwarder POST TransportMovement (Truck Movement) Add backlink Waybill&gt;Shipment Forwarder Forwarder POST TransportMeans (Truck) Create TransportMeans or Identify existing one and add link to TransportMovement (Truck): operatedTransportMovement, vehicleType, vehicleModel, vehicleRegistration, transportOrganization Forwarder Forwarder PATCH TransportMovement (Truck Movement) Add backlink TransportMeans &gt; TransportMovement (Truck) Forwarder Forwarder POST Loading (Planned) Loading action (planned): servedActivity (TM Truck), loadedPieces, onTransportMeans, loadingType (Loading), executionStatus (Planned), actionEndTime"},{"location":"Orchestration/orchestration-01/#10-share-planning-for-pickup-all-involved-service-suppliers","title":"10. Share planning for pickup all involved Service Suppliers","text":"<p>The Forwarder manages the data access to relevant stakeholders if using ONE Record to share all pickup data.</p>"},{"location":"Orchestration/orchestration-02/","title":"P02 - Arrange handover from Shipper","text":"<p>Process where all preparations are made on Shipper's end and on Forwarder's end to handover the shipment to Forwarder.</p>"},{"location":"Orchestration/orchestration-02/#01-arrange-pick-up-or-self-delivery-of-freight","title":"01. Arrange Pick up or Self Delivery of Freight","text":"<p>Forwarder validates data of the TransportMovement, a PATCH can be done if necessary.</p>"},{"location":"Orchestration/orchestration-02/#02-commercial-invoice-and-packing-lists-and-any-certificates","title":"02. Commercial invoice and packing lists and any certificates","text":""},{"location":"Orchestration/orchestration-02/#03-labelling-freight","title":"03. Labelling freight","text":"<p>Human action, can be done by the shipper, by the trucker on pickup or by the forwarder on arrival at warehouse. UPID is defined for each piece.</p>"},{"location":"Orchestration/orchestration-02/#04-associate-unique-piece-level-information-with-forwarding-order","title":"04. Associate unique piece level information with forwarding order","text":"<p>Piece are udpated with UPID information and any additional details</p>"},{"location":"Orchestration/orchestration-02/#api-interaction","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Shipper or Forwarder Forwarder PATCH Piece Update UPID property on Piece Shipper Forwarder POST Event on Piece Create Event: eventFor (Piece), eventLocation (if relevant), eventCode or eventName, eventDate, recordingActor"},{"location":"Orchestration/orchestration-02/#05-pick-up-freight","title":"05. Pick up freight","text":"<p>Loading (actuals) are created and linked with TransportMovement (truck) and Pieces.</p> <p>Events can be created on the Pieces to inform of the loading into the truck</p>"},{"location":"Orchestration/orchestration-02/#api-interaction_1","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Loading (Actual) Loading action (Actual): servedActivity (TM Truck), loadedPieces, onTransportMeans, loadingType (Loading), executionStatus (Actual), actionEndTime Shipper Forwarder POST Event on Piece Create Event: eventFor (Piece), eventLocation (if relevant), eventCode or eventName, eventDate, recordingActor"},{"location":"Orchestration/orchestration-03/","title":"P03 - Receive freight at forwarder warehouse","text":"<p>Process where forwarders receives freight from Shipper and checks freight data suhc as weight, dimensions etc.</p>"},{"location":"Orchestration/orchestration-03/#01-checkapply-labelling-verify-phyisical-integrity-of-packages","title":"01. Check/apply labelling &amp; verify phyisical integrity of packages","text":"<p>Event is added on Pieces to indicate Freight received in forwarder warehouse.</p> <p>Check of labelling/physical integrity can be through a Check object or an Event added on Pieces.</p> <p>Milestone: <code>REW</code></p>"},{"location":"Orchestration/orchestration-03/#api-interaction","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Shipper or Forwarder Forwarder POST Event on Piece Create Event: eventFor (Piece), eventLocation (if relevant), eventCode or eventName (Received in forwarder warehouse), eventDate, recordingActor Shipper Forwarder POST Check Create Check: up to stakeholder to define what and how to check"},{"location":"Orchestration/orchestration-03/#02-check-information-to-match-actual-freight-and-security-status-to-confirm-shipment-data-on-hand","title":"02. Check information to match actual freight and security status to confirm shipment data on-hand","text":"<p>Forwarder checks weight, dimensions and security status of the freight. Pieces and Shipment are updated if relevant, along with SecurityDeclaration on Pieces</p> <p>Milestone: <code>SDO</code></p>"},{"location":"Orchestration/orchestration-03/#api-interaction_1","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder PATCH Shipment Update Shipment properties based on check: weight, dimensions, or others Shipper or Forwarder Forwarder PATCH Pieces Update Piece details on behalf fo shipper Shipper or Forwarder Forwarder PATCH SecurityDeclaration Update SecurityDeclaration of relevant pieces"},{"location":"Orchestration/orchestration-03/#03-check-accuracy-of-booking-adust-if-needed","title":"03. Check accuracy of booking &amp; adust if needed","text":"<p>Forwarder checks the accuracy of booking compared to freight details, Booking can be updated (see Distribution process)</p>"},{"location":"Orchestration/orchestration-03/#api-interaction_2","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Forwarder PATCH Booking Communicate booking updates with Airline, refer to Distribution process"},{"location":"Orchestration/orchestration-03/#04-complete-shipment-record","title":"04. Complete shipment record","text":"<p>At this stage shipment record should be accurate and updated already, Forwarder can make a final check and adjust objects if necessary</p>"},{"location":"Orchestration/orchestration-03/#api-interaction_3","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Shipper or Forwarder Forwarder PATCH Shipment, Piece, etc. Update if necessary"},{"location":"Orchestration/orchestration-03/#05-transmitfile-electronic-data-to-authorities-if-self-filing","title":"05. Transmit/file electronic data to authorities if self-filing","text":"<p>Based on Customs requirements, Customs messages can be populated with 1R data as per proposed mapping.</p> <p>Event on Waybill (Master) can be added to indicate a self-filing</p>"},{"location":"Orchestration/orchestration-03/#api-interaction_4","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on Waybill Create Event: eventFor (Waybill), eventName (Ready for Customs processing) <p>Milestone: <code>PHL</code></p>"},{"location":"Orchestration/orchestration-03/#06-asssess-electronic-data-and-provide-dnl","title":"06. Asssess Electronic data and provide DNL","text":"<p>Event on Waybill (Master) can be added by Authorities to indicate the Customs assessment status</p>"},{"location":"Orchestration/orchestration-03/#api-interaction_5","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Authorities POST Event on Waybill Create Event: eventFor (Waybill), eventName (Relevant Customs assessment status)"},{"location":"Orchestration/orchestration-03/#07-sort-transfer-freight-to-build-or-storage-locations","title":"07. Sort &amp; transfer freight to build or storage locations","text":"<p>Internal process but could be used with Storing action in the future</p>"},{"location":"Orchestration/orchestration-04/","title":"P04 - Prepare transfer to forwarder - Downstream warehouse or airline","text":"<p>Process where the forwarder prepares the transfer fo freight to any downstrean warehouse or directly to carrier domain.</p>"},{"location":"Orchestration/orchestration-04/#01-confirm-information-to-downstream-forwarder-warehouse","title":"01. Confirm information to downstream forwarder warehouse","text":"<p>Forwarder checks that data is available and shared with relevant stakeholder</p>"},{"location":"Orchestration/orchestration-04/#02-issue-loading-list-for-truck-to-downstream-forwarder-warehouse-or-airline","title":"02.  Issue loading list for truck to downstream forwarder warehouse or airline","text":"<p>Forwarder creates TransportMovements for truck movement and Loading (planned) actions to link TransportMovement and Pieces</p>"},{"location":"Orchestration/orchestration-04/#api-interaction","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST TransportMovement (Truck Movement) Create TM (Truck): departureLocation, arrivalLocation, modeCode (3?), transportIdentifier Forwarder Forwarder POST Loading (Planned) Loading action (planned): servedActivity (TM Truck), loadedPieces, onTransportMeans, loadingType (Loading), executionStatus (Planned), actionEndTime"},{"location":"Orchestration/orchestration-04/#03-loaded-truck-departs-forwarder-branch-facility-ot-hub","title":"03. Loaded truck departs forwarder branch facility ot hub","text":"<p>Internal process but could be used with Storing action in the future</p> <p>Loading (actuals) are created and linked with TransportMovement (truck) and Pieces.</p> <p>Events can be created on the Pieces to inform of the loading into the truck.</p>"},{"location":"Orchestration/orchestration-04/#api-interaction_1","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Loading (Actual) Loading action (actual): servedActivity (TM Truck), loadedPieces, onTransportMeans, loadingType (Loading), executionStatus (Planned), actionEndTime Shipper or Forwarder Forwarder POST Event on Piece Create Event: eventFor (Piece), eventLocation (if relevant), eventCode or eventName (Loaded in truck), eventDate, recordingActor"},{"location":"Orchestration/orchestration-05/","title":"P05 - Prepare export shipments","text":"<p>Process where the Forwarder prepares export shipments</p>"},{"location":"Orchestration/orchestration-05/#01-create-mawb-shipment-record-and-consolidation-manifest","title":"01. Create (M)AWB shipment record and consolidation manifest","text":"<p>Forwarder creates or updates the MAWB with latest details.</p> <p>Consolidation manifest data should be included in 1R already but a check by the Forwarder can be done, with potential updates of relevant objects.</p>"},{"location":"Orchestration/orchestration-05/#api-interaction","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder PATCH Shipment, Waybill, etc. Potential update on the MAWB details if relevant"},{"location":"Orchestration/orchestration-05/#02-send-freight-picking-instructions-to-warehouse","title":"02. Send freight picking instructions to warehouse","text":"<p>Forwarder creates TransportMovements for truck movement from warehouse to carrier domain and Loading (planned) actions to link TransportMovement and Pieces/ULDs.</p>"},{"location":"Orchestration/orchestration-05/#api-interaction_1","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST TransportMovement (Truck Movement) Create TM (Truck): departureLocation, arrivalLocation, modeCode (3?), transportIdentifier Forwarder Forwarder POST Loading (Planned) Loading action (planned): servedActivity (TM Truck), loadedPieces, onTransportMeans, loadingType (Loading), executionStatus (Planned), actionEndTime"},{"location":"Orchestration/orchestration-05/#03-transmit-hawb-electronic-data-to-carriercustomsavsec","title":"03. Transmit (H)AWB electronic data to carrier/customs/AVSEC","text":"<p>Make sure data is accessible by stakeholders, Events are created on HAWB and MAWB that data is ready to be fetched.</p> <p>eCSD data should be available as well, meaning SecurityDeclaration should be checked/updated. An Event on Piece could be used to mention that eCSD is OK to be retrieved.</p> <p>Milestone: <code>FHL</code> <code>FWB</code> Message: <code>(X)FHL</code> and <code>(X)FWB</code></p>"},{"location":"Orchestration/orchestration-05/#api-interaction_2","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on Waybill (MAWB and HAWB when relevant) Create Event: eventFor (Waybill), eventName (Waybill data ready), eventDate, recordingActor Shipper or Forwarder Forwarder POST Event on Pieces Create Event: eventFor (Pieces), eventName (eCSD data OK), eventDate, recordingActor"},{"location":"Orchestration/orchestration-05/#04-prepare-shipment-for-export","title":"04. Prepare shipment for export","text":"<p>Internal process</p>"},{"location":"Orchestration/orchestration-06/","title":"P06 - Prepare receipt into carrier domain","text":"<p>Process where the Airline and GHA prepare to receive freight from the Forwarder.</p>"},{"location":"Orchestration/orchestration-06/#01-awb-content-validationamendments","title":"01. AWB content validation/amendments","text":"<p>If relevant, the Airline updates the Booking with latest data of the Shipment and Pieces.</p> <p>Message: <code>(X)FHL</code> and <code>(X)FWB</code></p>"},{"location":"Orchestration/orchestration-06/#api-interaction","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline PATCH Booking Potential update of Booking data based on latest Waybill, Shipment, Pieces, etc. data"},{"location":"Orchestration/orchestration-06/#02-channel-forwarder-information-to-gha-where-applicable","title":"02. Channel forwarder information to GHA where applicable","text":"<p>Airline makes relevant data accessible to GHA (authorized and delegated access).</p>"},{"location":"Orchestration/orchestration-06/#03-receive-hawb-electronic-data","title":"03. Receive (H)AWB electronic data","text":"<p>GHA retrieves or accesses data.</p>"},{"location":"Orchestration/orchestration-06/#api-interaction_1","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Shipper or Forwarder GHA GET Waybill, Shipment, Pieces, etc. -"},{"location":"Orchestration/orchestration-07/","title":"P07 - Receive shipment at carrier domain","text":"<p>Process where the Airline receives the shipment at Carrier domain</p>"},{"location":"Orchestration/orchestration-07/#01-registration-of-awb-w-or-wout-docs-truck-driver-to-obtain-unloading-dock","title":"01. Registration of AWB (w/ or w/out docs) / Truck driver to obtain unloading dock","text":"<p>TransportMovement of the Truck is updated with accurate drop off location.</p> <p>An event DOC can be added on the Truck TransportMovement to reflect the registration at the dock.</p> <p>Milestone: <code>DOC</code></p>"},{"location":"Orchestration/orchestration-07/#02-validate-securitycustoms-status-of-truck","title":"02. Validate Security/Customs status of truck","text":"<p>A Check object to verify Security and Customs status can be created, the results are registered in the CheckTotalResult object.</p> <p>An Event on the Pieces/ULDs or Shipment can also be created to record the check</p>"},{"location":"Orchestration/orchestration-07/#03-assign-unloading-slot-and-position-to-deliver-truck","title":"03. Assign unloading slot and position to deliver truck","text":"<p>Event is added on the Truck TransportMovement indicating arrival at dock position</p>"},{"location":"Orchestration/orchestration-07/#04-unload-truck","title":"04. Unload truck","text":"<p>Unloading (actuals) are created and linked with TransportMovement (truck) and Pieces.</p> <p>Events are created on the Pieces/ULDs with FOH</p> <p>Message: <code>(X)FSU</code> with FOH status Milestone: <code>LAT</code></p>"},{"location":"Orchestration/orchestration-07/#05-receive-transferred-shipments-ff-carrier","title":"05. Receive transferred shipments (FF &amp; carrier)","text":""},{"location":"Orchestration/orchestration-07/#06-move-shipment-to-storage-location","title":"06. Move shipment to storage location","text":"<p>Storage Activity is created with Storing Action (actuals) to link the Pieces/ULD to a storage place.</p> <p>Milestone: <code>STI</code></p>"},{"location":"Orchestration/orchestration-07/#07-screen-freight-as-applicable","title":"07. Screen freight as applicable","text":"<p>If applicable, create or patch existing SecurityDeclaration linked to Pieces</p>"},{"location":"Orchestration/orchestration-08/","title":"P08 - Accept shipment as ready for carriage","text":"<p>Process where the Airline/GHA  checks the freight and accepts as Ready for Carriage</p>"},{"location":"Orchestration/orchestration-08/#01-verify-shipment-has-cleared-security","title":"01. Verify shipment has cleared security","text":"<p>A Check object can be created and linked to Pieces/Shipment for RCS data</p>"},{"location":"Orchestration/orchestration-08/#api-interaction","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline / GHA POST Check Create Check object with relevant details (up to GHA / Airline)"},{"location":"Orchestration/orchestration-08/#02-physical-acceptance-check","title":"02. Physical acceptance check","text":"<p>If a Check object is used the Airline/GHA updates it accordingly.</p>"},{"location":"Orchestration/orchestration-08/#api-interaction_1","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline / GHA PATCH Check Update Check data with results"},{"location":"Orchestration/orchestration-08/#03-docs-acceptance-check","title":"03. Docs acceptance check","text":"<p>An Event is added on Shipment/Pieces to register RCS/RCT event. Note: RCS is only applicable for whole shipment.</p> <p>If RCT, access delegation needs to be ensured</p> <p>Message: <code>(X)FSU</code> with RCS / RCT status Milestone: <code>RCS</code> or <code>RCT</code></p>"},{"location":"Orchestration/orchestration-08/#api-interaction_2","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline / GHA POST Event on Pieces/Shipment Create Event: eventFor (Pieces or Shipment), eventLocation (carrier domain tbd), eventcode (RCT or RCS), eventDate, recordingActor"},{"location":"Orchestration/orchestration-08/#04-file-ehcp-and-trigger-resolution-process-or-workflow","title":"04. File EHCP and trigger resolution process (or workflow)","text":"<p>Event on Shipment or Piece to record the EHCP (CiQ process)</p> <p>Message: <code>(X)FSU</code> with FOH status Milestone: <code>LAT</code></p>"},{"location":"Orchestration/orchestration-08/#api-interaction_3","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline / GHA POST Event on Pieces/Shipment Create Event: eventFor (Pieces or Shipment), eventLocation (carrier domain tbd), eventcode (EHCP - xxx), eventDate, recordingActor"},{"location":"Orchestration/orchestration-09/","title":"P09 - Prepare freight for transport","text":"<p>Process where the Airline/GHA prepares the freight for it transportation</p>"},{"location":"Orchestration/orchestration-09/#01-transshipment-cargo-received-from-process-13","title":"01. Transshipment Cargo received from Process 13","text":"<p>1st Airline makes sure that 2nd Airline has proper access (data and/or delegated access) to the shipment record.</p>"},{"location":"Orchestration/orchestration-09/#02-transshipment-cargo-security-cleared","title":"02. Transshipment Cargo security cleared","text":"<p>GHA checks the Security status of the pieces and updates the SecurityDeclaration on the Pieces if relevant.</p> <p>An Event is added on the Pieces if relevant to record the check results</p>"},{"location":"Orchestration/orchestration-09/#api-interaction","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline / GHA PATCH SecurityDeclaration Update accordingly Airline Airline / GHA POST Event on Pieces Create Event: eventFor (Pieces), eventLocation (carrier domain?), eventName (Security Status checked), eventDate, recordingActor"},{"location":"Orchestration/orchestration-09/#03-plan-flight-and-send-booking-list-to-warehouse","title":"03. Plan flight and send booking list to warehouse","text":"<p>Most of XFBL data should already be in ONE Record at that stage. Refer to mapping XFBL to 1R for further details.</p> <p>The Airline needs to make sure that GHA has access to all relevant data related to the freight booked list.</p> <p>UnitComposition Activity can be created for conslidations made by GHA. Respective Composing actions (Planned) can be created to link Pieces and ULDs Loading Action (Planned) is created by GHA to link Pieces/ULD and TransportMeans (Aircraft) via the TransportMovement (flight). This is either a direct Post via delegated access or request to create objects on Airline system</p> <p>Message: <code>(X)FBL</code></p>"},{"location":"Orchestration/orchestration-09/#api-interaction_1","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline / GHA POST UnitComposition Create UnitComposition activity Airline Airline / GHA POST Composing (Planned) Create Composing: servedActivity (UnitComposition), loadingUnit (ULD or Pallet), composedPieces (Pieces), compositionType (Composition), actionTimeType (Planned) Airline Airline / GHA POST TransportMovement (Flight) Create TM-Flight if not created before Airline Airline / GHA POST Loading (planned) Loading action (planned): servedActivity (TM-Flight), loadedPieces (Pieces) and/or loadingUnits (ULD/Pallet), loadingType (loading), actionTimeType (planned) Airline Airline / GHA POST Event on TM-Flight Create Event: eventFor (TM-Flight), eventLocation (not relevant), eventName (Freight booked List available), eventDate, recordingActor"},{"location":"Orchestration/orchestration-09/#04-move-shipment-to-storage-location","title":"04. Move shipment to storage location","text":"<p>Storage Activity is created with Storing Action (actuals) to link the Pieces/ULD to a storage place if relevant</p> <p>Milestone: <code>STO</code></p>"},{"location":"Orchestration/orchestration-09/#api-interaction_2","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline / GHA POST Storage Create Storage activty Airline Airline / GHA POST Storing (actual) Storing action (actual): servedActivity (Storage), storingtype (STORE_IN). storedObjects (Pieces/ULDs), storagePlaceIdentifier"},{"location":"Orchestration/orchestration-09/#05-collect-freight-and-unitize-as-planned","title":"05. Collect freight and unitize as planned","text":"<p>UnitComposition Activity is created with Composing Action (Actuals) to link Pieces and ULDs</p> <p>Milestone: <code>MAN</code> / <code>FUM</code></p>"},{"location":"Orchestration/orchestration-09/#api-interaction_3","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline / GHA POST Composing (Actual) Create Composing: servedActivity (UnitComposition), loadingUnit (ULD or Pallet), composedPieces (Pieces), compositionType (Composition), actionTimeType (Actual)"},{"location":"Orchestration/orchestration-09/#06-consolidate-information-and-send-final-manifest-data","title":"06. Consolidate information and send final manifest data","text":"<p>Loading Action (Planned) is updated if relevant by GHA to link Pieces/ULD and TransportMeans (Aircraft) via the TransportMovement (flight). This is either a direct Post via delegated access or request to create objects on Airline system</p> <p>Milestone: <code>UWS</code></p>"},{"location":"Orchestration/orchestration-09/#api-interaction_4","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline / GHA PATCH Loading (planned) Update loading (planned) if required"},{"location":"Orchestration/orchestration-09/#07-create-aircraft-load-planning-by-load-control","title":"07. Create aircraft load planning by Load control","text":"<p>Loading Actions (Planned) can be updated by Airline if relevant. This is either a Change request (if GHA has the data) or direct Patch.</p>"},{"location":"Orchestration/orchestration-09/#api-interaction_5","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline / GHA PATCH Loading (planned) Update loading (planned) if required"},{"location":"Orchestration/orchestration-09/#07-process-placi-customs-status-notification","title":"07. Process PLACI customs status notification","text":"<p>Customs assesses the PLACI status based on data shared. As a prerequisite, data needs to be made accessible to Authorities by Airline and/or Forwarder.</p> <p>A dedicated Event on the Waybill can be created to notify Customs that PLACI data can be processed.</p>"},{"location":"Orchestration/orchestration-09/#08-send-placi-status-notification-to-airline","title":"08. Send PLACI status notification to airline","text":"<p>Event is added on Shipment/MAWB by Authorities for PLACI status.</p>"},{"location":"Orchestration/orchestration-09/#api-interaction_6","title":"API interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Authorities POST Event on Waybill Create Event: eventFor (Waybill), eventName and/or eventCode (PLACI status), eventDate, recordingActor"},{"location":"Orchestration/orchestration-10/","title":"Orchestration 10","text":"<p>Process where the Airline/GHA prepares the freight for it transportation</p>"},{"location":"Orchestration/orchestration-10/#01-move-shipments-from-warehouse-to-hold-area-for-ramp-transport","title":"01. Move shipments from warehouse to hold area for ramp transport","text":"<p>TransportMovement for in-warehouse movement created with Loading (storage location, actuals) and Unloading (hold area, actuals) actions to link Pieces/ULDs and TransportMovement.</p> <p>Events can be added on Pieces/ULDs to communicate FOW milestone and for pickup</p> <p>Message: <code>(X)FSU</code> with FOW status Milestone: <code>FOW</code></p>"},{"location":"Orchestration/orchestration-10/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Airline / GHA POST TransportMovement (WH mouvement) Create TM-WH: departureLocation and arrivalLocation to be defined Airline Airline / GHA POST Loading (Actual) Loading action (actual): servedActivity (TM-WH), loadedUnits and/or loadedPieces (Pieces/ULDs), loadingType (Loading), actionTimeType (Actual), onTransportMeans (if relevant) Airline Airline / GHA POST Unloading (Actual) Unloading action (actual): servedActivity (TM-WH), loadedUnits and/or loadedPieces (Pieces/ULDs), loadingType (Unloading), actionTimeType (Actual), onTransportMeans (if relevant) Airline Airline / GHA POST Event on Pieces/ULDs Create Event: eventFor (Pieces/ULDs), eventLocation, eventName and/or eventCode (FOW), eventDate, recordingActor"},{"location":"Orchestration/orchestration-10/#02-move-shipments-from-hold-area-to-parking-position","title":"02. Move shipments from hold area to parking position","text":"<p>TransportMovement from hold area to parking position created with Loading (actuals) and Unloading (actuals) actions to link Pieces/ULDs and TransportMovement</p>"},{"location":"Orchestration/orchestration-10/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Airline / GHA POST TransportMovement (Ramp movement) Create TM-Ramp: departureLocation and arrivalLocation to be defined Airline Airline / GHA POST Loading (Actual) Loading action (actual): servedActivity (TM-Ramp), loadedUnits and/or loadedPieces (Pieces/ULDs), loadingType (Loading), actionTimeType (Actual), onTransportMeans (if relevant) Forwarder Airline / GHA POST Unloading (Actual) Unloading action (actual): servedActivity (TM-Ramp), loadedUnits and/or loadedPieces (Pieces/ULDs), loadingType (Unloading), actionTimeType (Actual), onTransportMeans (if relevant)"},{"location":"Orchestration/orchestration-10/#03-load-aircraft-as-per-load-plan","title":"03. Load Aircraft as per Load Plan","text":"<p>Loading Action (Actuals) is created to link Pieces/ULD and TransportMeans (Aircraft) via the TransportMovement (flight) (c.f. 9.5)</p> <p>Milestone: <code>ALS</code> / <code>ALE</code></p>"},{"location":"Orchestration/orchestration-10/#api-interaction_2","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline / GHA POST Loading (Actual) Loading action (actual): servedActivity (TM-Flight), loadedPieces (Pieces) and/or loadingUnits (ULD/Pallet), loadingType (loading), actionTimeType (actual) Forwarder Airline / GHA POST Event on Pieces/ULDs Create Event: eventFor (Pieces/ULDs), eventLocation, eventName and/or eventCode (Loaded in aircraft), eventDate, recordingActor"},{"location":"Orchestration/orchestration-10/#04-create-final-load-report-to-load-control-lir","title":"04. Create Final Load Report to load control (LIR)","text":"<p>Creation of the Final Load Report.</p>"},{"location":"Orchestration/orchestration-10/#05-off-blocks","title":"05. Off blocks","text":"<p>MovementTimes created on TransportMovement (Flight) to record the Off blocks. Event can be added on TransportMovement as well.</p> <p>Message: <code>MVT/XTMV</code> Milestone: <code>OFB</code></p>"},{"location":"Orchestration/orchestration-10/#api-interaction_3","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline POST Event on TransportMovement (Truck) Create Event: eventFor (TM-Flight), eventLocation (Airport), eventCode (AO), eventDate, recordingActor Airline Airline POST Optional - MovementTime on TransportMovement (TM-Flight) Create MovementTime: movementTimeType (actual), movementMilestone (AO), movementTimestamp"},{"location":"Orchestration/orchestration-10/#06-depart-flight","title":"06. Depart flight","text":"<p>DEP milestone is more or less the combination of Flight Manifest data and Off blocks. Equivalent of XFFM data are shared between GHA and Airline, at this stage Airline makes sure all XFFM data are there (cf. mapping)</p> <p>Message: <code>(X)FFM</code> and <code>MVT/XTMV</code> for Departure (DEP) Milestone: <code>DEP</code></p>"},{"location":"Orchestration/orchestration-11/","title":"P11 - Information exchange and flight","text":"<p>Flight, including information exchange in parallel.</p>"},{"location":"Orchestration/orchestration-11/#01-wheels-up","title":"01. Wheels up","text":"<p>MovementTimes created on TransportMovement (Flight) to record the departure wheels up. Event can be added on TransportMovement as well.</p> <p>Message: <code>MVT/XTMV</code> with Wheels off status</p>"},{"location":"Orchestration/orchestration-11/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline POST Event on TransportMovement (TM-Flight) Create Event: eventFor (TM-Flight), eventLocation (Airport), eventCode (AD), eventDate, recordingActor Airline Airline POST Optional - MovementTime on TransportMovement (TM-Flight) Create MovementTime: movementTimeType (actual), movementMilestone (AD), movementTimestamp"},{"location":"Orchestration/orchestration-11/#02-transmit-flight-and-shipment-information-to-down-line-stations-authorities","title":"02. Transmit flight and shipment information to down line stations &amp; authorities","text":"<p>At this stage all data required for XFFM/XFWB/XFHL should be there already. Airline needs to make sure all relevant stakeholders have access to data.</p> <p>Message: <code>(X)FWB</code>, <code>(X)FFM</code>, <code>(X)FHL</code></p>"},{"location":"Orchestration/orchestration-11/#03-receive-flight-and-shipment-information-from-airline","title":"03. Receive flight and shipment information from airline","text":"<p>Loading Action (Actuals) is created to link Pieces/ULD and TransportMeans (Aircraft) via the TransportMovement (flight) (c.f. 9.5)</p> <p>Message: <code>UCM</code></p>"},{"location":"Orchestration/orchestration-11/#04-wheels-down","title":"04. Wheels down","text":"<p>MovementTimes created on TransportMovement (Flight) to record the departure wheels down. Event can be added on TransportMovement as well.</p> <p>Message: <code>MVT/XTMV</code> Milestone: <code>WDO</code></p>"},{"location":"Orchestration/orchestration-11/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline POST Event on TransportMovement (TM-Flight) Create Event: eventFor (TM-Flight), eventLocation (Airport), eventCode (AA), eventDate, recordingActor Airline Airline POST Optional - MovementTime on TransportMovement (TM-Flight) Create MovementTime: movementTimeType (actual), movementMilestone (AA), movementTimestamp"},{"location":"Orchestration/orchestration-12/","title":"P12 - Arrive flight, unload and dispatch shipment to warehouse","text":"<p>Process where the freight arrives at destination airport and is dispatched to warehouse</p>"},{"location":"Orchestration/orchestration-12/#01-on-blocks","title":"01. On blocks","text":"<p>MovementTimes created on TransportMovement (Flight) to record the on-blocks. Event can be added on TransportMovement as well.</p> <p>Message: <code>MVT/XTMV</code></p>"},{"location":"Orchestration/orchestration-12/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline POST Event on TransportMovement (TM-Flight) Create Event: eventFor (TM-Flight), eventLocation (Airport), eventCode (AB), eventDate, recordingActor Airline Airline POST Optional - MovementTime on TransportMovement (TM-Flight) Create MovementTime: movementTimeType (actual), movementMilestone (AB), movementTimestamp"},{"location":"Orchestration/orchestration-12/#02-arrive-flight-at-destination","title":"02. Arrive flight at destination","text":"<p>Message: <code>MVT/XTMV</code> with Arrival Milestone: <code>ARR</code></p>"},{"location":"Orchestration/orchestration-12/#03-unload-flight","title":"03. Unload flight","text":"<p>Unloading Action (Actual) is created to record the unloading of Pieces/ULDs from the plane via the TransportMovement (flight)</p> <p>Message: <code>AUS</code>/<code>AUE</code> Milestone: <code>AUS</code>/<code>AUE</code></p>"},{"location":"Orchestration/orchestration-12/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline/GHA POST Unloading (Actual) Unloading action (actual): servedActivity (TM-Flight), loadedPieces (Pieces) and/or loadingUnits (ULD/Pallet), loadingType (unloading), actionTimeType (actual)"},{"location":"Orchestration/orchestration-12/#04-move-flight-load-to-appropriate-facility","title":"04. Move flight load to appropriate facility","text":"<p>TransportMovement from ramp to warehouse is created.</p> <p>Loading Action (Actual) is created to link the Pieces/ULDs and the TransportMovement above.</p>"},{"location":"Orchestration/orchestration-12/#api-interaction_2","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline/GHA POST TransportMovement (Ramp movement) Create TM-Ramp: departureLocation and arrivalLocation to be defined Airline Airline/GHA POST Loading (Actual) Loading action (actual): servedActivity (TM-Ramp), loadedUnits and/or loadedPieces (Pieces/ULDs), loadingType (Loading), actionTimeType (Actual), onTransportMeans (if relevant)"},{"location":"Orchestration/orchestration-12/#05-accept-flight-load-at-warehouse","title":"05. Accept flight load at warehouse","text":"<p>Event is added on Pieces/ULDs to indicate FIW milestone</p> <p>Message: <code>XFSU</code> with FIW status Milestone: <code>FIW</code></p>"},{"location":"Orchestration/orchestration-12/#api-interaction_3","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline/GHA POST Event on Pieces/ULDs Create Event: eventFor (Pieces/ULDs), eventLocation, eventName and/or eventCode (FIW), eventDate, recordingActor"},{"location":"Orchestration/orchestration-13/","title":"P13 - Check in shipment","text":"<p>Process where the freight and its documents are checked an will be moved to adequate storage location.</p>"},{"location":"Orchestration/orchestration-13/#01-receive-shipments-in-warehouse","title":"01. Receive shipments in warehouse","text":"<p>Storing activity is created for Pieces in storage location. Location itself will give details on the type of storage for transit, transfer or import.</p> <p>ULDs are broken down if required, Decomposing Action is used to break down ULDs and remove the Pieces</p> <p>Message: <code>(X)FSU</code> with RCF status Milestone: <code>RCF</code></p>"},{"location":"Orchestration/orchestration-13/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline/GHA POST Storage Create Storage activity Airline Airline/GHA POST Storing (actual) Storing action (actual): servedActivity (Storage), storingtype (STORE_IN). storedObjects (Pieces/ULDs), storagePlaceIdentifier Airline Airline/GHA POST UnitComposition Create UnitComposition activity Airline Airline/GHA POST Composing (Planned) Create Composing: servedActivity (UnitComposition), loadingUnit (ULD or Pallet), composedPieces (Pieces), compositionType (Decomposition), actionTimeType (Actual) Forwarder Airline/GHA POST Event on Shipment Create Event: eventFor (Shipment), eventLocation (Airport), eventCode (RCF), eventDate, recordingActor"},{"location":"Orchestration/orchestration-13/#02-docs-received-from-flight","title":"02. Docs received from flight","text":"<p>Destination GHA should have access to relevant data from flight</p> <p>Message: <code>(X)FSU</code> with AWR status Milestone: <code>AWR</code></p>"},{"location":"Orchestration/orchestration-13/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Airline/GHA POST Event on Shipment Create Event: eventFor (Shipment), eventLocation (Airport), eventCode (AWR), eventDate, recordingActor"},{"location":"Orchestration/orchestration-13/#03-move-transshipment-cargo-to-appropriate-location-see-process-9","title":"03. Move Transshipment cargo to appropriate location (see process 9)","text":"<p>Relevant TransportMovement for change of storage location can be created</p>"},{"location":"Orchestration/orchestration-13/#api-interaction_2","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline/GHA POST TransportMovement (WH movement) Create TM-WH: departureLocation and arrivalLocation to be defined"},{"location":"Orchestration/orchestration-13/#04-move-shipments-to-be-transferred-to-other-carrier","title":"04. Move shipments to be transferred to other carrier","text":"<p>TransportMovement for transfer is created with relevant arrivalLocation (other carrier storage place or else)</p> <p>Message: <code>(X)FSU</code> with TFD status Milestone: <code>TFD</code></p>"},{"location":"Orchestration/orchestration-13/#api-interaction_3","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline/GHA POST TransportMovement (transfer movement) Create TM-Transfer: departureLocation and arrivalLocation to be defined Forwarder Airline/GHA POST Event on Shipment Create Event: eventFor (Shipment), eventLocation (Airport), eventCode (TFD), eventDate, recordingActor"},{"location":"Orchestration/orchestration-13/#05-move-import-shipment-to-storage-location","title":"05. Move import shipment to storage location","text":"<p>TransportMovement times can be updated (departure and arrival) with Events on the pieces to reflect the movement (arrived at storage, etc)</p>"},{"location":"Orchestration/orchestration-13/#api-interaction_4","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline/GHA POST Event on TransportMovement (TM-WH) Create Event: eventFor (TM-WH), eventLocation (WH), eventName (Departure from warehouse), eventDate, recordingActor"},{"location":"Orchestration/orchestration-14/","title":"P14 - Prepare shipment for delivery","text":"<p>Process where the freight is prepared to be handed over to Forwarder.</p>"},{"location":"Orchestration/orchestration-14/#01-notify-forwarder-freight-and-information-on-hand-at-destination","title":"01. Notify Forwarder Freight and Information On Hand at Destination","text":"<p>Event is added on Shipment to record the NFD milestone.</p> <p>Message: <code>(X)FSU</code> with NFD status Milestone: <code>NFD</code></p>"},{"location":"Orchestration/orchestration-14/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline/GHA POST Event on Shipment Create Event: eventFor (Shipment), eventCode (NFD), eventDate, recordingActor"},{"location":"Orchestration/orchestration-14/#02-hand-over-of-documents-information-to-forwarder","title":"02. Hand over of Documents (Information) to Forwarder","text":"<p>Amend AWB data if required.</p> <p>Message: <code>(X)FSU</code> with AWD status Milestone: <code>AWR</code></p>"},{"location":"Orchestration/orchestration-14/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline/GHA POST Event on Shipment Create Event: eventFor (Shipment), eventCode (AWR), eventDate, recordingActor"},{"location":"Orchestration/orchestration-15/","title":"P15 - Customs clearance","text":"<p>Customs clearance process</p>"},{"location":"Orchestration/orchestration-15/#01-handover-to-consignees-appointed-customs-broker","title":"01. Handover to consignee's appointed Customs broker","text":"<p>External process</p>"},{"location":"Orchestration/orchestration-15/#02-trigger-customs-clearance","title":"02. Trigger Customs clearance","text":"<p>External process</p>"},{"location":"Orchestration/orchestration-15/#03-start-customs-clearance","title":"03. Start Customs clearance","text":"<p>External process</p>"},{"location":"Orchestration/orchestration-15/#04-customs-clearance-completed","title":"04. Customs Clearance completed","text":"<p>Message: <code>(X)FSU</code> with CCD status Milestone: <code>TOA</code> and <code>CCD</code></p>"},{"location":"Orchestration/orchestration-15/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline/GHA POST Event on Shipment Create Event: eventFor (Shipment), eventCode (CCD), eventDate, recordingActor"},{"location":"Orchestration/orchestration-16/","title":"P16 - Handover freight to forwarder","text":"<p>Process where the freight is handed over to the forwarder.</p>"},{"location":"Orchestration/orchestration-16/#01-arrange-truck-for-deliver","title":"01. Arrange truck for deliver","text":"<p>TransportMovement for truck movement from carrier domain to forwarder hub is created.</p> <p>Loading actions (Planned) are created to link Pieces to the TransportMovement.</p>"},{"location":"Orchestration/orchestration-16/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST TransportMovement (Truck) Create TM-Truck: departureLocation (carrier domain), arrivalLocation (forwarder hub) Forwarder Forwarder POST Loading (Planned) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (loading), actionTimeType (planned), onTransportMeans (if relevant at that stage)"},{"location":"Orchestration/orchestration-16/#02-registration-of-awb-truck-driver-to-obtain-loading-dock","title":"02. Registration of AWB / truck driver to obtain loading dock","text":"<p>External process</p>"},{"location":"Orchestration/orchestration-16/#03-check-customs-release-status","title":"03. Check customs release status","text":"<p>Check or Event can be added at that stage if required</p>"},{"location":"Orchestration/orchestration-16/#04-assign-loading-dock-and-timeslot-for-trucker","title":"04. Assign loading dock and timeslot for trucker","text":"<p>TransportMovement of the Truck is updated with accurate drop off location.</p> <p>An event DOC can be added on the Truck TransoprtMovement to reflect the registration at the dock.</p>"},{"location":"Orchestration/orchestration-16/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST TransportMovement (Truck) Update arrivalLocation with accurate drop-off location Forwarder Forwarder POST Event on TM-Truck Create Event: eventFor (TM-Truck), eventCode (DOC), eventDate, recordingActor"},{"location":"Orchestration/orchestration-16/#05-prepare-freight-for-handover","title":"05. Prepare freight for handover","text":"<p>Storage out action (actual) is created to record the movement of the pieces from storage.</p>"},{"location":"Orchestration/orchestration-16/#api-interaction_2","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Airline Airline/GHA POST Storage Create Storage activty Airline Airline/GHA POST Storing (actual) Storing action (actual): servedActivity (Storage), storingtype (STORE_OUT). storedObjects (Pieces/ULDs), storagePlaceIdentifier"},{"location":"Orchestration/orchestration-16/#06-handover-freight-to-forwarder","title":"06. Handover freight to forwarder","text":"<p>Loading action (actual) is created to link Pieces and TransportMovement (Truck).</p> <p>Event is added on Pieces and/or Shipment to record DLV milestone.</p> <p>Message: <code>(X)FSU</code> with DLV status Milestone: <code>DLV</code></p>"},{"location":"Orchestration/orchestration-16/#api-interaction_3","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Loading (Actual) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (loading), actionTimeType (actual), onTransportMeans (if relevant at that stage) Forwarder Forwarder POST Event on Pieces or Shipment Create Event: eventFor (Pieces or Shipment), eventCode (DLV), eventDate, recordingActor"},{"location":"Orchestration/orchestration-17/","title":"P17 - Receive shipment at forwarder warehouse","text":"<p>Freight is received at forwarder hub and prepared or delivery to a branch facility before final delivery</p>"},{"location":"Orchestration/orchestration-17/#01-unload-truck-at-forwarder-hub","title":"01. Unload truck at forwarder hub","text":"<p>Unloading action (Actual) to record the unloading of the pieces from the truck</p>"},{"location":"Orchestration/orchestration-17/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST unLoading (Actual) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (unloading), actionTimeType (actual), onTransportMeans (if relevant at that stage)"},{"location":"Orchestration/orchestration-17/#02-deconsolidation","title":"02. Deconsolidation","text":""},{"location":"Orchestration/orchestration-17/#03-check-shipment-details-and-physical-integrity","title":"03. Check shipment details and physical integrity","text":"<p>Check and/or Events can be created on Pieces to record the physical integrity check results</p> <p>Milestone: <code>RIW</code></p>"},{"location":"Orchestration/orchestration-17/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Shipper or Forwarder Forwarder POST Event on Pieces Create Event: eventFor (Pieces), eventLocation (forwarder hub), eventName (Pieces checked at forwarder hub), evetndAte, recordingActor"},{"location":"Orchestration/orchestration-17/#04-issue-loading-list-for-on-carriage-or-delivery","title":"04. Issue loading list for on carriage or delivery","text":"<p>TransportMovement for truck movement from forwarder warehouse to forwarder branch facility.</p> <p>Loading actions (Planned) are created to link Pieces to the TransportMovement.</p> <p>Loading actions (Actuals) are created to link Pieces to the TransportMovement.</p>"},{"location":"Orchestration/orchestration-17/#api-interaction_2","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST TransportMovement (Truck) Create TM-Truck: departureLocation (forwarder hub), arrivalLocation (forwarder branch facility) Forwarder Forwarder POST Loading (Planned) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (loading), actionTimeType (planned), onTransportMeans (if relevant at that stage) Forwarder Forwarder POST Loading (Actual) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (loading), actionTimeType (actual), onTransportMeans (if relevant at that stage)"},{"location":"Orchestration/orchestration-18/","title":"P18 - Movement between hub and branch facility","text":"<p>Movement between forwarder hub and branch facility before final delivery</p>"},{"location":"Orchestration/orchestration-18/#01-depart-truck-to-forwarder-branch-facility","title":"01. Depart truck to forwarder branch facility","text":"<p>MovementTimes is added on TransportMovement (Truck) to record the departure from forwarder hub</p> <p>Milestone: <code>DIW</code></p>"},{"location":"Orchestration/orchestration-18/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on TransportMovement (TM-Truck) Create Event: eventFor (TM-Truck), eventLocation (forwarder hub), eventName (Arrival at forwarder hub), eventDate, recordingActor Forwarder Forwarder POST Optional - MovementTime on TransportMovement (TM-truck) Create MovementTime: movementTimeType (actual), movementMilestone (AD), movementTimestamp"},{"location":"Orchestration/orchestration-18/#02-arrive-truck-at-forwarder-branch-facility","title":"02. Arrive truck at forwarder branch facility","text":"<p>MovementTimes is added on TransportMovement (Truck) to record the arrival at forwarder branch facility</p>"},{"location":"Orchestration/orchestration-18/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on TransportMovement (TM-Truck) Create Event: eventFor (TM-Truck), eventLocation (forwarder warehouse), eventName (Arrival at forwarder warehouse), eventDate, recordingActor Forwarder Forwarder POST Optional - MovementTime on TransportMovement (TM-truck) Create MovementTime: movementTimeType (actual), movementMilestone (AA), movementTimestamp"},{"location":"Orchestration/orchestration-19/","title":"P19 - Receive shipment at forwarder branch facility","text":"<p>Freight arrives at forwarder branch facility and is prepared for final delivery</p>"},{"location":"Orchestration/orchestration-19/#01-unload-truck-at-forwarder-warehouse","title":"01. Unload truck at forwarder warehouse","text":"<p>Unloading actions (Actuals) are created between Pieces and the TransportMovement to indicate unloading</p>"},{"location":"Orchestration/orchestration-19/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Loading (Actual) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (unloading), actionTimeType (actual), onTransportMeans (if relevant at that stage)"},{"location":"Orchestration/orchestration-19/#02-check-shipment-details-and-physical-integrity","title":"02. Check shipment details and physical integrity","text":"<p>Check and/or Events can be created on Pieces to record the physical integrity check results</p>"},{"location":"Orchestration/orchestration-19/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Shipper or Forwarder Forwarder POST Event on Pieces Create Event: eventFor (Pieces), eventLocation (forwarder hub), eventName (Pieces checked at forwarder hub), evetndAte, recordingActor"},{"location":"Orchestration/orchestration-19/#03-issue-loading-list-for-on-carriage-or-delivery","title":"03. Issue loading list for on carriage or delivery","text":"<p>TransportMovement for truck movement from forwarder branch facility to consignee.</p> <p>Loading actions (Planned) are created to link Pieces to the TransportMovement.</p> <p>Loading actions (Actuals) are created to link Pieces to the TransportMovement.</p> <p>Milestone: <code>RIW</code></p>"},{"location":"Orchestration/orchestration-19/#api-interaction_2","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST TransportMovement (Truck) Create TM-Truck: departureLocation (forwarder hub), arrivalLocation (consignee location) Forwarder Forwarder POST Loading (Planned) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (loading), actionTimeType (planned), onTransportMeans (if relevant at that stage) Forwarder Forwarder POST Loading (Actual) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (loading), actionTimeType (actual), onTransportMeans (if relevant at that stage)"},{"location":"Orchestration/orchestration-20/","title":"P20 - Prepare handover to consignee","text":"<p>Freight arrives at forwarder branch facility and is prepared for final delivery or picked up by customer directly</p>"},{"location":"Orchestration/orchestration-20/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST TransportMovement (Truck) Create TM-Truck: departureLocation (forwarder hub), arrivalLocation (consignee location) Forwarder Forwarder POST Loading (Planned) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (loading), actionTimeType (planned), onTransportMeans (if relevant at that stage) Forwarder Forwarder POST Loading (Actual) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (loading), actionTimeType (actual), onTransportMeans (if relevant at that stage)"},{"location":"Orchestration/orchestration-20/#01-contact-customer-for-handover-instructions","title":"01. Contact customer for handover instructions","text":"<p>Internal process</p> <p>Milestone: <code>HDP</code> / <code>TPN</code></p>"},{"location":"Orchestration/orchestration-20/#02-issue-loading-list-for-truck-to-consignee-load-truck","title":"02. Issue loading list for truck to consignee / load truck","text":"<p>TransportMovement for truck movement delivery to consignee is created/updated.</p> <p>Loading actions (Planned) are created to link Pieces to the TransportMovement.</p>"},{"location":"Orchestration/orchestration-20/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST or PATCH TransportMovement (Truck) Create TM-Truck (see steps before) or update based on latest information available Forwarder Forwarder POST Loading (Planned) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (loading), actionTimeType (planned), onTransportMeans (if relevant at that stage) Forwarder Forwarder POST Loading (Actual) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (loading), actionTimeType (actual), onTransportMeans (if relevant at that stage)"},{"location":"Orchestration/orchestration-20/#03-pick-up-freight-by-customer","title":"03. Pick up freight by customer","text":"<p>Event is added on Pieces to indicate that customer has picked up freight</p> <p>Milestone: <code>SPC</code></p>"},{"location":"Orchestration/orchestration-20/#api-interaction_2","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Shipper or Forwarder Forwarder POST Event on Pieces Create Event: eventFor (Pieces), eventLocation (forwarder branch facility), eventName (Pieces picked up by customer), evetndAte, recordingActor"},{"location":"Orchestration/orchestration-21/","title":"P21 Deliver, obtain POD and conclude cycle","text":"<p>Final delivery to consignee and proof od delivery</p>"},{"location":"Orchestration/orchestration-21/#01-deliver-to-consignee-and-capture-pod","title":"01. Deliver to consignee and capture POD","text":"<p>Unloading actions (Actuals) are created between Pieces and the TransportMovement to indicate unloading</p> <p>An Event is created on Pieces to capture the delivery</p> <p>Milestone: <code>POD</code></p>"},{"location":"Orchestration/orchestration-21/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Loading (Actual) Loading action: servedActivity (TM-Truck), loadedPieces (Pieces) and/or loadedUnits (ULDs/Pallets), loadingType (unloading), actionTimeType (actual), onTransportMeans (if relevant at that stage) Shipper or Forwarder Forwarder POST Event on Pieces Create Event: eventFor (Pieces), eventLocation (Consignee's location), eventName (Pieces delivered to consignee), evetndAte, recordingActor"},{"location":"Orchestration/orchestration-21/#02-finalize-d2d-routemap-and-validate-otp","title":"02. Finalize d2d routemap and validate OTP","text":""},{"location":"Orchestration/orchestration-21/#03-product-discrepancy-report-with-resolution","title":"03. Product discrepancy report with resolution","text":""},{"location":"Orchestration/orchestration-21/#04-include-in-reporting-to-shipperconsignee","title":"04. Include in reporting to shipper/consignee","text":""},{"location":"Orchestration/orchestration-cxml/","title":"CargoXML Mapping","text":""},{"location":"Orchestration/orchestration-cxml/#mapping-cxml-messages-with-one-record","title":"Mapping CXML messages with ONE Record","text":""},{"location":"Orchestration/orchestration-cxml/#introduction","title":"Introduction","text":"<p>We dedicate this section to the mapping between CXML messages (as per the last version on CXMl Toolkit Edition 12) and ONE Record standard (as per last version endorsed by COTB - Data Model 3.0.0)</p>"},{"location":"Orchestration/orchestration-cxml/#objectives","title":"Objectives","text":"<p>The transition from EDI to Data Sharing is highly dependent on the mapping between messages and ONE Record. Messaging standards (Cargo IMP and then Cargo XML) have been used extensively for the past decades by the industry. However messages in their current form have shown to be limited in terms of scalability with regards to upcoming regulations such as ACI/PLACI regimes.</p> <p>In the mapping between CXML messages and ONE Record, two main aspects need to be considered: * Mechanism: Some guidelines are usually required to understand how a message can be converted to ONE Record and vice versa. Some use cases and business rules cannot be directly translated as we need to consider a shift of mindset between EDI and Data sharing as well as a transition to Piece level tracking that ONE Record allows. * Data field mapping: A direct mapping between CXML fields and ONE Record data model is inevitable, it goes with the Mechanism part to properly understand what objects are impacted.</p>"},{"location":"Orchestration/orchestration-cxml/#messages-selected","title":"Messages selected","text":"<p>As CIMP standard has been sunset since 31st December 2024, we focus on CXML messages in their latest version (currently CXML Toolkit Edition 12) The selected messages for mapping are the following:</p> Message Message name Message version Comments XFWB XML Waybill Message 5.00 1st draft available XFZB XML HouseWaybill Message 4.00 - XFHL XML House Manifest Message 3.00 - XSDG XML Shippers' Declaration for Dangerous Goods Message 6.00 - XFSU XML Status Message 6.00 Ongoing XFFM XML Flight Manifest Message 4.00 - XFBL XML Freight Booked List Message 3.00 - XTMV XML Transport Movement Message 2.00 ?"},{"location":"Orchestration/orchestration-cxml/#general-conversion-guidelines","title":"General conversion guidelines","text":""},{"location":"Orchestration/orchestration-cxml/#note-on-data-types-and-patterns","title":"Note on data types and patterns","text":"<p>Data elements as defined in CIMP have:</p> <ul> <li>Length recommendations usually based on business rules such as the Waybill number</li> <li>Limited data types based on business rules or common sense</li> </ul> <p>When CXML was created, most restrictions were inherited from CIMP even though XML format allows to bypass technical limitations of CIMP, especially in number of occurences, field lengths or allowed characters.</p> <p>When first versions of ONE Record data model were created, restrictions coming from business rules were usually adapted in ONE Record using the <code>pattern</code> in the ontology.</p>"},{"location":"Orchestration/orchestration-cxml/#general-guidelines","title":"General guidelines","text":"<ul> <li>01 - Business rules and local regulatory requirements prevail over data properties technical restrictions (data length, pattern) expressed in the ontology if relevant.</li> <li>02 - When converting from ONE Record to CXML/CIMP there is no specific general guideline on the truncation of data properties. In CXML to CIMP conversion, such rules are expressed in IATA CXML Toolkit.</li> <li>03 - In ONE Record we try to avoid duplicate data as much as possible, especially totals are usually not in ONE Record data model if all detailed data are already available. This applies for instance for the total or summary values of charges.</li> </ul>"},{"location":"Orchestration/orchestration-cxml/#xfwb-mapping","title":"XFWB Mapping","text":""},{"location":"Orchestration/orchestration-cxml/#proposed-mechanism","title":"Proposed mechanism","text":"<p>XFWB data fields are mostly a mix of <code>Waybill</code>, <code>WaybillLineItem</code>, <code>Shipment</code>, <code>Pieces</code> and <code>TransportMovement</code> data in ONE Record realm.</p> <p>[Auth, Security in progress]</p>"},{"location":"Orchestration/orchestration-cxml/#usage-of-waybilllineitem-object","title":"Usage of WaybillLineItem object","text":"<p>At first it was proposed to use the <code>Shipment</code> and <code>Piece</code> objects to populate the Waybill line items. However examples have shown that the line items do not necessarily correlate to actual Pieces transported, for instance Dry Ice can be interpreted as a specific line item due to a specific rate while on the operations the package, containing dry ice and transported goods, are equivalent to one <code>Piece</code>.</p> <p>It was decided to introduce the <code>WaybillLineItem</code> object to properly share rate data as required in the Air Waybill. The <code>WaybillLineItem</code> has a n-to-1 relationship with a <code>Waybill</code> object and represents the different line items on the paper waybill with all their specifities based on the type of rating used.</p> <p>It is important to note that the <code>WaybillLineItem</code> has been added only in the context of sharing Air Waybill data. When looking at Operations, digital twins shall be used (<code>Piece</code>, <code>Item</code>, <code>Product</code>, etc.)</p>"},{"location":"Orchestration/orchestration-cxml/#usage-of-othercharge-object","title":"Usage of OtherCharge object","text":"<p>The <code>OtherCharge</code> object is used to record all charges, it refers to <code>&lt;ram:ApplicableLogisticsAllowanceCharge&gt;</code> grouping in XFWB message. Code List 1.2 \"Other Charge Code\" is used to properly identify the charges associated with the Prepaid/Collect indicator.</p> <p>Totals are not directly recorded in ONE Record as they can be directly calculated based on the existing data (e.g. filtering by type of charge and prepaid/collect indicator).</p>"},{"location":"Orchestration/orchestration-cxml/#other-specific-mapping-guidelines","title":"Other specific mapping guidelines","text":"<ul> <li> <p><code>DensityGroupCode</code> field will be linked to Distribution phase as the feedback received from the industry shows that it's not an operational data but used for the Sales &amp; Booking process part.</p> </li> <li> <p><code>Special Service Request</code> and <code>Other Shipping Instructions</code> code fields are not in ONE Record as there is no evidence of an actual referential and standard used for those. Moreover it seems stakeholders use SSR or OSI for the same purposes. Thus we have merged into <code>textualHandlingInstructions</code> property in ONE Record.</p> </li> <li> <p>In the <code>ApplicableRating</code> grouping, the <code>TypeCode</code> field is set to F (Facial) by default as it is the only value used with CXML.</p> </li> <li> <p>In the <code>ApplicalbeFreightRateServiceCharge</code> grouping, the <code>AppliedAmount</code> is not directly mapped as it is a total that needs to be derived from either the Rate or the multiplication of Rate and Chargeable weight depending on the type of charge. Refer to CSC Resolution 600a for further explanations.</p> </li> </ul>"},{"location":"Orchestration/orchestration-cxml/#xfzb-mapping","title":"XFZB Mapping","text":""},{"location":"Orchestration/orchestration-cxml/#xfhl-mapping","title":"XFHL Mapping","text":""},{"location":"Orchestration/orchestration-cxml/#xsdg-mapping","title":"XSDG Mapping","text":""},{"location":"Orchestration/orchestration-cxml/#xfsu-mapping","title":"XFSU Mapping","text":""},{"location":"Orchestration/orchestration-cxml/#proposed-mechanism_1","title":"Proposed mechanism","text":"<p>XFSU message is mostly used to provide a Shipment Status update, discrepancy details or sometimes to provide complementary Customs information. In most cases, the Status updates is based on the usage of LogisticsEvents on the Shipment and/or the Pieces. The XFSU data fields are then a mix of Waybill, Shipment, Pieces and LogisticsEvent data in ONE Record realm.</p> <p>In case of full shipment status update, the LogisticsEvents can be added on the Shipment or on all the Pieces. Both scenarios are valid.</p> <p>Specific case of split shipment: With messaging standard, it is possible to transmit status update on a split shipment without the need to identify properly the pieces impacted. In this case the data transmitted can only be kept at Shipment level, however this pratice is contradictory with the piece level management design principle of ONE Record. To cope with that there are multiple possibilities to map XFSU with ONE Record, depending on stakeholder's capabilities on the operations side to identify impacted pieces of a shipment. * If pieces cannot be properly identified, recommendation would be to use LogisticsEvent on the Shipment, using the LogisticsEvent#partialEventIndicator to notify it applies to a split shipment. In this scenario it becomes complicated to provide the right level of information at the \"AssociatedStatusConsignment\" level as per the XFSU schema. (dig deeper on that aspect). * If pieces can be properly identified, it is recommended to use LogisticsEvent on the identified Pieces. The LogisticsEvent#partialEventIndicator can be used to notify it applies only to selected pieces and not to the whole shipment but all details at \"AssociatedStatusConsignment\" level are at Piece level in ONE Record realm.</p>"},{"location":"Orchestration/orchestration-cxml/#xffm-mapping","title":"XFFM Mapping","text":""},{"location":"Orchestration/orchestration-cxml/#xfbl-mapping","title":"XFBL Mapping","text":""},{"location":"Orchestration/orchestration-cxml/#xtmv-mapping","title":"XTMV Mapping","text":"<p>(To be discussed)</p>"},{"location":"Orchestration/orchestration-mop/","title":"Introduction","text":""},{"location":"Orchestration/orchestration-mop/#purpose","title":"Purpose","text":"<p>This section will focus on providing guidelines on how to use ONE Record from a Data Model point of view based on standardized processes.</p>"},{"location":"Orchestration/orchestration-mop/#master-operating-plan-mop","title":"Master Operating Plan (MOP)","text":""},{"location":"Orchestration/orchestration-mop/#what-is-the-mop","title":"What is the MOP ?","text":"<p>The Master Operating Plan (MOP) describes the key processes and sub-processes involved in transporting air cargo from shipper to consignee in a systematic and harmonized manner. It provides the air cargo supply chain with the first, industry-endorsed, standard description of the end-to-end process for transporting cargo by air.</p> <p>It is maintained by Cargo iQ and then proposed to the industry for a wider usage and adoption.</p> <p>For further details you can refer to IATA's website here:</p> <ul> <li>IATA Knowledge Hub - Air Cargo Handling</li> <li>Current MOP version endorsed by COTB</li> </ul>"},{"location":"Orchestration/orchestration-mop/#version-of-the-mop-used-for-the-orchestration","title":"Version of the MOP used for the Orchestration","text":"<p>The current version of the MOP endorsed by COTB is v1.2 (see link above). However in 2023 Cargo iQ initiated an update of the MOP. This update includes a swimlane view of the processes to properly identify stakeholders involved and the review of all steps. This is the version tha was used, in collaboration with Cargo iQ, for the Orchestration.</p> <p>The sequence of the steps may slightly differ from the MOP v1.2 and few additions/removals/adjustemnts were made. However those changes don't have a major impact on the overall logistics supply chain.</p>"},{"location":"Orchestration/orchestration-mop/#mop-structure","title":"MOP structure","text":""},{"location":"Orchestration/orchestration-mop/#x","title":"x","text":""},{"location":"Orchestration/orchestration-mop/#based-on-messaging-and-associated-milestones","title":"Based on messaging and associated milestones","text":"<p>MOP is still heavily relying on messaging standard (CIMP mainly) and most milestones are directly linked to messages such as (X)FWB or (X)FSU the Status update dedicated message.</p> <p>Since ONE Record is about Data Sharing and not messaging, the mapping with the MOP is not about validating a message but making sure the information initially provided in that message is also fully available in ONE Record.</p> <p>For instance (X)FWB is used to provide Air Waybil data, in ONE Record these data elements are not in one single object but spread among multiple objects (see dedicated CXML Mapping section for further details). Our objective is to make sure that when the (X)FWB needs to be sent from a process perspective, all data is available.</p>"},{"location":"Orchestration/orchestration-mvt01/","title":"Movement from Shipper to Forwarder","text":"<p>This part of the process represents the movement from the Shipper's premises to the Forwarder's warehouse.</p>"},{"location":"Orchestration/orchestration-mvt01/#01-departure-from-shipper","title":"01. Departure from Shipper","text":"<p>Event is added on the Truck TransportMovement indicating departure from shipper's location</p>"},{"location":"Orchestration/orchestration-mvt01/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on TransportMovement (Truck) Create Event: eventFor (TM-Truck), eventLocation (shipper's location), eventName (Departure from Shipper's location), eventDate, recordingActor Forwarder Forwarder POST Optional - MovementTime on TransportMovement (Truck) Create MovementTime: movementTimeType (actual), movementMilestone (AO), movementTimestamp"},{"location":"Orchestration/orchestration-mvt01/#02-arrival-of-freight-at-forwarder-warehouse","title":"02. Arrival of freight at forwarder warehouse","text":"<p>Event is added on the Truck TransportMovement indicating arrival at forwarder warehouse.</p> <p>Unloading (actuals) are created and linked with TransportMovement (truck) and Pieces.</p>"},{"location":"Orchestration/orchestration-mvt01/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on TransportMovement (Truck) Create Event: eventFor (TM-Truck), eventLocation (forwarder warehouse), eventName (Arrival at forwarder warehouse), eventDate, recordingActor Forwarder Forwarder POST Optional - MovementTime on TransportMovement (Truck) Create MovementTime: movementTimeType (actual), movementMilestone (AB), movementTimestamp Forwarder Forwarder POST Loading (Actual) Loading action (Actual): servedActivity (TM Truck), loadedPieces, onTransportMeans, loadingType (Unloading), executionStatus (Actual), actionEndTime"},{"location":"Orchestration/orchestration-mvt02/","title":"Movement within Fowarder warehouses","text":"<p>This part of the process represents the movement from the Forwarder's warehouse to one of its hub.</p>"},{"location":"Orchestration/orchestration-mvt02/#01-departure-of-truck-from-forwarder","title":"01. Departure of truck from forwarder","text":"<p>Event is added on the Truck TransportMovement indicating departure from forwarder's warehouse.</p>"},{"location":"Orchestration/orchestration-mvt02/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on TransportMovement (Truck) Create Event: eventFor (TM-Truck), eventLocation (forwarder warehouse), eventName (Departure from forwarder warehouse), eventDate, recordingActor Forwarder Forwarder POST Optional - MovementTime on TransportMovement (Truck) Create MovementTime: movementTimeType (actual), movementMilestone (AO), movementTimestamp"},{"location":"Orchestration/orchestration-mvt02/#02-arrival-of-truck-at-forwarder-hub","title":"02. Arrival of truck at forwarder hub","text":"<p>Event is added on the Truck TransportMovement indicating arrival at forwarder hub.</p> <p>Unloading (actuals) are created and linked with TransportMovement (truck) and Pieces.</p>"},{"location":"Orchestration/orchestration-mvt02/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on TransportMovement (Truck) Create Event: eventFor (TM-Truck), eventLocation (forwarder hub), eventName (Arrival at forwarder hub), eventDate, recordingActor Forwarder Forwarder POST Optional - MovementTime on TransportMovement (Truck) Create MovementTime: movementTimeType (actual), movementMilestone (AA), movementTimestamp Forwarder Forwarder POST Loading (Actual) Unloading action (actual): servedActivity (TM Truck), loadedPieces, onTransportMeans, loadingType (Unloading), executionStatus (Planned), actionEndTime"},{"location":"Orchestration/orchestration-mvt03/","title":"Movement from Forwarder hub to Carrier domain","text":"<p>This part of the process represents the movement from the Forwarder's warehouse to Carrier domain.</p>"},{"location":"Orchestration/orchestration-mvt03/#01-depart-truck-from-forwarder-to-carrier-domain","title":"01. Depart truck from forwarder to carrier domain","text":"<p>Loading (actuals) are created and linked with TransportMovement (truck) and Pieces.</p> <p>Events can be created on the Pieces to inform of the loading into the truck.</p> <p>Event is added on the Truck TransportMovement indicating departure from warehouse.</p> <p>Milestone: <code>DEW</code></p>"},{"location":"Orchestration/orchestration-mvt03/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Loading (Actual) Loading action (actual): servedActivity (TM Truck), loadedPieces, onTransportMeans, loadingType (Loading), executionStatus (Planned), actionEndTime Shipper or Forwarder Forwarder POST Event on Piece Create Event: eventFor (Piece), eventLocation (if relevant), eventCode or eventName (Loaded in truck), eventDate, recordingActor Shipper or Forwarder Forwarder POST Event on TransportMovement (Truck) Create Event: eventFor (TM-Truck), eventLocation (forwarder warehouse), eventName (Departure from forwarder warehouse), eventDate, recordingActor"},{"location":"Orchestration/orchestration-mvt03/#02-arrival-of-truck-at-carrier-domain","title":"02. Arrival of truck at carrier domain","text":"<p>Event is added on the Truck TransportMovement indicating arrival at carrier domain.</p>"},{"location":"Orchestration/orchestration-mvt03/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on TransportMovement (Truck) Create Event: eventFor (TM-Truck), eventLocation (carrier domain tbd), eventName (Arrival at carrier domain), eventDate, recordingActor"},{"location":"Orchestration/orchestration-mvt04/","title":"Movement from destination carrier domain to forwarder warehouse","text":"<p>This part of the process represents the movement from the destination carrier domain to Forwarder's forwarder hub at destination</p>"},{"location":"Orchestration/orchestration-mvt04/#01-depart-freight-for-forwarder-warehouse","title":"01. Depart freight for forwarder warehouse","text":"<p>MovementTimes is added on TransportMovement (Truck) to record the departure from carrier domain</p>"},{"location":"Orchestration/orchestration-mvt04/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on TransportMovement (TM-Truck) Create Event: eventFor (TM-Truck), eventLocation (WH), eventName (Departure from warehouse), eventDate, recordingActor Forwarder Forwarder POST Optional - MovementTime on TransportMovement (TM-truck) Create MovementTime: movementTimeType (actual), movementMilestone (AD), movementTimestamp"},{"location":"Orchestration/orchestration-mvt04/#02-arrive-truck-at-forwarder-warehouse","title":"02. Arrive truck at forwarder warehouse","text":"<p>MovementTimes is added on TransportMovement (Truck) to record the arrival at forwarder warehouse</p>"},{"location":"Orchestration/orchestration-mvt04/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on TransportMovement (TM-Truck) Create Event: eventFor (TM-Truck), eventLocation (forwarder hub), eventName (Arrival at forwarder hub), eventDate, recordingActor Forwarder Forwarder POST Optional - MovementTime on TransportMovement (TM-truck) Create MovementTime: movementTimeType (actual), movementMilestone (AA), movementTimestamp"},{"location":"Orchestration/orchestration-mvt05/","title":"Movement from forwarder branch facility to consignee location","text":"<p>This part of the process represents the movement from the forwarder branch facility to consignee's premises</p>"},{"location":"Orchestration/orchestration-mvt05/#01-depart-truck-from-forwarder-branch-facility-to-consignee","title":"01. Depart truck from forwarder branch facility to consignee","text":"<p>MovementTimes is added on TransportMovement (Truck) to record the arrival at consignee's location</p>"},{"location":"Orchestration/orchestration-mvt05/#api-interaction","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on TransportMovement (TM-Truck) Create Event: eventFor (TM-Truck), eventLocation (forwarder branch facility), eventName (departure from forwarder branch facility), eventDate, recordingActor Forwarder Forwarder POST Optional - MovementTime on TransportMovement (TM-truck) Create MovementTime: movementTimeType (actual), movementMilestone (AD), movementTimestamp"},{"location":"Orchestration/orchestration-mvt05/#02-arrive-truck-at-consignee","title":"02. Arrive truck at consignee","text":"<p>Unloading actions (Actuals) are created between Pieces and the TransportMovement to indicate unloading</p>"},{"location":"Orchestration/orchestration-mvt05/#api-interaction_1","title":"API Interaction","text":"1R Server Stakeholder API Calls LogiticsObject Details Forwarder Forwarder POST Event on TransportMovement (TM-Truck) Create Event: eventFor (TM-Truck), eventLocation (consignee location), eventName (Arrival at consignee location), eventDate, recordingActor Forwarder Forwarder POST Optional - MovementTime on TransportMovement (TM-truck) Create MovementTime: movementTimeType (actual), movementMilestone (AA), movementTimestamp"}]}